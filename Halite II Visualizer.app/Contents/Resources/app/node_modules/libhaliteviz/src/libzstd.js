var libzstd = function(libzstd) {
  libzstd = libzstd || {};
  var Module = libzstd;

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof libzstd !== 'undefined' ? libzstd : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function shell_read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.responseType = 'arraybuffer';
      xhr.send(null);
      return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function shell_print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function shell_printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}
if (!Module['quit']) {
  Module['quit'] = function(status, toThrow) {
    throw toThrow;
  }
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
    return value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var __cxa_demangle_func = Module['___cxa_demangle'] || Module['__cxa_demangle'];
  if (__cxa_demangle_func) {
    try {
      var s =
        func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = __cxa_demangle_func(buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - Module['asm'].stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

if (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {
  var ret;
  try {
    if (ArrayBuffer.transfer) {
      ret = ArrayBuffer.transfer(buffer, size);
    } else {
      var oldHEAP8 = HEAP8;
      ret = new ArrayBuffer(size);
      var temp = new Int8Array(ret);
      temp.set(oldHEAP8);
    }
  } catch(e) {
    return false;
  }
  var success = _emscripten_replace_memory(ret);
  if (!success) return false;
  return ret;
};

function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.


  var PAGE_MULTIPLE = Module["usingWasm"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.
  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.

  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {
    Module.printErr('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');
    return false;
  }

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;
  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.

  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.
    if (TOTAL_MEMORY <= 536870912) {
      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...
    } else {
      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT); // ..., but after that, add smaller increments towards 2GB, which we cannot reach
    }
  }

  var start = Date.now();

  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);
  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {
    Module.printErr('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');
    if (replacement) {
      Module.printErr('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);
    }
    // restore the state to before this call, we failed
    TOTAL_MEMORY = OLD_TOTAL_MEMORY;
    return false;
  }

  // everything worked

  updateGlobalBuffer(replacement);
  updateGlobalBufferViews();

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  if (!Module["usingWasm"]) {
    Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);
  }


  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = Runtime.GLOBAL_BASE;

STATICTOP = STATIC_BASE + 8512;
/* global initializers */  __ATINIT__.push();


/* memory initializer */ allocate([1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,38,0,0,0,130,0,0,0,33,5,0,0,74,0,0,0,103,8,0,0,38,0,0,0,192,1,0,0,128,0,0,0,73,5,0,0,74,0,0,0,190,8,0,0,41,0,0,0,44,2,0,0,128,0,0,0,73,5,0,0,74,0,0,0,190,8,0,0,47,0,0,0,202,2,0,0,128,0,0,0,138,5,0,0,74,0,0,0,132,9,0,0,53,0,0,0,115,3,0,0,128,0,0,0,157,5,0,0,74,0,0,0,160,9,0,0,61,0,0,0,129,3,0,0,128,0,0,0,235,5,0,0,75,0,0,0,62,10,0,0,68,0,0,0,158,3,0,0,128,0,0,0,77,6,0,0,75,0,0,0,170,10,0,0,75,0,0,0,179,3,0,0,128,0,0,0,193,6,0,0,77,0,0,0,31,13,0,0,77,0,0,0,83,4,0,0,128,0,0,0,35,8,0,0,81,0,0,0,166,15,0,0,84,0,0,0,153,4,0,0,128,0,0,0,75,9,0,0,87,0,0,0,177,18,0,0,88,0,0,0,218,4,0,0,128,0,0,0,111,9,0,0,93,0,0,0,35,20,0,0,84,0,0,0,69,5,0,0,128,0,0,0,84,10,0,0,106,0,0,0,140,20,0,0,106,0,0,0,175,5,0,0,128,0,0,0,118,9,0,0,124,0,0,0,78,16,0,0,124,0,0,0,210,2,0,0,128,0,0,0,99,7,0,0,145,0,0,0,144,7,0,0,146,0,0,0,1,0,0,0,4,0,0,0,8,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,6,0,1,1,0,0,0,4,16,0,0,4,32,0,1,5,0,0,3,5,0,0,4,5,0,0,6,5,0,0,7,5,0,0,9,5,0,0,10,5,0,0,12,5,0,0,14,6,0,0,16,5,0,0,18,5,0,0,19,5,0,0,21,5,0,0,22,5,0,0,24,5,32,0,25,5,0,0,26,5,0,0,27,6,0,0,29,6,0,0,31,6,32,0,0,4,0,0,1,4,0,0,2,5,32,0,4,5,0,0,5,5,32,0,7,5,0,0,8,5,32,0,10,5,0,0,11,5,0,0,13,6,32,0,16,5,0,0,17,5,32,0,19,5,0,0,20,5,32,0,22,5,0,0,23,5,0,0,25,4,16,0,25,4,32,0,26,5,0,0,28,6,0,0,30,6,48,0,0,4,16,0,1,4,32,0,2,5,32,0,3,5,32,0,5,5,32,0,6,5,32,0,8,5,32,0,9,5,32,0,11,5,32,0,12,5,0,0,15,6,32,0,17,5,32,0,18,5,32,0,20,5,32,0,21,5,32,0,23,5,32,0,24,5,0,0,35,6,0,0,34,6,0,0,33,6,0,0,32,6,5,0,1,1,0,0,0,5,0,0,6,4,0,0,9,5,0,0,15,5,0,0,21,5,0,0,3,5,0,0,7,4,0,0,12,5,0,0,18,5,0,0,23,5,0,0,5,5,0,0,8,4,0,0,14,5,0,0,20,5,0,0,2,5,16,0,7,4,0,0,11,5,0,0,17,5,0,0,22,5,0,0,4,5,16,0,8,4,0,0,13,5,0,0,19,5,0,0,1,5,16,0,6,4,0,0,10,5,0,0,16,5,0,0,28,5,0,0,27,5,0,0,26,5,0,0,25,5,0,0,24,5,6,0,1,1,0,0,0,6,0,0,1,4,32,0,2,5,0,0,3,5,0,0,5,5,0,0,6,5,0,0,8,5,0,0,10,6,0,0,13,6,0,0,16,6,0,0,19,6,0,0,22,6,0,0,25,6,0,0,28,6,0,0,31,6,0,0,33,6,0,0,35,6,0,0,37,6,0,0,39,6,0,0,41,6,0,0,43,6,0,0,45,6,16,0,1,4,0,0,2,4,32,0,3,5,0,0,4,5,32,0,6,5,0,0,7,5,0,0,9,6,0,0,12,6,0,0,15,6,0,0,18,6,0,0,21,6,0,0,24,6,0,0,27,6,0,0,30,6,0,0,32,6,0,0,34,6,0,0,36,6,0,0,38,6,0,0,40,6,0,0,42,6,0,0,44,6,32,0,1,4,48,0,1,4,16,0,2,4,32,0,4,5,32,0,5,5,32,0,7,5,32,0,8,5,0,0,11,6,0,0,14,6,0,0,17,6,0,0,20,6,0,0,23,6,0,0,26,6,0,0,29,6,0,0,52,6,0,0,51,6,0,0,50,6,0,0,49,6,0,0,48,6,0,0,47,6,0,0,46,6,8,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,13,0,0,0,29,0,0,0,61,0,0,0,125,0,0,0,253,0,0,0,253,1,0,0,253,3,0,0,253,7,0,0,253,15,0,0,253,31,0,0,253,63,0,0,253,127,0,0,253,255,0,0,253,255,1,0,253,255,3,0,253,255,7,0,253,255,15,0,253,255,31,0,253,255,63,0,253,255,127,0,253,255,255,0,253,255,255,1,253,255,255,3,253,255,255,7,253,255,255,15,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,37,0,0,0,39,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,131,0,0,0,3,1,0,0,3,2,0,0,3,4,0,0,3,8,0,0,3,16,0,0,3,32,0,0,3,64,0,0,3,128,0,0,3,0,1,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,18,0,0,0,20,0,0,0,22,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,8,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,38,0,0,0,130,0,0,0,33,5,0,0,74,0,0,0,103,8,0,0,38,0,0,0,192,1,0,0,128,0,0,0,73,5,0,0,74,0,0,0,190,8,0,0,41,0,0,0,44,2,0,0,128,0,0,0,73,5,0,0,74,0,0,0,190,8,0,0,47,0,0,0,202,2,0,0,128,0,0,0,138,5,0,0,74,0,0,0,132,9,0,0,53,0,0,0,115,3,0,0,128,0,0,0,157,5,0,0,74,0,0,0,160,9,0,0,61,0,0,0,129,3,0,0,128,0,0,0,235,5,0,0,75,0,0,0,62,10,0,0,68,0,0,0,158,3,0,0,128,0,0,0,77,6,0,0,75,0,0,0,170,10,0,0,75,0,0,0,179,3,0,0,128,0,0,0,193,6,0,0,77,0,0,0,31,13,0,0,77,0,0,0,83,4,0,0,128,0,0,0,35,8,0,0,81,0,0,0,166,15,0,0,84,0,0,0,153,4,0,0,128,0,0,0,75,9,0,0,87,0,0,0,177,18,0,0,88,0,0,0,218,4,0,0,128,0,0,0,111,9,0,0,93,0,0,0,35,20,0,0,84,0,0,0,69,5,0,0,128,0,0,0,84,10,0,0,106,0,0,0,140,20,0,0,106,0,0,0,175,5,0,0,128,0,0,0,118,9,0,0,124,0,0,0,78,16,0,0,124,0,0,0,210,2,0,0,128,0,0,0,99,7,0,0,145,0,0,0,144,7,0,0,146,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,8,0,0,0,15,0,0,0,16,0,0,0,31,0,0,0,32,0,0,0,63,0,0,0,64,0,0,0,127,0,0,0,128,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,8,0,0,0,15,0,0,0,16,0,0,0,31,0,0,0,32,0,0,0,63,0,0,0,64,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,38,0,0,0,130,0,0,0,33,5,0,0,74,0,0,0,103,8,0,0,38,0,0,0,192,1,0,0,128,0,0,0,73,5,0,0,74,0,0,0,190,8,0,0,41,0,0,0,44,2,0,0,128,0,0,0,73,5,0,0,74,0,0,0,190,8,0,0,47,0,0,0,202,2,0,0,128,0,0,0,138,5,0,0,74,0,0,0,132,9,0,0,53,0,0,0,115,3,0,0,128,0,0,0,157,5,0,0,74,0,0,0,160,9,0,0,61,0,0,0,129,3,0,0,128,0,0,0,235,5,0,0,75,0,0,0,62,10,0,0,68,0,0,0,158,3,0,0,128,0,0,0,77,6,0,0,75,0,0,0,170,10,0,0,75,0,0,0,179,3,0,0,128,0,0,0,193,6,0,0,77,0,0,0,31,13,0,0,77,0,0,0,83,4,0,0,128,0,0,0,35,8,0,0,81,0,0,0,166,15,0,0,84,0,0,0,153,4,0,0,128,0,0,0,75,9,0,0,87,0,0,0,177,18,0,0,88,0,0,0,218,4,0,0,128,0,0,0,111,9,0,0,93,0,0,0,35,20,0,0,84,0,0,0,69,5,0,0,128,0,0,0,84,10,0,0,106,0,0,0,140,20,0,0,106,0,0,0,175,5,0,0,128,0,0,0,118,9,0,0,124,0,0,0,78,16,0,0,124,0,0,0,210,2,0,0,128,0,0,0,99,7,0,0,145,0,0,0,144,7,0,0,146,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,8,0,0,0,15,0,0,0,16,0,0,0,31,0,0,0,32,0,0,0,63,0,0,0,64,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,38,0,0,0,130,0,0,0,33,5,0,0,74,0,0,0,103,8,0,0,38,0,0,0,192,1,0,0,128,0,0,0,73,5,0,0,74,0,0,0,190,8,0,0,41,0,0,0,44,2,0,0,128,0,0,0,73,5,0,0,74,0,0,0,190,8,0,0,47,0,0,0,202,2,0,0,128,0,0,0,138,5,0,0,74,0,0,0,132,9,0,0,53,0,0,0,115,3,0,0,128,0,0,0,157,5,0,0,74,0,0,0,160,9,0,0,61,0,0,0,129,3,0,0,128,0,0,0,235,5,0,0,75,0,0,0,62,10,0,0,68,0,0,0,158,3,0,0,128,0,0,0,77,6,0,0,75,0,0,0,170,10,0,0,75,0,0,0,179,3,0,0,128,0,0,0,193,6,0,0,77,0,0,0,31,13,0,0,77,0,0,0,83,4,0,0,128,0,0,0,35,8,0,0,81,0,0,0,166,15,0,0,84,0,0,0,153,4,0,0,128,0,0,0,75,9,0,0,87,0,0,0,177,18,0,0,88,0,0,0,218,4,0,0,128,0,0,0,111,9,0,0,93,0,0,0,35,20,0,0,84,0,0,0,69,5,0,0,128,0,0,0,84,10,0,0,106,0,0,0,140,20,0,0,106,0,0,0,175,5,0,0,128,0,0,0,118,9,0,0,124,0,0,0,78,16,0,0,124,0,0,0,210,2,0,0,128,0,0,0,99,7,0,0,145,0,0,0,144,7,0,0,146,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,255,255,1,0,255,255,3,0,255,255,7,0,255,255,15,0,255,255,31,0,255,255,63,0,255,255,127,0,255,255,255,0,255,255,255,1,255,255,255,3,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,34,0,0,0,36,0,0,0,38,0,0,0,40,0,0,0,44,0,0,0,48,0,0,0,56,0,0,0,64,0,0,0,80,0,0,0,96,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,18,0,0,0,20,0,0,0,22,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,1,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,8,0,0,0,15,0,0,0,16,0,0,0,31,0,0,0,32,0,0,0,63,0,0,0,64,0,0,0,127,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,38,0,0,0,130,0,0,0,33,5,0,0,74,0,0,0,103,8,0,0,38,0,0,0,192,1,0,0,128,0,0,0,73,5,0,0,74,0,0,0,190,8,0,0,41,0,0,0,44,2,0,0,128,0,0,0,73,5,0,0,74,0,0,0,190,8,0,0,47,0,0,0,202,2,0,0,128,0,0,0,138,5,0,0,74,0,0,0,132,9,0,0,53,0,0,0,115,3,0,0,128,0,0,0,157,5,0,0,74,0,0,0,160,9,0,0,61,0,0,0,129,3,0,0,128,0,0,0,235,5,0,0,75,0,0,0,62,10,0,0,68,0,0,0,158,3,0,0,128,0,0,0,77,6,0,0,75,0,0,0,170,10,0,0,75,0,0,0,179,3,0,0,128,0,0,0,193,6,0,0,77,0,0,0,31,13,0,0,77,0,0,0,83,4,0,0,128,0,0,0,35,8,0,0,81,0,0,0,166,15,0,0,84,0,0,0,153,4,0,0,128,0,0,0,75,9,0,0,87,0,0,0,177,18,0,0,88,0,0,0,218,4,0,0,128,0,0,0,111,9,0,0,93,0,0,0,35,20,0,0,84,0,0,0,69,5,0,0,128,0,0,0,84,10,0,0,106,0,0,0,140,20,0,0,106,0,0,0,175,5,0,0,128,0,0,0,118,9,0,0,124,0,0,0,78,16,0,0,124,0,0,0,210,2,0,0,128,0,0,0,99,7,0,0,145,0,0,0,144,7,0,0,146,0,0,0,1,0,0,0,4,0,0,0,8,0,0,0,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,13,0,0,0,29,0,0,0,61,0,0,0,125,0,0,0,253,0,0,0,253,1,0,0,253,3,0,0,253,7,0,0,253,15,0,0,253,31,0,0,253,63,0,0,253,127,0,0,253,255,0,0,253,255,1,0,253,255,3,0,253,255,7,0,253,255,15,0,253,255,31,0,253,255,63,0,253,255,127,0,253,255,255,0,253,255,255,1,253,255,255,3,253,255,255,7,253,255,255,15,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,37,0,0,0,39,0,0,0,41,0,0,0,43,0,0,0,47,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,131,0,0,0,3,1,0,0,3,2,0,0,3,4,0,0,3,8,0,0,3,16,0,0,3,32,0,0,3,64,0,0,3,128,0,0,3,0,1,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,18,0,0,0,20,0,0,0,22,0,0,0,24,0,0,0,28,0,0,0,32,0,0,0,40,0,0,0,48,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,8,0,0,0,16,0,0,0,32,0,0,0,64,0,0,0,128,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,11,0,0,0,64,29,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,24,0,0,4,0,3,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,0,1,0,1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,0,2,0,1,0,1,0,1,0,1,0,1,0,255,255,255,255,255,255,255,255,1,0,1,0,1,0,1,0,1,0,1,0,2,0,2,0,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,255,255,255,255,255,255,255,255,255,255,1,0,4,0,3,0,2,0,2,0,2,0,2,0,2,0,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,4,0,3,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,1,0,1,0,1,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,3,0,2,0,1,0,1,0,1,0,1,0,1,0,255,255,255,255,255,255,255,255,1,0,1,0,1,0,1,0,1,0,1,0,2,0,2,0,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,255,255,255,255,255,255,255,255,255,255,1,0,4,0,3,0,2,0,2,0,2,0,2,0,2,0,2,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   

   

  var _llvm_ctlz_i32=true;

   

   

   

  function ___lock() {}

  function ___unlock() {}

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
    

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }  

  
   function _llvm_bswap_i64(l, h) {
      var retl = _llvm_bswap_i32(h)>>>0;
      var reth = _llvm_bswap_i32(l)>>>0;
      return ((Runtime.setTempRet0(reth),retl)|0);
    }



  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffer) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
/* flush anything remaining in the buffer during shutdown */ __ATEXIT__.push(function() { var fflush = Module["_fflush"]; if (fflush) fflush(0); var printChar = ___syscall146.printChar; if (!printChar) return; var buffers = ___syscall146.buffers; if (buffers[1].length) printChar(1, 10); if (buffers[2].length) printChar(2, 10); });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");


function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_vii": nullFunc_vii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiii": nullFunc_iiiii, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_vii": invoke_vii, "invoke_iii": invoke_iii, "invoke_iiiii": invoke_iiiii, "___syscall54": ___syscall54, "___lock": ___lock, "___syscall6": ___syscall6, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_bswap_i64": _llvm_bswap_i64, "___unlock": ___unlock, "___syscall146": ___syscall146, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
'almost asm';


  var Int8View = global.Int8Array;
  var HEAP8 = new Int8View(buffer);
  var Int16View = global.Int16Array;
  var HEAP16 = new Int16View(buffer);
  var Int32View = global.Int32Array;
  var HEAP32 = new Int32View(buffer);
  var Uint8View = global.Uint8Array;
  var HEAPU8 = new Uint8View(buffer);
  var Uint16View = global.Uint16Array;
  var HEAPU16 = new Uint16View(buffer);
  var Uint32View = global.Uint32Array;
  var HEAPU32 = new Uint32View(buffer);
  var Float32View = global.Float32Array;
  var HEAPF32 = new Float32View(buffer);
  var Float64View = global.Float64Array;
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_vii=env.invoke_vii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiii=env.invoke_iiiii;
  var ___syscall54=env.___syscall54;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_bswap_i64=env._llvm_bswap_i64;
  var ___unlock=env.___unlock;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _FSE_buildDTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $11 = sp + 80|0;
 $15 = sp + 72|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $26 = $5;
 $27 = ((($26)) + 4|0);
 $9 = $27;
 $28 = $9;
 $10 = $28;
 $29 = $7;
 $30 = (($29) + 1)|0;
 $12 = $30;
 $31 = $8;
 $32 = 1 << $31;
 $13 = $32;
 $33 = $13;
 $34 = (($33) - 1)|0;
 $14 = $34;
 $35 = $7;
 $36 = ($35>>>0)>(255);
 if ($36) {
  $4 = -18;
  $163 = $4;
  STACKTOP = sp;return ($163|0);
 }
 $37 = $8;
 $38 = ($37>>>0)>(12);
 if ($38) {
  $4 = -17;
  $163 = $4;
  STACKTOP = sp;return ($163|0);
 }
 $39 = $8;
 $40 = $39&65535;
 HEAP16[$15>>1] = $40;
 $41 = ((($15)) + 2|0);
 HEAP16[$41>>1] = 1;
 $42 = $8;
 $43 = (($42) - 1)|0;
 $44 = 1 << $43;
 $45 = $44&65535;
 $16 = $45;
 $17 = 0;
 while(1) {
  $46 = $17;
  $47 = $12;
  $48 = ($46>>>0)<($47>>>0);
  if (!($48)) {
   break;
  }
  $49 = $6;
  $50 = $17;
  $51 = (($49) + ($50<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = ($53|0)==(-1);
  if ($54) {
   $55 = $17;
   $56 = $55&255;
   $57 = $10;
   $58 = $14;
   $59 = (($58) + -1)|0;
   $14 = $59;
   $60 = (($57) + ($58<<2)|0);
   $61 = ((($60)) + 2|0);
   HEAP8[$61>>0] = $56;
   $62 = $17;
   $$sink = 1;$$sink2 = $62;
  } else {
   $63 = $6;
   $64 = $17;
   $65 = (($63) + ($64<<1)|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = $66 << 16 >> 16;
   $68 = $16;
   $69 = $68 << 16 >> 16;
   $70 = ($67|0)>=($69|0);
   if ($70) {
    $71 = ((($15)) + 2|0);
    HEAP16[$71>>1] = 0;
   }
   $72 = $6;
   $73 = $17;
   $74 = (($72) + ($73<<1)|0);
   $75 = HEAP16[$74>>1]|0;
   $76 = $17;
   $$sink = $75;$$sink2 = $76;
  }
  $77 = (($11) + ($$sink2<<1)|0);
  HEAP16[$77>>1] = $$sink;
  $78 = $17;
  $79 = (($78) + 1)|0;
  $17 = $79;
 }
 $80 = $5;
 ;HEAP16[$80>>1]=HEAP16[$15>>1]|0;HEAP16[$80+2>>1]=HEAP16[$15+2>>1]|0;
 $81 = $13;
 $82 = (($81) - 1)|0;
 $18 = $82;
 $83 = $13;
 $84 = $83 >>> 1;
 $85 = $13;
 $86 = $85 >>> 3;
 $87 = (($84) + ($86))|0;
 $88 = (($87) + 3)|0;
 $19 = $88;
 $21 = 0;
 $20 = 0;
 while(1) {
  $89 = $20;
  $90 = $12;
  $91 = ($89>>>0)<($90>>>0);
  if (!($91)) {
   break;
  }
  $22 = 0;
  while(1) {
   $92 = $22;
   $93 = $6;
   $94 = $20;
   $95 = (($93) + ($94<<1)|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96 << 16 >> 16;
   $98 = ($92|0)<($97|0);
   $99 = $20;
   if (!($98)) {
    break;
   }
   $100 = $99&255;
   $101 = $10;
   $102 = $21;
   $103 = (($101) + ($102<<2)|0);
   $104 = ((($103)) + 2|0);
   HEAP8[$104>>0] = $100;
   $105 = $21;
   $106 = $19;
   $107 = (($105) + ($106))|0;
   $108 = $18;
   $109 = $107 & $108;
   $21 = $109;
   while(1) {
    $110 = $21;
    $111 = $14;
    $112 = ($110>>>0)>($111>>>0);
    if (!($112)) {
     break;
    }
    $113 = $21;
    $114 = $19;
    $115 = (($113) + ($114))|0;
    $116 = $18;
    $117 = $115 & $116;
    $21 = $117;
   }
   $118 = $22;
   $119 = (($118) + 1)|0;
   $22 = $119;
  }
  $120 = (($99) + 1)|0;
  $20 = $120;
 }
 $121 = $21;
 $122 = ($121|0)!=(0);
 if ($122) {
  $4 = -1;
  $163 = $4;
  STACKTOP = sp;return ($163|0);
 }
 $23 = 0;
 while(1) {
  $123 = $23;
  $124 = $13;
  $125 = ($123>>>0)<($124>>>0);
  if (!($125)) {
   break;
  }
  $126 = $10;
  $127 = $23;
  $128 = (($126) + ($127<<2)|0);
  $129 = ((($128)) + 2|0);
  $130 = HEAP8[$129>>0]|0;
  $24 = $130;
  $131 = $24;
  $132 = $131&255;
  $133 = (($11) + ($132<<1)|0);
  $134 = HEAP16[$133>>1]|0;
  $135 = (($134) + 1)<<16>>16;
  HEAP16[$133>>1] = $135;
  $25 = $134;
  $136 = $8;
  $137 = $25;
  $138 = $137&65535;
  $139 = (_BIT_highbit32($138)|0);
  $140 = (($136) - ($139))|0;
  $141 = $140&255;
  $142 = $10;
  $143 = $23;
  $144 = (($142) + ($143<<2)|0);
  $145 = ((($144)) + 3|0);
  HEAP8[$145>>0] = $141;
  $146 = $25;
  $147 = $146&65535;
  $148 = $10;
  $149 = $23;
  $150 = (($148) + ($149<<2)|0);
  $151 = ((($150)) + 3|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&255;
  $154 = $147 << $153;
  $155 = $13;
  $156 = (($154) - ($155))|0;
  $157 = $156&65535;
  $158 = $10;
  $159 = $23;
  $160 = (($158) + ($159<<2)|0);
  HEAP16[$160>>1] = $157;
  $161 = $23;
  $162 = (($161) + 1)|0;
  $23 = $162;
 }
 $4 = 0;
 $163 = $4;
 STACKTOP = sp;return ($163|0);
}
function _BIT_highbit32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (Math_clz32(($2|0))|0);
 $4 = (31 - ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function _FSE_buildDTable_rle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $4 = $8;
 $9 = $4;
 $5 = $9;
 $10 = $2;
 $11 = ((($10)) + 4|0);
 $6 = $11;
 $12 = $6;
 $7 = $12;
 $13 = $5;
 HEAP16[$13>>1] = 0;
 $14 = $5;
 $15 = ((($14)) + 2|0);
 HEAP16[$15>>1] = 0;
 $16 = $7;
 HEAP16[$16>>1] = 0;
 $17 = $3;
 $18 = $7;
 $19 = ((($18)) + 2|0);
 HEAP8[$19>>0] = $17;
 $20 = $7;
 $21 = ((($20)) + 3|0);
 HEAP8[$21>>0] = 0;
 STACKTOP = sp;return 0;
}
function _FSE_decompress_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink1 = 0, $$sink10 = 0, $$sink11 = 0, $$sink12 = 0, $$sink13 = 0, $$sink14 = 0, $$sink15 = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $$sink5 = 0, $$sink6 = 0, $$sink7 = 0, $$sink8 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $16 = sp + 144|0;
 $17 = sp + 136|0;
 $18 = sp + 128|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $33 = sp + 40|0;
 $36 = $0;
 $37 = $1;
 $38 = $2;
 $39 = $3;
 $40 = $4;
 $44 = $40;
 $41 = $44;
 $45 = $41;
 $42 = $45;
 $46 = $42;
 $47 = ((($46)) + 2|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48&65535;
 $43 = $49;
 $50 = $43;
 $51 = ($50|0)!=(0);
 $52 = $36;
 $53 = $37;
 $54 = $38;
 $55 = $39;
 $56 = $40;
 if ($51) {
  $21 = $52;
  $22 = $53;
  $23 = $54;
  $24 = $55;
  $25 = $56;
  $26 = 1;
  $57 = $21;
  $27 = $57;
  $58 = $27;
  $28 = $58;
  $59 = $28;
  $60 = $22;
  $61 = (($59) + ($60)|0);
  $29 = $61;
  $62 = $29;
  $63 = ((($62)) + -3|0);
  $30 = $63;
  $64 = $23;
  $65 = $24;
  $66 = (_BIT_initDStream($31,$64,$65)|0);
  $34 = $66;
  $67 = $34;
  $68 = (_ERR_isError($67)|0);
  $69 = ($68|0)!=(0);
  do {
   if ($69) {
    $70 = $34;
    $20 = $70;
   } else {
    $71 = $25;
    _FSE_initDState($32,$31,$71);
    $72 = $25;
    _FSE_initDState($33,$31,$72);
    while(1) {
     $73 = (_BIT_reloadDStream($31)|0);
     $74 = ($73|0)==(0);
     $75 = $74&1;
     $76 = $28;
     $77 = $30;
     $78 = ($76>>>0)<($77>>>0);
     $79 = $78&1;
     $80 = $75 & $79;
     $81 = ($80|0)!=(0);
     if (!($81)) {
      break;
     }
     $82 = $26;
     $83 = ($82|0)!=(0);
     if ($83) {
      $84 = (_FSE_decodeSymbolFast($32,$31)|0);
      $$sink = $84;
     } else {
      $85 = (_FSE_decodeSymbol($32,$31)|0);
      $$sink = $85;
     }
     $86 = $$sink&255;
     $87 = $86&255;
     $88 = $28;
     HEAP8[$88>>0] = $87;
     $89 = $26;
     $90 = ($89|0)!=(0);
     if ($90) {
      $91 = (_FSE_decodeSymbolFast($33,$31)|0);
      $$sink1 = $91;
     } else {
      $92 = (_FSE_decodeSymbol($33,$31)|0);
      $$sink1 = $92;
     }
     $93 = $$sink1&255;
     $94 = $93&255;
     $95 = $28;
     $96 = ((($95)) + 1|0);
     HEAP8[$96>>0] = $94;
     $97 = (_BIT_reloadDStream($31)|0);
     $98 = ($97>>>0)>(0);
     if ($98) {
      label = 13;
      break;
     }
     $101 = $26;
     $102 = ($101|0)!=(0);
     if ($102) {
      $103 = (_FSE_decodeSymbolFast($32,$31)|0);
      $$sink2 = $103;
     } else {
      $104 = (_FSE_decodeSymbol($32,$31)|0);
      $$sink2 = $104;
     }
     $105 = $$sink2&255;
     $106 = $105&255;
     $107 = $28;
     $108 = ((($107)) + 2|0);
     HEAP8[$108>>0] = $106;
     $109 = $26;
     $110 = ($109|0)!=(0);
     if ($110) {
      $111 = (_FSE_decodeSymbolFast($33,$31)|0);
      $$sink3 = $111;
     } else {
      $112 = (_FSE_decodeSymbol($33,$31)|0);
      $$sink3 = $112;
     }
     $113 = $$sink3&255;
     $114 = $113&255;
     $115 = $28;
     $116 = ((($115)) + 3|0);
     HEAP8[$116>>0] = $114;
     $117 = $28;
     $118 = ((($117)) + 4|0);
     $28 = $118;
    }
    if ((label|0) == 13) {
     $99 = $28;
     $100 = ((($99)) + 2|0);
     $28 = $100;
    }
    while(1) {
     $119 = $28;
     $120 = $29;
     $121 = ((($120)) + -2|0);
     $122 = ($119>>>0)>($121>>>0);
     if ($122) {
      label = 22;
      break;
     }
     $123 = $26;
     $124 = ($123|0)!=(0);
     if ($124) {
      $125 = (_FSE_decodeSymbolFast($32,$31)|0);
      $$sink4 = $125;
     } else {
      $126 = (_FSE_decodeSymbol($32,$31)|0);
      $$sink4 = $126;
     }
     $127 = $$sink4&255;
     $128 = $127&255;
     $129 = $28;
     $130 = ((($129)) + 1|0);
     $28 = $130;
     HEAP8[$129>>0] = $128;
     $131 = (_BIT_reloadDStream($31)|0);
     $132 = ($131|0)==(3);
     if ($132) {
      label = 27;
      break;
     }
     $141 = $28;
     $142 = $29;
     $143 = ((($142)) + -2|0);
     $144 = ($141>>>0)>($143>>>0);
     if ($144) {
      label = 32;
      break;
     }
     $145 = $26;
     $146 = ($145|0)!=(0);
     if ($146) {
      $147 = (_FSE_decodeSymbolFast($33,$31)|0);
      $$sink6 = $147;
     } else {
      $148 = (_FSE_decodeSymbol($33,$31)|0);
      $$sink6 = $148;
     }
     $149 = $$sink6&255;
     $150 = $149&255;
     $151 = $28;
     $152 = ((($151)) + 1|0);
     $28 = $152;
     HEAP8[$151>>0] = $150;
     $153 = (_BIT_reloadDStream($31)|0);
     $154 = ($153|0)==(3);
     if ($154) {
      label = 37;
      break;
     }
    }
    if ((label|0) == 22) {
     $20 = -13;
     break;
    }
    else if ((label|0) == 27) {
     $133 = $26;
     $134 = ($133|0)!=(0);
     if ($134) {
      $135 = (_FSE_decodeSymbolFast($33,$31)|0);
      $$sink5 = $135;
     } else {
      $136 = (_FSE_decodeSymbol($33,$31)|0);
      $$sink5 = $136;
     }
     $137 = $$sink5&255;
     $138 = $137&255;
     $139 = $28;
     $140 = ((($139)) + 1|0);
     $28 = $140;
     HEAP8[$139>>0] = $138;
    }
    else if ((label|0) == 32) {
     $20 = -13;
     break;
    }
    else if ((label|0) == 37) {
     $155 = $26;
     $156 = ($155|0)!=(0);
     if ($156) {
      $157 = (_FSE_decodeSymbolFast($32,$31)|0);
      $$sink7 = $157;
     } else {
      $158 = (_FSE_decodeSymbol($32,$31)|0);
      $$sink7 = $158;
     }
     $159 = $$sink7&255;
     $160 = $159&255;
     $161 = $28;
     $162 = ((($161)) + 1|0);
     $28 = $162;
     HEAP8[$161>>0] = $160;
    }
    $163 = $28;
    $164 = $27;
    $165 = $163;
    $166 = $164;
    $167 = (($165) - ($166))|0;
    $20 = $167;
   }
  } while(0);
  $168 = $20;
  $35 = $168;
  $281 = $35;
  STACKTOP = sp;return ($281|0);
 } else {
  $6 = $52;
  $7 = $53;
  $8 = $54;
  $9 = $55;
  $10 = $56;
  $11 = 0;
  $169 = $6;
  $12 = $169;
  $170 = $12;
  $13 = $170;
  $171 = $13;
  $172 = $7;
  $173 = (($171) + ($172)|0);
  $14 = $173;
  $174 = $14;
  $175 = ((($174)) + -3|0);
  $15 = $175;
  $176 = $8;
  $177 = $9;
  $178 = (_BIT_initDStream($16,$176,$177)|0);
  $19 = $178;
  $179 = $19;
  $180 = (_ERR_isError($179)|0);
  $181 = ($180|0)!=(0);
  do {
   if ($181) {
    $182 = $19;
    $5 = $182;
   } else {
    $183 = $10;
    _FSE_initDState($17,$16,$183);
    $184 = $10;
    _FSE_initDState($18,$16,$184);
    while(1) {
     $185 = (_BIT_reloadDStream($16)|0);
     $186 = ($185|0)==(0);
     $187 = $186&1;
     $188 = $13;
     $189 = $15;
     $190 = ($188>>>0)<($189>>>0);
     $191 = $190&1;
     $192 = $187 & $191;
     $193 = ($192|0)!=(0);
     if (!($193)) {
      break;
     }
     $194 = $11;
     $195 = ($194|0)!=(0);
     if ($195) {
      $196 = (_FSE_decodeSymbolFast($17,$16)|0);
      $$sink8 = $196;
     } else {
      $197 = (_FSE_decodeSymbol($17,$16)|0);
      $$sink8 = $197;
     }
     $198 = $$sink8&255;
     $199 = $198&255;
     $200 = $13;
     HEAP8[$200>>0] = $199;
     $201 = $11;
     $202 = ($201|0)!=(0);
     if ($202) {
      $203 = (_FSE_decodeSymbolFast($18,$16)|0);
      $$sink9 = $203;
     } else {
      $204 = (_FSE_decodeSymbol($18,$16)|0);
      $$sink9 = $204;
     }
     $205 = $$sink9&255;
     $206 = $205&255;
     $207 = $13;
     $208 = ((($207)) + 1|0);
     HEAP8[$208>>0] = $206;
     $209 = (_BIT_reloadDStream($16)|0);
     $210 = ($209>>>0)>(0);
     if ($210) {
      label = 54;
      break;
     }
     $213 = $11;
     $214 = ($213|0)!=(0);
     if ($214) {
      $215 = (_FSE_decodeSymbolFast($17,$16)|0);
      $$sink10 = $215;
     } else {
      $216 = (_FSE_decodeSymbol($17,$16)|0);
      $$sink10 = $216;
     }
     $217 = $$sink10&255;
     $218 = $217&255;
     $219 = $13;
     $220 = ((($219)) + 2|0);
     HEAP8[$220>>0] = $218;
     $221 = $11;
     $222 = ($221|0)!=(0);
     if ($222) {
      $223 = (_FSE_decodeSymbolFast($18,$16)|0);
      $$sink11 = $223;
     } else {
      $224 = (_FSE_decodeSymbol($18,$16)|0);
      $$sink11 = $224;
     }
     $225 = $$sink11&255;
     $226 = $225&255;
     $227 = $13;
     $228 = ((($227)) + 3|0);
     HEAP8[$228>>0] = $226;
     $229 = $13;
     $230 = ((($229)) + 4|0);
     $13 = $230;
    }
    if ((label|0) == 54) {
     $211 = $13;
     $212 = ((($211)) + 2|0);
     $13 = $212;
    }
    while(1) {
     $231 = $13;
     $232 = $14;
     $233 = ((($232)) + -2|0);
     $234 = ($231>>>0)>($233>>>0);
     if ($234) {
      label = 63;
      break;
     }
     $235 = $11;
     $236 = ($235|0)!=(0);
     if ($236) {
      $237 = (_FSE_decodeSymbolFast($17,$16)|0);
      $$sink12 = $237;
     } else {
      $238 = (_FSE_decodeSymbol($17,$16)|0);
      $$sink12 = $238;
     }
     $239 = $$sink12&255;
     $240 = $239&255;
     $241 = $13;
     $242 = ((($241)) + 1|0);
     $13 = $242;
     HEAP8[$241>>0] = $240;
     $243 = (_BIT_reloadDStream($16)|0);
     $244 = ($243|0)==(3);
     if ($244) {
      label = 68;
      break;
     }
     $253 = $13;
     $254 = $14;
     $255 = ((($254)) + -2|0);
     $256 = ($253>>>0)>($255>>>0);
     if ($256) {
      label = 73;
      break;
     }
     $257 = $11;
     $258 = ($257|0)!=(0);
     if ($258) {
      $259 = (_FSE_decodeSymbolFast($18,$16)|0);
      $$sink14 = $259;
     } else {
      $260 = (_FSE_decodeSymbol($18,$16)|0);
      $$sink14 = $260;
     }
     $261 = $$sink14&255;
     $262 = $261&255;
     $263 = $13;
     $264 = ((($263)) + 1|0);
     $13 = $264;
     HEAP8[$263>>0] = $262;
     $265 = (_BIT_reloadDStream($16)|0);
     $266 = ($265|0)==(3);
     if ($266) {
      label = 78;
      break;
     }
    }
    if ((label|0) == 63) {
     $5 = -13;
     break;
    }
    else if ((label|0) == 68) {
     $245 = $11;
     $246 = ($245|0)!=(0);
     if ($246) {
      $247 = (_FSE_decodeSymbolFast($18,$16)|0);
      $$sink13 = $247;
     } else {
      $248 = (_FSE_decodeSymbol($18,$16)|0);
      $$sink13 = $248;
     }
     $249 = $$sink13&255;
     $250 = $249&255;
     $251 = $13;
     $252 = ((($251)) + 1|0);
     $13 = $252;
     HEAP8[$251>>0] = $250;
    }
    else if ((label|0) == 73) {
     $5 = -13;
     break;
    }
    else if ((label|0) == 78) {
     $267 = $11;
     $268 = ($267|0)!=(0);
     if ($268) {
      $269 = (_FSE_decodeSymbolFast($17,$16)|0);
      $$sink15 = $269;
     } else {
      $270 = (_FSE_decodeSymbol($17,$16)|0);
      $$sink15 = $270;
     }
     $271 = $$sink15&255;
     $272 = $271&255;
     $273 = $13;
     $274 = ((($273)) + 1|0);
     $13 = $274;
     HEAP8[$273>>0] = $272;
    }
    $275 = $13;
    $276 = $12;
    $277 = $275;
    $278 = $276;
    $279 = (($277) - ($278))|0;
    $5 = $279;
   }
  } while(0);
  $280 = $5;
  $35 = $280;
  $281 = $35;
  STACKTOP = sp;return ($281|0);
 }
 return (0)|0;
}
function _BIT_initDStream($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9>>>0)<(1);
 if ($10) {
  $11 = $4;
  ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;HEAP32[$11+16>>2]=0|0;
  $3 = -14;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $12 = $5;
 $13 = $4;
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = $12;
 $15 = $4;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = $4;
 $20 = ((($19)) + 16|0);
 HEAP32[$20>>2] = $18;
 $21 = $6;
 $22 = ($21>>>0)>=(4);
 do {
  if ($22) {
   $23 = $5;
   $24 = $6;
   $25 = (($23) + ($24)|0);
   $26 = ((($25)) + -4|0);
   $27 = $4;
   $28 = ((($27)) + 8|0);
   HEAP32[$28>>2] = $26;
   $29 = $4;
   $30 = ((($29)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_MEM_readLEST($31)|0);
   $33 = $4;
   HEAP32[$33>>2] = $32;
   $34 = $5;
   $35 = $6;
   $36 = (($35) - 1)|0;
   $37 = (($34) + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $7 = $38;
   $39 = $7;
   $40 = $39&255;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $7;
    $43 = $42&255;
    $44 = (_BIT_highbit32($43)|0);
    $45 = (8 - ($44))|0;
    $48 = $45;
   } else {
    $48 = 0;
   }
   $46 = $4;
   $47 = ((($46)) + 4|0);
   HEAP32[$47>>2] = $48;
   $49 = $7;
   $50 = $49&255;
   $51 = ($50|0)==(0);
   if ($51) {
    $3 = -1;
    $138 = $3;
    STACKTOP = sp;return ($138|0);
   }
  } else {
   $52 = $4;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $4;
   $56 = ((($55)) + 8|0);
   HEAP32[$56>>2] = $54;
   $57 = $4;
   $58 = ((($57)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $4;
   HEAP32[$62>>2] = $61;
   $63 = $6;
   switch ($63|0) {
   case 7:  {
    $64 = $5;
    $65 = ((($64)) + 6|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $67 << 16;
    $69 = $4;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($68))|0;
    HEAP32[$69>>2] = $71;
    label = 10;
    break;
   }
   case 6:  {
    label = 10;
    break;
   }
   case 5:  {
    label = 11;
    break;
   }
   case 4:  {
    label = 12;
    break;
   }
   case 3:  {
    label = 13;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    $72 = $5;
    $73 = ((($72)) + 5|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $75 << 8;
    $77 = $4;
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + ($76))|0;
    HEAP32[$77>>2] = $79;
    label = 11;
   }
   if ((label|0) == 11) {
    $80 = $5;
    $81 = ((($80)) + 4|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = $83 << 0;
    $85 = $4;
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($84))|0;
    HEAP32[$85>>2] = $87;
    label = 12;
   }
   if ((label|0) == 12) {
    $88 = $5;
    $89 = ((($88)) + 3|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90&255;
    $92 = $91 << 24;
    $93 = $4;
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + ($92))|0;
    HEAP32[$93>>2] = $95;
    label = 13;
   }
   if ((label|0) == 13) {
    $96 = $5;
    $97 = ((($96)) + 2|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = $99 << 16;
    $101 = $4;
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + ($100))|0;
    HEAP32[$101>>2] = $103;
    label = 14;
   }
   if ((label|0) == 14) {
    $104 = $5;
    $105 = ((($104)) + 1|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106&255;
    $108 = $107 << 8;
    $109 = $4;
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($108))|0;
    HEAP32[$109>>2] = $111;
   }
   $112 = $5;
   $113 = $6;
   $114 = (($113) - 1)|0;
   $115 = (($112) + ($114)|0);
   $116 = HEAP8[$115>>0]|0;
   $8 = $116;
   $117 = $8;
   $118 = $117&255;
   $119 = ($118|0)!=(0);
   if ($119) {
    $120 = $8;
    $121 = $120&255;
    $122 = (_BIT_highbit32($121)|0);
    $123 = (8 - ($122))|0;
    $126 = $123;
   } else {
    $126 = 0;
   }
   $124 = $4;
   $125 = ((($124)) + 4|0);
   HEAP32[$125>>2] = $126;
   $127 = $8;
   $128 = $127&255;
   $129 = ($128|0)==(0);
   if (!($129)) {
    $130 = $6;
    $131 = (4 - ($130))|0;
    $132 = $131<<3;
    $133 = $4;
    $134 = ((($133)) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132))|0;
    HEAP32[$134>>2] = $136;
    break;
   }
   $3 = -1;
   $138 = $3;
   STACKTOP = sp;return ($138|0);
  }
 } while(0);
 $137 = $6;
 $3 = $137;
 $138 = $3;
 STACKTOP = sp;return ($138|0);
}
function _ERR_isError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2>>>0)>(4294967271);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _FSE_initDState($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $6 = $8;
 $9 = $6;
 $7 = $9;
 $10 = $4;
 $11 = $7;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (_BIT_readBits($10,$13)|0);
 $15 = $3;
 HEAP32[$15>>2] = $14;
 $16 = $4;
 (_BIT_reloadDStream($16)|0);
 $17 = $5;
 $18 = ((($17)) + 4|0);
 $19 = $3;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _BIT_reloadDStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(32);
 if ($8) {
  $1 = 3;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>=($14>>>0);
 $16 = $2;
 if ($15) {
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 >>> 3;
  $20 = $2;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (0 - ($19))|0;
  $24 = (($22) + ($23)|0);
  HEAP32[$21>>2] = $24;
  $25 = $2;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 7;
  HEAP32[$26>>2] = $28;
  $29 = $2;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_MEM_readLEST($31)|0);
  $33 = $2;
  HEAP32[$33>>2] = $32;
  $1 = 0;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $34 = ((($16)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $2;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($35|0)==($38|0);
 $40 = $2;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 if (!($39)) {
  $44 = $42 >>> 3;
  $3 = $44;
  $4 = 0;
  $45 = $2;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $3;
  $49 = (0 - ($48))|0;
  $50 = (($47) + ($49)|0);
  $51 = $2;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($50>>>0)<($53>>>0);
  if ($54) {
   $55 = $2;
   $56 = ((($55)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $2;
   $59 = ((($58)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $57;
   $62 = $60;
   $63 = (($61) - ($62))|0;
   $3 = $63;
   $4 = 1;
  }
  $64 = $3;
  $65 = $2;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (0 - ($64))|0;
  $69 = (($67) + ($68)|0);
  HEAP32[$66>>2] = $69;
  $70 = $3;
  $71 = $70<<3;
  $72 = $2;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) - ($71))|0;
  HEAP32[$73>>2] = $75;
  $76 = $2;
  $77 = ((($76)) + 8|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (_MEM_readLEST($78)|0);
  $80 = $2;
  HEAP32[$80>>2] = $79;
  $81 = $4;
  $1 = $81;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $43 = ($42>>>0)<(32);
 if ($43) {
  $1 = 1;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 } else {
  $1 = 2;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 return (0)|0;
}
function _FSE_decodeSymbolFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$13>>1]|0;HEAP16[$4+2>>1]=HEAP16[$13+2>>1]|0;
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $5 = $16;
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $3;
 $20 = $5;
 $21 = (_BIT_readBitsFast($19,$20)|0);
 $7 = $21;
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = $7;
 $25 = (($23) + ($24))|0;
 $26 = $2;
 HEAP32[$26>>2] = $25;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _FSE_decodeSymbol($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$13>>1]|0;HEAP16[$4+2>>1]=HEAP16[$13+2>>1]|0;
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $5 = $16;
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $3;
 $20 = $5;
 $21 = (_BIT_readBits($19,$20)|0);
 $7 = $21;
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = $7;
 $25 = (($23) + ($24))|0;
 $26 = $2;
 HEAP32[$26>>2] = $25;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _BIT_readBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BIT_lookBits($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BIT_skipBits($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _BIT_lookBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $11 >>> 1;
 $13 = $3;
 $14 = (31 - ($13))|0;
 $15 = $14 & 31;
 $16 = $12 >>> $15;
 STACKTOP = sp;return ($16|0);
}
function _BIT_skipBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _BIT_readBitsFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BIT_lookBitsFast($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BIT_skipBits($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _BIT_lookBitsFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $3;
 $13 = (32 - ($12))|0;
 $14 = $13 & 31;
 $15 = $11 >>> $14;
 STACKTOP = sp;return ($15|0);
}
function _MEM_readLEST($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_32bits()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 if ($4) {
  $6 = (_MEM_readLE32($5)|0);
  $1 = $6;
 } else {
  $7 = (_MEM_readLE64($5)|0);
  $8 = tempRet0;
  $1 = $7;
 }
 $9 = $1;
 STACKTOP = sp;return ($9|0);
}
function _MEM_32bits() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _MEM_readLE32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_isLittleEndian()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read32($5)|0);
 if ($4) {
  $1 = $6;
 } else {
  $7 = (_MEM_swap32($6)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _MEM_readLE64($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = $0;
 $3 = (_MEM_isLittleEndian()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read64($5)|0);
 $7 = tempRet0;
 if ($4) {
  $8 = $1;
  $9 = $8;
  HEAP32[$9>>2] = $6;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $7;
 } else {
  $12 = (_MEM_swap64($6,$7)|0);
  $13 = tempRet0;
  $14 = $1;
  $15 = $14;
  HEAP32[$15>>2] = $12;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
 }
 $18 = $1;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 tempRet0 = ($23);
 STACKTOP = sp;return ($20|0);
}
function _MEM_isLittleEndian() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[8]|0;
 $1 = $0&255;
 return ($1|0);
}
function _MEM_read64($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
 tempRet0 = ($8);
 STACKTOP = sp;return ($5|0);
}
function _MEM_swap64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 (_bitshift64Shl(($9|0),($12|0),56)|0);
 $13 = tempRet0;
 $14 = $13 & -16777216;
 $15 = $2;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 (_bitshift64Shl(($17|0),($20|0),40)|0);
 $21 = tempRet0;
 $22 = $21 & 16711680;
 $23 = $14 | $22;
 $24 = $2;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 (_bitshift64Shl(($26|0),($29|0),24)|0);
 $30 = tempRet0;
 $31 = $30 & 65280;
 $32 = $23 | $31;
 $33 = $2;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 (_bitshift64Shl(($35|0),($38|0),8)|0);
 $39 = tempRet0;
 $40 = $39 & 255;
 $41 = $32 | $40;
 $42 = $2;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (_bitshift64Lshr(($44|0),($47|0),8)|0);
 $49 = tempRet0;
 $50 = $48 & -16777216;
 $51 = $2;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_bitshift64Lshr(($53|0),($56|0),24)|0);
 $58 = tempRet0;
 $59 = $57 & 16711680;
 $60 = $50 | $59;
 $61 = $2;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (_bitshift64Lshr(($63|0),($66|0),40)|0);
 $68 = tempRet0;
 $69 = $67 & 65280;
 $70 = $60 | $69;
 $71 = $2;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (_bitshift64Lshr(($73|0),($76|0),56)|0);
 $78 = tempRet0;
 $79 = $77 & 255;
 $80 = $70 | $79;
 tempRet0 = ($41);
 STACKTOP = sp;return ($80|0);
}
function _MEM_read32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 STACKTOP = sp;return ($3|0);
}
function _MEM_swap32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24;
 $4 = $3 & -16777216;
 $5 = $1;
 $6 = $5 << 8;
 $7 = $6 & 16711680;
 $8 = $4 | $7;
 $9 = $1;
 $10 = $9 >>> 8;
 $11 = $10 & 65280;
 $12 = $8 | $11;
 $13 = $1;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $12 | $15;
 STACKTOP = sp;return ($16|0);
}
function _FSE_decompress_wksp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(576|0);
 $15 = sp + 56|0;
 $16 = sp + 12|0;
 $17 = sp + 8|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $20 = $9;
 $13 = $20;
 $21 = $13;
 $14 = $21;
 HEAP32[$17>>2] = 255;
 $22 = $13;
 $23 = $10;
 $24 = (_FSE_readNCount($15,$17,$16,$22,$23)|0);
 $18 = $24;
 $25 = $18;
 $26 = (_ERR_isError($25)|0);
 $27 = ($26|0)!=(0);
 if ($27) {
  $28 = $18;
  $6 = $28;
  $52 = $6;
  STACKTOP = sp;return ($52|0);
 }
 $29 = HEAP32[$16>>2]|0;
 $30 = $12;
 $31 = ($29>>>0)>($30>>>0);
 if ($31) {
  $6 = -17;
  $52 = $6;
  STACKTOP = sp;return ($52|0);
 }
 $32 = $18;
 $33 = $14;
 $34 = (($33) + ($32)|0);
 $14 = $34;
 $35 = $18;
 $36 = $10;
 $37 = (($36) - ($35))|0;
 $10 = $37;
 $38 = $11;
 $39 = HEAP32[$17>>2]|0;
 $40 = HEAP32[$16>>2]|0;
 $41 = (_FSE_buildDTable($38,$15,$39,$40)|0);
 $19 = $41;
 $42 = $19;
 $43 = (_ERR_isError($42)|0);
 $44 = ($43|0)!=(0);
 if ($44) {
  $45 = $19;
  $6 = $45;
  $52 = $6;
  STACKTOP = sp;return ($52|0);
 } else {
  $46 = $7;
  $47 = $8;
  $48 = $14;
  $49 = $10;
  $50 = $11;
  $51 = (_FSE_decompress_usingDTable($46,$47,$48,$49,$50)|0);
  $6 = $51;
  $52 = $6;
  STACKTOP = sp;return ($52|0);
 }
 return (0)|0;
}
function _FSE_isError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_1($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ERR_isError_1($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2>>>0)>(4294967271);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _HUF_isError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_1($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _FSE_readNCount($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $24 = $9;
 $11 = $24;
 $25 = $11;
 $26 = $10;
 $27 = (($25) + ($26)|0);
 $12 = $27;
 $28 = $11;
 $13 = $28;
 $19 = 0;
 $20 = 0;
 $29 = $10;
 $30 = ($29>>>0)<(4);
 if ($30) {
  $5 = -14;
  $237 = $5;
  STACKTOP = sp;return ($237|0);
 }
 $31 = $13;
 $32 = (_MEM_readLE32_4($31)|0);
 $17 = $32;
 $33 = $17;
 $34 = $33 & 15;
 $35 = (($34) + 5)|0;
 $14 = $35;
 $36 = $14;
 $37 = ($36|0)>(15);
 if ($37) {
  $5 = -17;
  $237 = $5;
  STACKTOP = sp;return ($237|0);
 }
 $38 = $17;
 $39 = $38 >>> 4;
 $17 = $39;
 $18 = 4;
 $40 = $14;
 $41 = $8;
 HEAP32[$41>>2] = $40;
 $42 = $14;
 $43 = 1 << $42;
 $44 = (($43) + 1)|0;
 $15 = $44;
 $45 = $14;
 $46 = 1 << $45;
 $16 = $46;
 $47 = $14;
 $48 = (($47) + 1)|0;
 $14 = $48;
 L9: while(1) {
  $49 = $15;
  $50 = ($49|0)>(1);
  $51 = $50&1;
  $52 = $19;
  $53 = $7;
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52>>>0)<=($54>>>0);
  $56 = $55&1;
  $57 = $51 & $56;
  $58 = ($57|0)!=(0);
  if (!($58)) {
   break;
  }
  $59 = $20;
  $60 = ($59|0)!=(0);
  do {
   if ($60) {
    $61 = $19;
    $21 = $61;
    while(1) {
     $62 = $17;
     $63 = $62 & 65535;
     $64 = ($63|0)==(65535);
     if (!($64)) {
      break;
     }
     $65 = $21;
     $66 = (($65) + 24)|0;
     $21 = $66;
     $67 = $13;
     $68 = $12;
     $69 = ((($68)) + -5|0);
     $70 = ($67>>>0)<($69>>>0);
     if ($70) {
      $71 = $13;
      $72 = ((($71)) + 2|0);
      $13 = $72;
      $73 = $13;
      $74 = (_MEM_readLE32_4($73)|0);
      $75 = $18;
      $76 = $74 >>> $75;
      $17 = $76;
      continue;
     } else {
      $77 = $17;
      $78 = $77 >>> 16;
      $17 = $78;
      $79 = $18;
      $80 = (($79) + 16)|0;
      $18 = $80;
      continue;
     }
    }
    while(1) {
     $81 = $17;
     $82 = $81 & 3;
     $83 = ($82|0)==(3);
     if (!($83)) {
      break;
     }
     $84 = $21;
     $85 = (($84) + 3)|0;
     $21 = $85;
     $86 = $17;
     $87 = $86 >>> 2;
     $17 = $87;
     $88 = $18;
     $89 = (($88) + 2)|0;
     $18 = $89;
    }
    $90 = $17;
    $91 = $90 & 3;
    $92 = $21;
    $93 = (($92) + ($91))|0;
    $21 = $93;
    $94 = $18;
    $95 = (($94) + 2)|0;
    $18 = $95;
    $96 = $21;
    $97 = $7;
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96>>>0)>($98>>>0);
    if ($99) {
     label = 16;
     break L9;
    }
    while(1) {
     $100 = $19;
     $101 = $21;
     $102 = ($100>>>0)<($101>>>0);
     if (!($102)) {
      break;
     }
     $103 = $6;
     $104 = $19;
     $105 = (($104) + 1)|0;
     $19 = $105;
     $106 = (($103) + ($104<<1)|0);
     HEAP16[$106>>1] = 0;
    }
    $107 = $13;
    $108 = $12;
    $109 = ((($108)) + -7|0);
    $110 = ($107>>>0)<=($109>>>0);
    if (!($110)) {
     $111 = $13;
     $112 = $18;
     $113 = $112 >> 3;
     $114 = (($111) + ($113)|0);
     $115 = $12;
     $116 = ((($115)) + -4|0);
     $117 = ($114>>>0)<=($116>>>0);
     if (!($117)) {
      $128 = $17;
      $129 = $128 >>> 2;
      $17 = $129;
      break;
     }
    }
    $118 = $18;
    $119 = $118 >> 3;
    $120 = $13;
    $121 = (($120) + ($119)|0);
    $13 = $121;
    $122 = $18;
    $123 = $122 & 7;
    $18 = $123;
    $124 = $13;
    $125 = (_MEM_readLE32_4($124)|0);
    $126 = $18;
    $127 = $125 >>> $126;
    $17 = $127;
   }
  } while(0);
  $130 = $16;
  $131 = $130<<1;
  $132 = (($131) - 1)|0;
  $133 = $15;
  $134 = (($132) - ($133))|0;
  $22 = $134;
  $135 = $17;
  $136 = $16;
  $137 = (($136) - 1)|0;
  $138 = $135 & $137;
  $139 = $22;
  $140 = ($138>>>0)<($139>>>0);
  $141 = $17;
  $142 = $16;
  if ($140) {
   $143 = (($142) - 1)|0;
   $144 = $141 & $143;
   $23 = $144;
   $145 = $14;
   $146 = (($145) - 1)|0;
   $147 = $18;
   $148 = (($147) + ($146))|0;
   $18 = $148;
  } else {
   $149 = $142<<1;
   $150 = (($149) - 1)|0;
   $151 = $141 & $150;
   $23 = $151;
   $152 = $23;
   $153 = $16;
   $154 = ($152|0)>=($153|0);
   if ($154) {
    $155 = $22;
    $156 = $23;
    $157 = (($156) - ($155))|0;
    $23 = $157;
   }
   $158 = $14;
   $159 = $18;
   $160 = (($159) + ($158))|0;
   $18 = $160;
  }
  $161 = $23;
  $162 = (($161) + -1)|0;
  $23 = $162;
  $163 = $23;
  $164 = ($163|0)<(0);
  $165 = $23;
  $166 = (0 - ($165))|0;
  $167 = $164 ? $166 : $165;
  $168 = $15;
  $169 = (($168) - ($167))|0;
  $15 = $169;
  $170 = $23;
  $171 = $170&65535;
  $172 = $6;
  $173 = $19;
  $174 = (($173) + 1)|0;
  $19 = $174;
  $175 = (($172) + ($173<<1)|0);
  HEAP16[$175>>1] = $171;
  $176 = $23;
  $177 = ($176|0)!=(0);
  $178 = $177 ^ 1;
  $179 = $178&1;
  $20 = $179;
  while(1) {
   $180 = $15;
   $181 = $16;
   $182 = ($180|0)<($181|0);
   if (!($182)) {
    break;
   }
   $183 = $14;
   $184 = (($183) + -1)|0;
   $14 = $184;
   $185 = $16;
   $186 = $185 >> 1;
   $16 = $186;
  }
  $187 = $13;
  $188 = $12;
  $189 = ((($188)) + -7|0);
  $190 = ($187>>>0)<=($189>>>0);
  if ($190) {
   label = 33;
  } else {
   $191 = $13;
   $192 = $18;
   $193 = $192 >> 3;
   $194 = (($191) + ($193)|0);
   $195 = $12;
   $196 = ((($195)) + -4|0);
   $197 = ($194>>>0)<=($196>>>0);
   if ($197) {
    label = 33;
   } else {
    $204 = $12;
    $205 = ((($204)) + -4|0);
    $206 = $13;
    $207 = $205;
    $208 = $206;
    $209 = (($207) - ($208))|0;
    $210 = $209<<3;
    $211 = $18;
    $212 = (($211) - ($210))|0;
    $18 = $212;
    $213 = $12;
    $214 = ((($213)) + -4|0);
    $13 = $214;
   }
  }
  if ((label|0) == 33) {
   label = 0;
   $198 = $18;
   $199 = $198 >> 3;
   $200 = $13;
   $201 = (($200) + ($199)|0);
   $13 = $201;
   $202 = $18;
   $203 = $202 & 7;
   $18 = $203;
  }
  $215 = $13;
  $216 = (_MEM_readLE32_4($215)|0);
  $217 = $18;
  $218 = $217 & 31;
  $219 = $216 >>> $218;
  $17 = $219;
 }
 if ((label|0) == 16) {
  $5 = -19;
  $237 = $5;
  STACKTOP = sp;return ($237|0);
 }
 $220 = $15;
 $221 = ($220|0)!=(1);
 if ($221) {
  $5 = -15;
  $237 = $5;
  STACKTOP = sp;return ($237|0);
 }
 $222 = $18;
 $223 = ($222|0)>(32);
 if ($223) {
  $5 = -15;
  $237 = $5;
  STACKTOP = sp;return ($237|0);
 } else {
  $224 = $19;
  $225 = (($224) - 1)|0;
  $226 = $7;
  HEAP32[$226>>2] = $225;
  $227 = $18;
  $228 = (($227) + 7)|0;
  $229 = $228 >> 3;
  $230 = $13;
  $231 = (($230) + ($229)|0);
  $13 = $231;
  $232 = $13;
  $233 = $11;
  $234 = $232;
  $235 = $233;
  $236 = (($234) - ($235))|0;
  $5 = $236;
  $237 = $5;
  STACKTOP = sp;return ($237|0);
 }
 return (0)|0;
}
function _MEM_readLE32_4($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_isLittleEndian_5()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read32_6($5)|0);
 if ($4) {
  $1 = $6;
 } else {
  $7 = (_MEM_swap32_7($6)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _MEM_isLittleEndian_5() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12]|0;
 $1 = $0&255;
 return ($1|0);
}
function _MEM_read32_6($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 STACKTOP = sp;return ($3|0);
}
function _MEM_swap32_7($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24;
 $4 = $3 & -16777216;
 $5 = $1;
 $6 = $5 << 8;
 $7 = $6 & 16711680;
 $8 = $4 | $7;
 $9 = $1;
 $10 = $9 >>> 8;
 $11 = $10 & 65280;
 $12 = $8 | $11;
 $13 = $1;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $12 | $15;
 STACKTOP = sp;return ($16|0);
}
function _HUF_readStats($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $20 = sp + 24|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $27 = $13;
 $16 = $27;
 $28 = $14;
 $29 = ($28|0)!=(0);
 if (!($29)) {
  $7 = -14;
  $168 = $7;
  STACKTOP = sp;return ($168|0);
 }
 $30 = $16;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $17 = $32;
 $33 = $17;
 $34 = ($33>>>0)>=(128);
 $35 = $17;
 L5: do {
  if ($34) {
   $36 = (($35) - 127)|0;
   $18 = $36;
   $37 = $18;
   $38 = (($37) + 1)|0;
   $39 = (($38>>>0) / 2)&-1;
   $17 = $39;
   $40 = $17;
   $41 = (($40) + 1)|0;
   $42 = $14;
   $43 = ($41>>>0)>($42>>>0);
   if ($43) {
    $7 = -14;
    $168 = $7;
    STACKTOP = sp;return ($168|0);
   }
   $44 = $18;
   $45 = $9;
   $46 = ($44>>>0)>=($45>>>0);
   if ($46) {
    $7 = -15;
    $168 = $7;
    STACKTOP = sp;return ($168|0);
   }
   $47 = $16;
   $48 = ((($47)) + 1|0);
   $16 = $48;
   $19 = 0;
   while(1) {
    $49 = $19;
    $50 = $18;
    $51 = ($49>>>0)<($50>>>0);
    if (!($51)) {
     break L5;
    }
    $52 = $16;
    $53 = $19;
    $54 = (($53>>>0) / 2)&-1;
    $55 = (($52) + ($54)|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = $57 >> 4;
    $59 = $58&255;
    $60 = $8;
    $61 = $19;
    $62 = (($60) + ($61)|0);
    HEAP8[$62>>0] = $59;
    $63 = $16;
    $64 = $19;
    $65 = (($64>>>0) / 2)&-1;
    $66 = (($63) + ($65)|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 & 15;
    $70 = $69&255;
    $71 = $8;
    $72 = $19;
    $73 = (($72) + 1)|0;
    $74 = (($71) + ($73)|0);
    HEAP8[$74>>0] = $70;
    $75 = $19;
    $76 = (($75) + 2)|0;
    $19 = $76;
   }
  } else {
   $77 = (($35) + 1)|0;
   $78 = $14;
   $79 = ($77>>>0)>($78>>>0);
   if ($79) {
    $7 = -14;
    $168 = $7;
    STACKTOP = sp;return ($168|0);
   }
   $80 = $8;
   $81 = $9;
   $82 = (($81) - 1)|0;
   $83 = $16;
   $84 = ((($83)) + 1|0);
   $85 = $17;
   $86 = (_FSE_decompress_wksp($80,$82,$84,$85,$20,6)|0);
   $18 = $86;
   $87 = $18;
   $88 = (_FSE_isError($87)|0);
   $89 = ($88|0)!=(0);
   if ($89) {
    $90 = $18;
    $7 = $90;
    $168 = $7;
    STACKTOP = sp;return ($168|0);
   }
  }
 } while(0);
 $91 = $10;
 dest=$91; stop=dest+52|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = 0;
 $21 = 0;
 while(1) {
  $92 = $21;
  $93 = $18;
  $94 = ($92>>>0)<($93>>>0);
  if (!($94)) {
   break;
  }
  $95 = $8;
  $96 = $21;
  $97 = (($95) + ($96)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $100 = ($99|0)>=(12);
  if ($100) {
   label = 18;
   break;
  }
  $101 = $10;
  $102 = $8;
  $103 = $21;
  $104 = (($102) + ($103)|0);
  $105 = HEAP8[$104>>0]|0;
  $106 = $105&255;
  $107 = (($101) + ($106<<2)|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = (($108) + 1)|0;
  HEAP32[$107>>2] = $109;
  $110 = $8;
  $111 = $21;
  $112 = (($110) + ($111)|0);
  $113 = HEAP8[$112>>0]|0;
  $114 = $113&255;
  $115 = 1 << $114;
  $116 = $115 >> 1;
  $117 = $15;
  $118 = (($117) + ($116))|0;
  $15 = $118;
  $119 = $21;
  $120 = (($119) + 1)|0;
  $21 = $120;
 }
 if ((label|0) == 18) {
  $7 = -15;
  $168 = $7;
  STACKTOP = sp;return ($168|0);
 }
 $121 = $15;
 $122 = ($121|0)==(0);
 if ($122) {
  $7 = -15;
  $168 = $7;
  STACKTOP = sp;return ($168|0);
 }
 $123 = $15;
 $124 = (_BIT_highbit32_9($123)|0);
 $125 = (($124) + 1)|0;
 $22 = $125;
 $126 = $22;
 $127 = ($126>>>0)>(12);
 if ($127) {
  $7 = -15;
  $168 = $7;
  STACKTOP = sp;return ($168|0);
 }
 $128 = $22;
 $129 = $12;
 HEAP32[$129>>2] = $128;
 $130 = $22;
 $131 = 1 << $130;
 $23 = $131;
 $132 = $23;
 $133 = $15;
 $134 = (($132) - ($133))|0;
 $24 = $134;
 $135 = $24;
 $136 = (_BIT_highbit32_9($135)|0);
 $137 = 1 << $136;
 $25 = $137;
 $138 = $24;
 $139 = (_BIT_highbit32_9($138)|0);
 $140 = (($139) + 1)|0;
 $26 = $140;
 $141 = $25;
 $142 = $24;
 $143 = ($141|0)!=($142|0);
 if ($143) {
  $7 = -15;
  $168 = $7;
  STACKTOP = sp;return ($168|0);
 }
 $144 = $26;
 $145 = $144&255;
 $146 = $8;
 $147 = $18;
 $148 = (($146) + ($147)|0);
 HEAP8[$148>>0] = $145;
 $149 = $10;
 $150 = $26;
 $151 = (($149) + ($150<<2)|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = (($152) + 1)|0;
 HEAP32[$151>>2] = $153;
 $154 = $10;
 $155 = ((($154)) + 4|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ($156>>>0)<(2);
 if (!($157)) {
  $158 = $10;
  $159 = ((($158)) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 & 1;
  $162 = ($161|0)!=(0);
  if (!($162)) {
   $163 = $18;
   $164 = (($163) + 1)|0;
   $165 = $11;
   HEAP32[$165>>2] = $164;
   $166 = $17;
   $167 = (($166) + 1)|0;
   $7 = $167;
   $168 = $7;
   STACKTOP = sp;return ($168|0);
  }
 }
 $7 = -15;
 $168 = $7;
 STACKTOP = sp;return ($168|0);
}
function _BIT_highbit32_9($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (Math_clz32(($2|0))|0);
 $4 = (31 - ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function _XXH_read32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$3+3>>0]|0;
 $4 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _XXH_swap32($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24;
 $4 = $3 & -16777216;
 $5 = $1;
 $6 = $5 << 8;
 $7 = $6 & 16711680;
 $8 = $4 | $7;
 $9 = $1;
 $10 = $9 >>> 8;
 $11 = $10 & 65280;
 $12 = $8 | $11;
 $13 = $1;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $12 | $15;
 STACKTOP = sp;return ($16|0);
}
function _XXH_read64($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$2+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$2+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$2+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$2+7>>0]=HEAP8[$3+7>>0]|0;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 tempRet0 = ($9);
 STACKTOP = sp;return ($6|0);
}
function _XXH_swap64($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 (_bitshift64Shl(($9|0),($12|0),56)|0);
 $13 = tempRet0;
 $14 = $13 & -16777216;
 $15 = $2;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 (_bitshift64Shl(($17|0),($20|0),40)|0);
 $21 = tempRet0;
 $22 = $21 & 16711680;
 $23 = $14 | $22;
 $24 = $2;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 (_bitshift64Shl(($26|0),($29|0),24)|0);
 $30 = tempRet0;
 $31 = $30 & 65280;
 $32 = $23 | $31;
 $33 = $2;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 (_bitshift64Shl(($35|0),($38|0),8)|0);
 $39 = tempRet0;
 $40 = $39 & 255;
 $41 = $32 | $40;
 $42 = $2;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (_bitshift64Lshr(($44|0),($47|0),8)|0);
 $49 = tempRet0;
 $50 = $48 & -16777216;
 $51 = $2;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_bitshift64Lshr(($53|0),($56|0),24)|0);
 $58 = tempRet0;
 $59 = $57 & 16711680;
 $60 = $50 | $59;
 $61 = $2;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (_bitshift64Lshr(($63|0),($66|0),40)|0);
 $68 = tempRet0;
 $69 = $67 & 65280;
 $70 = $60 | $69;
 $71 = $2;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (_bitshift64Lshr(($73|0),($76|0),56)|0);
 $78 = tempRet0;
 $79 = $77 & 255;
 $80 = $70 | $79;
 tempRet0 = ($41);
 STACKTOP = sp;return ($80|0);
}
function _XXH64_round($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $5;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $3;
 $14 = $5;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (___muldi3(($16|0),($19|0),668265295,-1028477379)|0);
 $21 = tempRet0;
 $22 = $4;
 $23 = $22;
 $24 = HEAP32[$23>>2]|0;
 $25 = (($22) + 4)|0;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (_i64Add(($24|0),($27|0),($20|0),($21|0))|0);
 $29 = tempRet0;
 $30 = $4;
 $31 = $30;
 HEAP32[$31>>2] = $28;
 $32 = (($30) + 4)|0;
 $33 = $32;
 HEAP32[$33>>2] = $29;
 $34 = $4;
 $35 = $34;
 $36 = HEAP32[$35>>2]|0;
 $37 = (($34) + 4)|0;
 $38 = $37;
 $39 = HEAP32[$38>>2]|0;
 $40 = (_bitshift64Shl(($36|0),($39|0),31)|0);
 $41 = tempRet0;
 $42 = $4;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (_bitshift64Lshr(($44|0),($47|0),33)|0);
 $49 = tempRet0;
 $50 = $40 | $48;
 $51 = $41 | $49;
 $52 = $4;
 $53 = $52;
 HEAP32[$53>>2] = $50;
 $54 = (($52) + 4)|0;
 $55 = $54;
 HEAP32[$55>>2] = $51;
 $56 = $4;
 $57 = $56;
 $58 = HEAP32[$57>>2]|0;
 $59 = (($56) + 4)|0;
 $60 = $59;
 $61 = HEAP32[$60>>2]|0;
 $62 = (___muldi3(($58|0),($61|0),-2048144761,-1640531535)|0);
 $63 = tempRet0;
 $64 = $4;
 $65 = $64;
 HEAP32[$65>>2] = $62;
 $66 = (($64) + 4)|0;
 $67 = $66;
 HEAP32[$67>>2] = $63;
 $68 = $4;
 $69 = $68;
 $70 = HEAP32[$69>>2]|0;
 $71 = (($68) + 4)|0;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 tempRet0 = ($73);
 STACKTOP = sp;return ($70|0);
}
function _XXH64_mergeRound($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $0;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $1;
 $10 = $5;
 $11 = $10;
 HEAP32[$11>>2] = $2;
 $12 = (($10) + 4)|0;
 $13 = $12;
 HEAP32[$13>>2] = $3;
 $14 = $5;
 $15 = $14;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($14) + 4)|0;
 $18 = $17;
 $19 = HEAP32[$18>>2]|0;
 $20 = (_XXH64_round(0,0,$16,$19)|0);
 $21 = tempRet0;
 $22 = $5;
 $23 = $22;
 HEAP32[$23>>2] = $20;
 $24 = (($22) + 4)|0;
 $25 = $24;
 HEAP32[$25>>2] = $21;
 $26 = $5;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + 4)|0;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = $4;
 $33 = $32;
 $34 = HEAP32[$33>>2]|0;
 $35 = (($32) + 4)|0;
 $36 = $35;
 $37 = HEAP32[$36>>2]|0;
 $38 = $34 ^ $28;
 $39 = $37 ^ $31;
 $40 = $4;
 $41 = $40;
 HEAP32[$41>>2] = $38;
 $42 = (($40) + 4)|0;
 $43 = $42;
 HEAP32[$43>>2] = $39;
 $44 = $4;
 $45 = $44;
 $46 = HEAP32[$45>>2]|0;
 $47 = (($44) + 4)|0;
 $48 = $47;
 $49 = HEAP32[$48>>2]|0;
 $50 = (___muldi3(($46|0),($49|0),-2048144761,-1640531535)|0);
 $51 = tempRet0;
 $52 = (_i64Add(($50|0),($51|0),-1028477341,-2048144777)|0);
 $53 = tempRet0;
 $54 = $4;
 $55 = $54;
 HEAP32[$55>>2] = $52;
 $56 = (($54) + 4)|0;
 $57 = $56;
 HEAP32[$57>>2] = $53;
 $58 = $4;
 $59 = $58;
 $60 = HEAP32[$59>>2]|0;
 $61 = (($58) + 4)|0;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 tempRet0 = ($63);
 STACKTOP = sp;return ($60|0);
}
function _ZSTD_XXH64_reset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0;
 var $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $4 = sp + 88|0;
 $5 = sp;
 $3 = $0;
 $6 = $4;
 $7 = $6;
 HEAP32[$7>>2] = $1;
 $8 = (($6) + 4)|0;
 $9 = $8;
 HEAP32[$9>>2] = $2;
 dest=$5; stop=dest+80|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $10 = $4;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + 4)|0;
 $14 = $13;
 $15 = HEAP32[$14>>2]|0;
 $16 = (_i64Add(($12|0),($15|0),-2048144761,-1640531535)|0);
 $17 = tempRet0;
 $18 = (_i64Add(($16|0),($17|0),668265295,-1028477379)|0);
 $19 = tempRet0;
 $20 = ((($5)) + 8|0);
 $21 = $20;
 $22 = $21;
 HEAP32[$22>>2] = $18;
 $23 = (($21) + 4)|0;
 $24 = $23;
 HEAP32[$24>>2] = $19;
 $25 = $4;
 $26 = $25;
 $27 = HEAP32[$26>>2]|0;
 $28 = (($25) + 4)|0;
 $29 = $28;
 $30 = HEAP32[$29>>2]|0;
 $31 = (_i64Add(($27|0),($30|0),668265295,-1028477379)|0);
 $32 = tempRet0;
 $33 = ((($5)) + 16|0);
 $34 = $33;
 $35 = $34;
 HEAP32[$35>>2] = $31;
 $36 = (($34) + 4)|0;
 $37 = $36;
 HEAP32[$37>>2] = $32;
 $38 = $4;
 $39 = $38;
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + 4)|0;
 $42 = $41;
 $43 = HEAP32[$42>>2]|0;
 $44 = (_i64Add(($40|0),($43|0),0,0)|0);
 $45 = tempRet0;
 $46 = ((($5)) + 24|0);
 $47 = $46;
 $48 = $47;
 HEAP32[$48>>2] = $44;
 $49 = (($47) + 4)|0;
 $50 = $49;
 HEAP32[$50>>2] = $45;
 $51 = $4;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_i64Subtract(($53|0),($56|0),-2048144761,-1640531535)|0);
 $58 = tempRet0;
 $59 = ((($5)) + 32|0);
 $60 = $59;
 $61 = $60;
 HEAP32[$61>>2] = $57;
 $62 = (($60) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $58;
 $64 = $3;
 dest=$64; src=$5; stop=dest+88|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return 0;
}
function _XXH_memcpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $4;
 $8 = $5;
 _memcpy(($6|0),($7|0),($8|0))|0;
 STACKTOP = sp;return ($6|0);
}
function _ZSTD_XXH64_update($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0;
 var $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0;
 var $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0;
 var $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0;
 var $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0;
 var $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0;
 var $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0;
 var $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0;
 var $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0;
 var $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0;
 var $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0;
 var $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0;
 var $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0;
 var $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0;
 var $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0;
 var $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0;
 var $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0;
 var $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0;
 var $1378 = 0, $1379 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0;
 var $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0;
 var $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0;
 var $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0;
 var $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0;
 var $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0;
 var $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0;
 var $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0;
 var $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0;
 var $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0;
 var $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0;
 var $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0;
 var $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0;
 var $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0;
 var $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0;
 var $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0;
 var $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0;
 var $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0;
 var $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0;
 var $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0;
 var $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0;
 var $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0;
 var $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0;
 var $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0;
 var $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0;
 var $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0;
 var $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0;
 var $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0;
 var $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0;
 var $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0;
 var $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0;
 var $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0;
 var $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $3 = sp + 184|0;
 $9 = sp + 176|0;
 $15 = sp + 168|0;
 $21 = sp + 160|0;
 $27 = sp + 152|0;
 $33 = sp + 144|0;
 $39 = sp + 136|0;
 $45 = sp + 128|0;
 $59 = sp + 120|0;
 $60 = sp + 112|0;
 $61 = sp + 104|0;
 $62 = sp + 96|0;
 $63 = sp + 88|0;
 $69 = sp + 80|0;
 $75 = sp + 72|0;
 $81 = sp + 64|0;
 $87 = sp + 56|0;
 $93 = sp + 48|0;
 $99 = sp + 40|0;
 $105 = sp + 32|0;
 $119 = sp + 24|0;
 $120 = sp + 16|0;
 $121 = sp + 8|0;
 $122 = sp;
 $124 = $0;
 $125 = $1;
 $126 = $2;
 $128 = HEAP8[16]|0;
 $129 = $128 << 24 >> 24;
 $127 = $129;
 $130 = $127;
 $131 = ($130|0)==(1);
 $132 = $124;
 $133 = $125;
 $134 = $126;
 if ($131) {
  $112 = $132;
  $113 = $133;
  $114 = $134;
  $115 = 1;
  $135 = $113;
  $116 = $135;
  $136 = $116;
  $137 = $114;
  $138 = (($136) + ($137)|0);
  $117 = $138;
  $139 = $114;
  $140 = $112;
  $141 = $140;
  $142 = $141;
  $143 = HEAP32[$142>>2]|0;
  $144 = (($141) + 4)|0;
  $145 = $144;
  $146 = HEAP32[$145>>2]|0;
  $147 = (_i64Add(($143|0),($146|0),($139|0),0)|0);
  $148 = tempRet0;
  $149 = $140;
  $150 = $149;
  HEAP32[$150>>2] = $147;
  $151 = (($149) + 4)|0;
  $152 = $151;
  HEAP32[$152>>2] = $148;
  $153 = $112;
  $154 = ((($153)) + 72|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $114;
  $157 = (($155) + ($156))|0;
  $158 = ($157>>>0)<(32);
  $159 = $112;
  if ($158) {
   $160 = ((($159)) + 40|0);
   $161 = $112;
   $162 = ((($161)) + 72|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (($160) + ($163)|0);
   $165 = $113;
   $166 = $114;
   (_XXH_memcpy($164,$165,$166)|0);
   $167 = $114;
   $168 = $112;
   $169 = ((($168)) + 72|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + ($167))|0;
   HEAP32[$169>>2] = $171;
   $111 = 0;
  } else {
   $172 = ((($159)) + 72|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = ($173|0)!=(0);
   if ($174) {
    $175 = $112;
    $176 = ((($175)) + 40|0);
    $177 = $112;
    $178 = ((($177)) + 72|0);
    $179 = HEAP32[$178>>2]|0;
    $180 = (($176) + ($179)|0);
    $181 = $113;
    $182 = $112;
    $183 = ((($182)) + 72|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (32 - ($184))|0;
    (_XXH_memcpy($180,$181,$185)|0);
    $186 = $112;
    $187 = ((($186)) + 8|0);
    $188 = $187;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $194 = $112;
    $195 = ((($194)) + 40|0);
    $196 = $115;
    $109 = $195;
    $110 = $196;
    $197 = $109;
    $198 = $110;
    $106 = $197;
    $107 = $198;
    $108 = 1;
    $199 = $108;
    $200 = ($199|0)==(1);
    $201 = $107;
    $202 = ($201|0)==(1);
    $203 = $106;
    if ($200) {
     $204 = (_XXH_read64($203)|0);
     $205 = tempRet0;
     if ($202) {
      $210 = $204;$213 = $205;
     } else {
      $206 = (_XXH_swap64($204,$205)|0);
      $207 = tempRet0;
      $210 = $206;$213 = $207;
     }
     $208 = $105;
     $209 = $208;
     HEAP32[$209>>2] = $210;
     $211 = (($208) + 4)|0;
     $212 = $211;
     HEAP32[$212>>2] = $213;
    } else {
     $214 = $203;
     $215 = $214;
     $216 = HEAP32[$215>>2]|0;
     $217 = (($214) + 4)|0;
     $218 = $217;
     $219 = HEAP32[$218>>2]|0;
     if ($202) {
      $224 = $216;$227 = $219;
     } else {
      $220 = (_XXH_swap64($216,$219)|0);
      $221 = tempRet0;
      $224 = $220;$227 = $221;
     }
     $222 = $105;
     $223 = $222;
     HEAP32[$223>>2] = $224;
     $225 = (($222) + 4)|0;
     $226 = $225;
     HEAP32[$226>>2] = $227;
    }
    $228 = $105;
    $229 = $228;
    $230 = HEAP32[$229>>2]|0;
    $231 = (($228) + 4)|0;
    $232 = $231;
    $233 = HEAP32[$232>>2]|0;
    $234 = (_XXH64_round($190,$193,$230,$233)|0);
    $235 = tempRet0;
    $236 = $112;
    $237 = ((($236)) + 8|0);
    $238 = $237;
    $239 = $238;
    HEAP32[$239>>2] = $234;
    $240 = (($238) + 4)|0;
    $241 = $240;
    HEAP32[$241>>2] = $235;
    $242 = $112;
    $243 = ((($242)) + 16|0);
    $244 = $243;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = $112;
    $251 = ((($250)) + 40|0);
    $252 = ((($251)) + 8|0);
    $253 = $115;
    $103 = $252;
    $104 = $253;
    $254 = $103;
    $255 = $104;
    $100 = $254;
    $101 = $255;
    $102 = 1;
    $256 = $102;
    $257 = ($256|0)==(1);
    $258 = $101;
    $259 = ($258|0)==(1);
    $260 = $100;
    if ($257) {
     $261 = (_XXH_read64($260)|0);
     $262 = tempRet0;
     if ($259) {
      $267 = $261;$270 = $262;
     } else {
      $263 = (_XXH_swap64($261,$262)|0);
      $264 = tempRet0;
      $267 = $263;$270 = $264;
     }
     $265 = $99;
     $266 = $265;
     HEAP32[$266>>2] = $267;
     $268 = (($265) + 4)|0;
     $269 = $268;
     HEAP32[$269>>2] = $270;
    } else {
     $271 = $260;
     $272 = $271;
     $273 = HEAP32[$272>>2]|0;
     $274 = (($271) + 4)|0;
     $275 = $274;
     $276 = HEAP32[$275>>2]|0;
     if ($259) {
      $281 = $273;$284 = $276;
     } else {
      $277 = (_XXH_swap64($273,$276)|0);
      $278 = tempRet0;
      $281 = $277;$284 = $278;
     }
     $279 = $99;
     $280 = $279;
     HEAP32[$280>>2] = $281;
     $282 = (($279) + 4)|0;
     $283 = $282;
     HEAP32[$283>>2] = $284;
    }
    $285 = $99;
    $286 = $285;
    $287 = HEAP32[$286>>2]|0;
    $288 = (($285) + 4)|0;
    $289 = $288;
    $290 = HEAP32[$289>>2]|0;
    $291 = (_XXH64_round($246,$249,$287,$290)|0);
    $292 = tempRet0;
    $293 = $112;
    $294 = ((($293)) + 16|0);
    $295 = $294;
    $296 = $295;
    HEAP32[$296>>2] = $291;
    $297 = (($295) + 4)|0;
    $298 = $297;
    HEAP32[$298>>2] = $292;
    $299 = $112;
    $300 = ((($299)) + 24|0);
    $301 = $300;
    $302 = $301;
    $303 = HEAP32[$302>>2]|0;
    $304 = (($301) + 4)|0;
    $305 = $304;
    $306 = HEAP32[$305>>2]|0;
    $307 = $112;
    $308 = ((($307)) + 40|0);
    $309 = ((($308)) + 16|0);
    $310 = $115;
    $97 = $309;
    $98 = $310;
    $311 = $97;
    $312 = $98;
    $94 = $311;
    $95 = $312;
    $96 = 1;
    $313 = $96;
    $314 = ($313|0)==(1);
    $315 = $95;
    $316 = ($315|0)==(1);
    $317 = $94;
    if ($314) {
     $318 = (_XXH_read64($317)|0);
     $319 = tempRet0;
     if ($316) {
      $324 = $318;$327 = $319;
     } else {
      $320 = (_XXH_swap64($318,$319)|0);
      $321 = tempRet0;
      $324 = $320;$327 = $321;
     }
     $322 = $93;
     $323 = $322;
     HEAP32[$323>>2] = $324;
     $325 = (($322) + 4)|0;
     $326 = $325;
     HEAP32[$326>>2] = $327;
    } else {
     $328 = $317;
     $329 = $328;
     $330 = HEAP32[$329>>2]|0;
     $331 = (($328) + 4)|0;
     $332 = $331;
     $333 = HEAP32[$332>>2]|0;
     if ($316) {
      $338 = $330;$341 = $333;
     } else {
      $334 = (_XXH_swap64($330,$333)|0);
      $335 = tempRet0;
      $338 = $334;$341 = $335;
     }
     $336 = $93;
     $337 = $336;
     HEAP32[$337>>2] = $338;
     $339 = (($336) + 4)|0;
     $340 = $339;
     HEAP32[$340>>2] = $341;
    }
    $342 = $93;
    $343 = $342;
    $344 = HEAP32[$343>>2]|0;
    $345 = (($342) + 4)|0;
    $346 = $345;
    $347 = HEAP32[$346>>2]|0;
    $348 = (_XXH64_round($303,$306,$344,$347)|0);
    $349 = tempRet0;
    $350 = $112;
    $351 = ((($350)) + 24|0);
    $352 = $351;
    $353 = $352;
    HEAP32[$353>>2] = $348;
    $354 = (($352) + 4)|0;
    $355 = $354;
    HEAP32[$355>>2] = $349;
    $356 = $112;
    $357 = ((($356)) + 32|0);
    $358 = $357;
    $359 = $358;
    $360 = HEAP32[$359>>2]|0;
    $361 = (($358) + 4)|0;
    $362 = $361;
    $363 = HEAP32[$362>>2]|0;
    $364 = $112;
    $365 = ((($364)) + 40|0);
    $366 = ((($365)) + 24|0);
    $367 = $115;
    $91 = $366;
    $92 = $367;
    $368 = $91;
    $369 = $92;
    $88 = $368;
    $89 = $369;
    $90 = 1;
    $370 = $90;
    $371 = ($370|0)==(1);
    $372 = $89;
    $373 = ($372|0)==(1);
    $374 = $88;
    if ($371) {
     $375 = (_XXH_read64($374)|0);
     $376 = tempRet0;
     if ($373) {
      $381 = $375;$384 = $376;
     } else {
      $377 = (_XXH_swap64($375,$376)|0);
      $378 = tempRet0;
      $381 = $377;$384 = $378;
     }
     $379 = $87;
     $380 = $379;
     HEAP32[$380>>2] = $381;
     $382 = (($379) + 4)|0;
     $383 = $382;
     HEAP32[$383>>2] = $384;
    } else {
     $385 = $374;
     $386 = $385;
     $387 = HEAP32[$386>>2]|0;
     $388 = (($385) + 4)|0;
     $389 = $388;
     $390 = HEAP32[$389>>2]|0;
     if ($373) {
      $395 = $387;$398 = $390;
     } else {
      $391 = (_XXH_swap64($387,$390)|0);
      $392 = tempRet0;
      $395 = $391;$398 = $392;
     }
     $393 = $87;
     $394 = $393;
     HEAP32[$394>>2] = $395;
     $396 = (($393) + 4)|0;
     $397 = $396;
     HEAP32[$397>>2] = $398;
    }
    $399 = $87;
    $400 = $399;
    $401 = HEAP32[$400>>2]|0;
    $402 = (($399) + 4)|0;
    $403 = $402;
    $404 = HEAP32[$403>>2]|0;
    $405 = (_XXH64_round($360,$363,$401,$404)|0);
    $406 = tempRet0;
    $407 = $112;
    $408 = ((($407)) + 32|0);
    $409 = $408;
    $410 = $409;
    HEAP32[$410>>2] = $405;
    $411 = (($409) + 4)|0;
    $412 = $411;
    HEAP32[$412>>2] = $406;
    $413 = $112;
    $414 = ((($413)) + 72|0);
    $415 = HEAP32[$414>>2]|0;
    $416 = (32 - ($415))|0;
    $417 = $116;
    $418 = (($417) + ($416)|0);
    $116 = $418;
    $419 = $112;
    $420 = ((($419)) + 72|0);
    HEAP32[$420>>2] = 0;
   }
   $421 = $116;
   $422 = ((($421)) + 32|0);
   $423 = $117;
   $424 = ($422>>>0)<=($423>>>0);
   if ($424) {
    $425 = $117;
    $426 = ((($425)) + -32|0);
    $118 = $426;
    $427 = $112;
    $428 = ((($427)) + 8|0);
    $429 = $428;
    $430 = $429;
    $431 = HEAP32[$430>>2]|0;
    $432 = (($429) + 4)|0;
    $433 = $432;
    $434 = HEAP32[$433>>2]|0;
    $435 = $119;
    $436 = $435;
    HEAP32[$436>>2] = $431;
    $437 = (($435) + 4)|0;
    $438 = $437;
    HEAP32[$438>>2] = $434;
    $439 = $112;
    $440 = ((($439)) + 16|0);
    $441 = $440;
    $442 = $441;
    $443 = HEAP32[$442>>2]|0;
    $444 = (($441) + 4)|0;
    $445 = $444;
    $446 = HEAP32[$445>>2]|0;
    $447 = $120;
    $448 = $447;
    HEAP32[$448>>2] = $443;
    $449 = (($447) + 4)|0;
    $450 = $449;
    HEAP32[$450>>2] = $446;
    $451 = $112;
    $452 = ((($451)) + 24|0);
    $453 = $452;
    $454 = $453;
    $455 = HEAP32[$454>>2]|0;
    $456 = (($453) + 4)|0;
    $457 = $456;
    $458 = HEAP32[$457>>2]|0;
    $459 = $121;
    $460 = $459;
    HEAP32[$460>>2] = $455;
    $461 = (($459) + 4)|0;
    $462 = $461;
    HEAP32[$462>>2] = $458;
    $463 = $112;
    $464 = ((($463)) + 32|0);
    $465 = $464;
    $466 = $465;
    $467 = HEAP32[$466>>2]|0;
    $468 = (($465) + 4)|0;
    $469 = $468;
    $470 = HEAP32[$469>>2]|0;
    $471 = $122;
    $472 = $471;
    HEAP32[$472>>2] = $467;
    $473 = (($471) + 4)|0;
    $474 = $473;
    HEAP32[$474>>2] = $470;
    while(1) {
     $475 = $119;
     $476 = $475;
     $477 = HEAP32[$476>>2]|0;
     $478 = (($475) + 4)|0;
     $479 = $478;
     $480 = HEAP32[$479>>2]|0;
     $481 = $116;
     $482 = $115;
     $85 = $481;
     $86 = $482;
     $483 = $85;
     $484 = $86;
     $82 = $483;
     $83 = $484;
     $84 = 1;
     $485 = $84;
     $486 = ($485|0)==(1);
     $487 = $83;
     $488 = ($487|0)==(1);
     $489 = $82;
     if ($486) {
      $490 = (_XXH_read64($489)|0);
      $491 = tempRet0;
      if ($488) {
       $496 = $490;$499 = $491;
      } else {
       $492 = (_XXH_swap64($490,$491)|0);
       $493 = tempRet0;
       $496 = $492;$499 = $493;
      }
      $494 = $81;
      $495 = $494;
      HEAP32[$495>>2] = $496;
      $497 = (($494) + 4)|0;
      $498 = $497;
      HEAP32[$498>>2] = $499;
     } else {
      $500 = $489;
      $501 = $500;
      $502 = HEAP32[$501>>2]|0;
      $503 = (($500) + 4)|0;
      $504 = $503;
      $505 = HEAP32[$504>>2]|0;
      if ($488) {
       $510 = $502;$513 = $505;
      } else {
       $506 = (_XXH_swap64($502,$505)|0);
       $507 = tempRet0;
       $510 = $506;$513 = $507;
      }
      $508 = $81;
      $509 = $508;
      HEAP32[$509>>2] = $510;
      $511 = (($508) + 4)|0;
      $512 = $511;
      HEAP32[$512>>2] = $513;
     }
     $514 = $81;
     $515 = $514;
     $516 = HEAP32[$515>>2]|0;
     $517 = (($514) + 4)|0;
     $518 = $517;
     $519 = HEAP32[$518>>2]|0;
     $520 = (_XXH64_round($477,$480,$516,$519)|0);
     $521 = tempRet0;
     $522 = $119;
     $523 = $522;
     HEAP32[$523>>2] = $520;
     $524 = (($522) + 4)|0;
     $525 = $524;
     HEAP32[$525>>2] = $521;
     $526 = $116;
     $527 = ((($526)) + 8|0);
     $116 = $527;
     $528 = $120;
     $529 = $528;
     $530 = HEAP32[$529>>2]|0;
     $531 = (($528) + 4)|0;
     $532 = $531;
     $533 = HEAP32[$532>>2]|0;
     $534 = $116;
     $535 = $115;
     $79 = $534;
     $80 = $535;
     $536 = $79;
     $537 = $80;
     $76 = $536;
     $77 = $537;
     $78 = 1;
     $538 = $78;
     $539 = ($538|0)==(1);
     $540 = $77;
     $541 = ($540|0)==(1);
     $542 = $76;
     if ($539) {
      $543 = (_XXH_read64($542)|0);
      $544 = tempRet0;
      if ($541) {
       $549 = $543;$552 = $544;
      } else {
       $545 = (_XXH_swap64($543,$544)|0);
       $546 = tempRet0;
       $549 = $545;$552 = $546;
      }
      $547 = $75;
      $548 = $547;
      HEAP32[$548>>2] = $549;
      $550 = (($547) + 4)|0;
      $551 = $550;
      HEAP32[$551>>2] = $552;
     } else {
      $553 = $542;
      $554 = $553;
      $555 = HEAP32[$554>>2]|0;
      $556 = (($553) + 4)|0;
      $557 = $556;
      $558 = HEAP32[$557>>2]|0;
      if ($541) {
       $563 = $555;$566 = $558;
      } else {
       $559 = (_XXH_swap64($555,$558)|0);
       $560 = tempRet0;
       $563 = $559;$566 = $560;
      }
      $561 = $75;
      $562 = $561;
      HEAP32[$562>>2] = $563;
      $564 = (($561) + 4)|0;
      $565 = $564;
      HEAP32[$565>>2] = $566;
     }
     $567 = $75;
     $568 = $567;
     $569 = HEAP32[$568>>2]|0;
     $570 = (($567) + 4)|0;
     $571 = $570;
     $572 = HEAP32[$571>>2]|0;
     $573 = (_XXH64_round($530,$533,$569,$572)|0);
     $574 = tempRet0;
     $575 = $120;
     $576 = $575;
     HEAP32[$576>>2] = $573;
     $577 = (($575) + 4)|0;
     $578 = $577;
     HEAP32[$578>>2] = $574;
     $579 = $116;
     $580 = ((($579)) + 8|0);
     $116 = $580;
     $581 = $121;
     $582 = $581;
     $583 = HEAP32[$582>>2]|0;
     $584 = (($581) + 4)|0;
     $585 = $584;
     $586 = HEAP32[$585>>2]|0;
     $587 = $116;
     $588 = $115;
     $73 = $587;
     $74 = $588;
     $589 = $73;
     $590 = $74;
     $70 = $589;
     $71 = $590;
     $72 = 1;
     $591 = $72;
     $592 = ($591|0)==(1);
     $593 = $71;
     $594 = ($593|0)==(1);
     $595 = $70;
     if ($592) {
      $596 = (_XXH_read64($595)|0);
      $597 = tempRet0;
      if ($594) {
       $602 = $596;$605 = $597;
      } else {
       $598 = (_XXH_swap64($596,$597)|0);
       $599 = tempRet0;
       $602 = $598;$605 = $599;
      }
      $600 = $69;
      $601 = $600;
      HEAP32[$601>>2] = $602;
      $603 = (($600) + 4)|0;
      $604 = $603;
      HEAP32[$604>>2] = $605;
     } else {
      $606 = $595;
      $607 = $606;
      $608 = HEAP32[$607>>2]|0;
      $609 = (($606) + 4)|0;
      $610 = $609;
      $611 = HEAP32[$610>>2]|0;
      if ($594) {
       $616 = $608;$619 = $611;
      } else {
       $612 = (_XXH_swap64($608,$611)|0);
       $613 = tempRet0;
       $616 = $612;$619 = $613;
      }
      $614 = $69;
      $615 = $614;
      HEAP32[$615>>2] = $616;
      $617 = (($614) + 4)|0;
      $618 = $617;
      HEAP32[$618>>2] = $619;
     }
     $620 = $69;
     $621 = $620;
     $622 = HEAP32[$621>>2]|0;
     $623 = (($620) + 4)|0;
     $624 = $623;
     $625 = HEAP32[$624>>2]|0;
     $626 = (_XXH64_round($583,$586,$622,$625)|0);
     $627 = tempRet0;
     $628 = $121;
     $629 = $628;
     HEAP32[$629>>2] = $626;
     $630 = (($628) + 4)|0;
     $631 = $630;
     HEAP32[$631>>2] = $627;
     $632 = $116;
     $633 = ((($632)) + 8|0);
     $116 = $633;
     $634 = $122;
     $635 = $634;
     $636 = HEAP32[$635>>2]|0;
     $637 = (($634) + 4)|0;
     $638 = $637;
     $639 = HEAP32[$638>>2]|0;
     $640 = $116;
     $641 = $115;
     $67 = $640;
     $68 = $641;
     $642 = $67;
     $643 = $68;
     $64 = $642;
     $65 = $643;
     $66 = 1;
     $644 = $66;
     $645 = ($644|0)==(1);
     $646 = $65;
     $647 = ($646|0)==(1);
     $648 = $64;
     if ($645) {
      $649 = (_XXH_read64($648)|0);
      $650 = tempRet0;
      if ($647) {
       $655 = $649;$658 = $650;
      } else {
       $651 = (_XXH_swap64($649,$650)|0);
       $652 = tempRet0;
       $655 = $651;$658 = $652;
      }
      $653 = $63;
      $654 = $653;
      HEAP32[$654>>2] = $655;
      $656 = (($653) + 4)|0;
      $657 = $656;
      HEAP32[$657>>2] = $658;
     } else {
      $659 = $648;
      $660 = $659;
      $661 = HEAP32[$660>>2]|0;
      $662 = (($659) + 4)|0;
      $663 = $662;
      $664 = HEAP32[$663>>2]|0;
      if ($647) {
       $669 = $661;$672 = $664;
      } else {
       $665 = (_XXH_swap64($661,$664)|0);
       $666 = tempRet0;
       $669 = $665;$672 = $666;
      }
      $667 = $63;
      $668 = $667;
      HEAP32[$668>>2] = $669;
      $670 = (($667) + 4)|0;
      $671 = $670;
      HEAP32[$671>>2] = $672;
     }
     $673 = $63;
     $674 = $673;
     $675 = HEAP32[$674>>2]|0;
     $676 = (($673) + 4)|0;
     $677 = $676;
     $678 = HEAP32[$677>>2]|0;
     $679 = (_XXH64_round($636,$639,$675,$678)|0);
     $680 = tempRet0;
     $681 = $122;
     $682 = $681;
     HEAP32[$682>>2] = $679;
     $683 = (($681) + 4)|0;
     $684 = $683;
     HEAP32[$684>>2] = $680;
     $685 = $116;
     $686 = ((($685)) + 8|0);
     $116 = $686;
     $687 = $116;
     $688 = $118;
     $689 = ($687>>>0)<=($688>>>0);
     if (!($689)) {
      break;
     }
    }
    $690 = $119;
    $691 = $690;
    $692 = HEAP32[$691>>2]|0;
    $693 = (($690) + 4)|0;
    $694 = $693;
    $695 = HEAP32[$694>>2]|0;
    $696 = $112;
    $697 = ((($696)) + 8|0);
    $698 = $697;
    $699 = $698;
    HEAP32[$699>>2] = $692;
    $700 = (($698) + 4)|0;
    $701 = $700;
    HEAP32[$701>>2] = $695;
    $702 = $120;
    $703 = $702;
    $704 = HEAP32[$703>>2]|0;
    $705 = (($702) + 4)|0;
    $706 = $705;
    $707 = HEAP32[$706>>2]|0;
    $708 = $112;
    $709 = ((($708)) + 16|0);
    $710 = $709;
    $711 = $710;
    HEAP32[$711>>2] = $704;
    $712 = (($710) + 4)|0;
    $713 = $712;
    HEAP32[$713>>2] = $707;
    $714 = $121;
    $715 = $714;
    $716 = HEAP32[$715>>2]|0;
    $717 = (($714) + 4)|0;
    $718 = $717;
    $719 = HEAP32[$718>>2]|0;
    $720 = $112;
    $721 = ((($720)) + 24|0);
    $722 = $721;
    $723 = $722;
    HEAP32[$723>>2] = $716;
    $724 = (($722) + 4)|0;
    $725 = $724;
    HEAP32[$725>>2] = $719;
    $726 = $122;
    $727 = $726;
    $728 = HEAP32[$727>>2]|0;
    $729 = (($726) + 4)|0;
    $730 = $729;
    $731 = HEAP32[$730>>2]|0;
    $732 = $112;
    $733 = ((($732)) + 32|0);
    $734 = $733;
    $735 = $734;
    HEAP32[$735>>2] = $728;
    $736 = (($734) + 4)|0;
    $737 = $736;
    HEAP32[$737>>2] = $731;
   }
   $738 = $116;
   $739 = $117;
   $740 = ($738>>>0)<($739>>>0);
   if ($740) {
    $741 = $112;
    $742 = ((($741)) + 40|0);
    $743 = $116;
    $744 = $117;
    $745 = $116;
    $746 = $744;
    $747 = $745;
    $748 = (($746) - ($747))|0;
    (_XXH_memcpy($742,$743,$748)|0);
    $749 = $117;
    $750 = $116;
    $751 = $749;
    $752 = $750;
    $753 = (($751) - ($752))|0;
    $754 = $112;
    $755 = ((($754)) + 72|0);
    HEAP32[$755>>2] = $753;
   }
   $111 = 0;
  }
  $756 = $111;
  $123 = $756;
  $1379 = $123;
  STACKTOP = sp;return ($1379|0);
 } else {
  $52 = $132;
  $53 = $133;
  $54 = $134;
  $55 = 0;
  $757 = $53;
  $56 = $757;
  $758 = $56;
  $759 = $54;
  $760 = (($758) + ($759)|0);
  $57 = $760;
  $761 = $54;
  $762 = $52;
  $763 = $762;
  $764 = $763;
  $765 = HEAP32[$764>>2]|0;
  $766 = (($763) + 4)|0;
  $767 = $766;
  $768 = HEAP32[$767>>2]|0;
  $769 = (_i64Add(($765|0),($768|0),($761|0),0)|0);
  $770 = tempRet0;
  $771 = $762;
  $772 = $771;
  HEAP32[$772>>2] = $769;
  $773 = (($771) + 4)|0;
  $774 = $773;
  HEAP32[$774>>2] = $770;
  $775 = $52;
  $776 = ((($775)) + 72|0);
  $777 = HEAP32[$776>>2]|0;
  $778 = $54;
  $779 = (($777) + ($778))|0;
  $780 = ($779>>>0)<(32);
  $781 = $52;
  if ($780) {
   $782 = ((($781)) + 40|0);
   $783 = $52;
   $784 = ((($783)) + 72|0);
   $785 = HEAP32[$784>>2]|0;
   $786 = (($782) + ($785)|0);
   $787 = $53;
   $788 = $54;
   (_XXH_memcpy($786,$787,$788)|0);
   $789 = $54;
   $790 = $52;
   $791 = ((($790)) + 72|0);
   $792 = HEAP32[$791>>2]|0;
   $793 = (($792) + ($789))|0;
   HEAP32[$791>>2] = $793;
   $51 = 0;
  } else {
   $794 = ((($781)) + 72|0);
   $795 = HEAP32[$794>>2]|0;
   $796 = ($795|0)!=(0);
   if ($796) {
    $797 = $52;
    $798 = ((($797)) + 40|0);
    $799 = $52;
    $800 = ((($799)) + 72|0);
    $801 = HEAP32[$800>>2]|0;
    $802 = (($798) + ($801)|0);
    $803 = $53;
    $804 = $52;
    $805 = ((($804)) + 72|0);
    $806 = HEAP32[$805>>2]|0;
    $807 = (32 - ($806))|0;
    (_XXH_memcpy($802,$803,$807)|0);
    $808 = $52;
    $809 = ((($808)) + 8|0);
    $810 = $809;
    $811 = $810;
    $812 = HEAP32[$811>>2]|0;
    $813 = (($810) + 4)|0;
    $814 = $813;
    $815 = HEAP32[$814>>2]|0;
    $816 = $52;
    $817 = ((($816)) + 40|0);
    $818 = $55;
    $49 = $817;
    $50 = $818;
    $819 = $49;
    $820 = $50;
    $46 = $819;
    $47 = $820;
    $48 = 1;
    $821 = $48;
    $822 = ($821|0)==(1);
    $823 = $47;
    $824 = ($823|0)==(1);
    $825 = $46;
    if ($822) {
     $826 = (_XXH_read64($825)|0);
     $827 = tempRet0;
     if ($824) {
      $832 = $826;$835 = $827;
     } else {
      $828 = (_XXH_swap64($826,$827)|0);
      $829 = tempRet0;
      $832 = $828;$835 = $829;
     }
     $830 = $45;
     $831 = $830;
     HEAP32[$831>>2] = $832;
     $833 = (($830) + 4)|0;
     $834 = $833;
     HEAP32[$834>>2] = $835;
    } else {
     $836 = $825;
     $837 = $836;
     $838 = HEAP32[$837>>2]|0;
     $839 = (($836) + 4)|0;
     $840 = $839;
     $841 = HEAP32[$840>>2]|0;
     if ($824) {
      $846 = $838;$849 = $841;
     } else {
      $842 = (_XXH_swap64($838,$841)|0);
      $843 = tempRet0;
      $846 = $842;$849 = $843;
     }
     $844 = $45;
     $845 = $844;
     HEAP32[$845>>2] = $846;
     $847 = (($844) + 4)|0;
     $848 = $847;
     HEAP32[$848>>2] = $849;
    }
    $850 = $45;
    $851 = $850;
    $852 = HEAP32[$851>>2]|0;
    $853 = (($850) + 4)|0;
    $854 = $853;
    $855 = HEAP32[$854>>2]|0;
    $856 = (_XXH64_round($812,$815,$852,$855)|0);
    $857 = tempRet0;
    $858 = $52;
    $859 = ((($858)) + 8|0);
    $860 = $859;
    $861 = $860;
    HEAP32[$861>>2] = $856;
    $862 = (($860) + 4)|0;
    $863 = $862;
    HEAP32[$863>>2] = $857;
    $864 = $52;
    $865 = ((($864)) + 16|0);
    $866 = $865;
    $867 = $866;
    $868 = HEAP32[$867>>2]|0;
    $869 = (($866) + 4)|0;
    $870 = $869;
    $871 = HEAP32[$870>>2]|0;
    $872 = $52;
    $873 = ((($872)) + 40|0);
    $874 = ((($873)) + 8|0);
    $875 = $55;
    $43 = $874;
    $44 = $875;
    $876 = $43;
    $877 = $44;
    $40 = $876;
    $41 = $877;
    $42 = 1;
    $878 = $42;
    $879 = ($878|0)==(1);
    $880 = $41;
    $881 = ($880|0)==(1);
    $882 = $40;
    if ($879) {
     $883 = (_XXH_read64($882)|0);
     $884 = tempRet0;
     if ($881) {
      $889 = $883;$892 = $884;
     } else {
      $885 = (_XXH_swap64($883,$884)|0);
      $886 = tempRet0;
      $889 = $885;$892 = $886;
     }
     $887 = $39;
     $888 = $887;
     HEAP32[$888>>2] = $889;
     $890 = (($887) + 4)|0;
     $891 = $890;
     HEAP32[$891>>2] = $892;
    } else {
     $893 = $882;
     $894 = $893;
     $895 = HEAP32[$894>>2]|0;
     $896 = (($893) + 4)|0;
     $897 = $896;
     $898 = HEAP32[$897>>2]|0;
     if ($881) {
      $903 = $895;$906 = $898;
     } else {
      $899 = (_XXH_swap64($895,$898)|0);
      $900 = tempRet0;
      $903 = $899;$906 = $900;
     }
     $901 = $39;
     $902 = $901;
     HEAP32[$902>>2] = $903;
     $904 = (($901) + 4)|0;
     $905 = $904;
     HEAP32[$905>>2] = $906;
    }
    $907 = $39;
    $908 = $907;
    $909 = HEAP32[$908>>2]|0;
    $910 = (($907) + 4)|0;
    $911 = $910;
    $912 = HEAP32[$911>>2]|0;
    $913 = (_XXH64_round($868,$871,$909,$912)|0);
    $914 = tempRet0;
    $915 = $52;
    $916 = ((($915)) + 16|0);
    $917 = $916;
    $918 = $917;
    HEAP32[$918>>2] = $913;
    $919 = (($917) + 4)|0;
    $920 = $919;
    HEAP32[$920>>2] = $914;
    $921 = $52;
    $922 = ((($921)) + 24|0);
    $923 = $922;
    $924 = $923;
    $925 = HEAP32[$924>>2]|0;
    $926 = (($923) + 4)|0;
    $927 = $926;
    $928 = HEAP32[$927>>2]|0;
    $929 = $52;
    $930 = ((($929)) + 40|0);
    $931 = ((($930)) + 16|0);
    $932 = $55;
    $37 = $931;
    $38 = $932;
    $933 = $37;
    $934 = $38;
    $34 = $933;
    $35 = $934;
    $36 = 1;
    $935 = $36;
    $936 = ($935|0)==(1);
    $937 = $35;
    $938 = ($937|0)==(1);
    $939 = $34;
    if ($936) {
     $940 = (_XXH_read64($939)|0);
     $941 = tempRet0;
     if ($938) {
      $946 = $940;$949 = $941;
     } else {
      $942 = (_XXH_swap64($940,$941)|0);
      $943 = tempRet0;
      $946 = $942;$949 = $943;
     }
     $944 = $33;
     $945 = $944;
     HEAP32[$945>>2] = $946;
     $947 = (($944) + 4)|0;
     $948 = $947;
     HEAP32[$948>>2] = $949;
    } else {
     $950 = $939;
     $951 = $950;
     $952 = HEAP32[$951>>2]|0;
     $953 = (($950) + 4)|0;
     $954 = $953;
     $955 = HEAP32[$954>>2]|0;
     if ($938) {
      $960 = $952;$963 = $955;
     } else {
      $956 = (_XXH_swap64($952,$955)|0);
      $957 = tempRet0;
      $960 = $956;$963 = $957;
     }
     $958 = $33;
     $959 = $958;
     HEAP32[$959>>2] = $960;
     $961 = (($958) + 4)|0;
     $962 = $961;
     HEAP32[$962>>2] = $963;
    }
    $964 = $33;
    $965 = $964;
    $966 = HEAP32[$965>>2]|0;
    $967 = (($964) + 4)|0;
    $968 = $967;
    $969 = HEAP32[$968>>2]|0;
    $970 = (_XXH64_round($925,$928,$966,$969)|0);
    $971 = tempRet0;
    $972 = $52;
    $973 = ((($972)) + 24|0);
    $974 = $973;
    $975 = $974;
    HEAP32[$975>>2] = $970;
    $976 = (($974) + 4)|0;
    $977 = $976;
    HEAP32[$977>>2] = $971;
    $978 = $52;
    $979 = ((($978)) + 32|0);
    $980 = $979;
    $981 = $980;
    $982 = HEAP32[$981>>2]|0;
    $983 = (($980) + 4)|0;
    $984 = $983;
    $985 = HEAP32[$984>>2]|0;
    $986 = $52;
    $987 = ((($986)) + 40|0);
    $988 = ((($987)) + 24|0);
    $989 = $55;
    $31 = $988;
    $32 = $989;
    $990 = $31;
    $991 = $32;
    $28 = $990;
    $29 = $991;
    $30 = 1;
    $992 = $30;
    $993 = ($992|0)==(1);
    $994 = $29;
    $995 = ($994|0)==(1);
    $996 = $28;
    if ($993) {
     $997 = (_XXH_read64($996)|0);
     $998 = tempRet0;
     if ($995) {
      $1003 = $997;$1006 = $998;
     } else {
      $999 = (_XXH_swap64($997,$998)|0);
      $1000 = tempRet0;
      $1003 = $999;$1006 = $1000;
     }
     $1001 = $27;
     $1002 = $1001;
     HEAP32[$1002>>2] = $1003;
     $1004 = (($1001) + 4)|0;
     $1005 = $1004;
     HEAP32[$1005>>2] = $1006;
    } else {
     $1007 = $996;
     $1008 = $1007;
     $1009 = HEAP32[$1008>>2]|0;
     $1010 = (($1007) + 4)|0;
     $1011 = $1010;
     $1012 = HEAP32[$1011>>2]|0;
     if ($995) {
      $1017 = $1009;$1020 = $1012;
     } else {
      $1013 = (_XXH_swap64($1009,$1012)|0);
      $1014 = tempRet0;
      $1017 = $1013;$1020 = $1014;
     }
     $1015 = $27;
     $1016 = $1015;
     HEAP32[$1016>>2] = $1017;
     $1018 = (($1015) + 4)|0;
     $1019 = $1018;
     HEAP32[$1019>>2] = $1020;
    }
    $1021 = $27;
    $1022 = $1021;
    $1023 = HEAP32[$1022>>2]|0;
    $1024 = (($1021) + 4)|0;
    $1025 = $1024;
    $1026 = HEAP32[$1025>>2]|0;
    $1027 = (_XXH64_round($982,$985,$1023,$1026)|0);
    $1028 = tempRet0;
    $1029 = $52;
    $1030 = ((($1029)) + 32|0);
    $1031 = $1030;
    $1032 = $1031;
    HEAP32[$1032>>2] = $1027;
    $1033 = (($1031) + 4)|0;
    $1034 = $1033;
    HEAP32[$1034>>2] = $1028;
    $1035 = $52;
    $1036 = ((($1035)) + 72|0);
    $1037 = HEAP32[$1036>>2]|0;
    $1038 = (32 - ($1037))|0;
    $1039 = $56;
    $1040 = (($1039) + ($1038)|0);
    $56 = $1040;
    $1041 = $52;
    $1042 = ((($1041)) + 72|0);
    HEAP32[$1042>>2] = 0;
   }
   $1043 = $56;
   $1044 = ((($1043)) + 32|0);
   $1045 = $57;
   $1046 = ($1044>>>0)<=($1045>>>0);
   if ($1046) {
    $1047 = $57;
    $1048 = ((($1047)) + -32|0);
    $58 = $1048;
    $1049 = $52;
    $1050 = ((($1049)) + 8|0);
    $1051 = $1050;
    $1052 = $1051;
    $1053 = HEAP32[$1052>>2]|0;
    $1054 = (($1051) + 4)|0;
    $1055 = $1054;
    $1056 = HEAP32[$1055>>2]|0;
    $1057 = $59;
    $1058 = $1057;
    HEAP32[$1058>>2] = $1053;
    $1059 = (($1057) + 4)|0;
    $1060 = $1059;
    HEAP32[$1060>>2] = $1056;
    $1061 = $52;
    $1062 = ((($1061)) + 16|0);
    $1063 = $1062;
    $1064 = $1063;
    $1065 = HEAP32[$1064>>2]|0;
    $1066 = (($1063) + 4)|0;
    $1067 = $1066;
    $1068 = HEAP32[$1067>>2]|0;
    $1069 = $60;
    $1070 = $1069;
    HEAP32[$1070>>2] = $1065;
    $1071 = (($1069) + 4)|0;
    $1072 = $1071;
    HEAP32[$1072>>2] = $1068;
    $1073 = $52;
    $1074 = ((($1073)) + 24|0);
    $1075 = $1074;
    $1076 = $1075;
    $1077 = HEAP32[$1076>>2]|0;
    $1078 = (($1075) + 4)|0;
    $1079 = $1078;
    $1080 = HEAP32[$1079>>2]|0;
    $1081 = $61;
    $1082 = $1081;
    HEAP32[$1082>>2] = $1077;
    $1083 = (($1081) + 4)|0;
    $1084 = $1083;
    HEAP32[$1084>>2] = $1080;
    $1085 = $52;
    $1086 = ((($1085)) + 32|0);
    $1087 = $1086;
    $1088 = $1087;
    $1089 = HEAP32[$1088>>2]|0;
    $1090 = (($1087) + 4)|0;
    $1091 = $1090;
    $1092 = HEAP32[$1091>>2]|0;
    $1093 = $62;
    $1094 = $1093;
    HEAP32[$1094>>2] = $1089;
    $1095 = (($1093) + 4)|0;
    $1096 = $1095;
    HEAP32[$1096>>2] = $1092;
    while(1) {
     $1097 = $59;
     $1098 = $1097;
     $1099 = HEAP32[$1098>>2]|0;
     $1100 = (($1097) + 4)|0;
     $1101 = $1100;
     $1102 = HEAP32[$1101>>2]|0;
     $1103 = $56;
     $1104 = $55;
     $25 = $1103;
     $26 = $1104;
     $1105 = $25;
     $1106 = $26;
     $22 = $1105;
     $23 = $1106;
     $24 = 1;
     $1107 = $24;
     $1108 = ($1107|0)==(1);
     $1109 = $23;
     $1110 = ($1109|0)==(1);
     $1111 = $22;
     if ($1108) {
      $1112 = (_XXH_read64($1111)|0);
      $1113 = tempRet0;
      if ($1110) {
       $1118 = $1112;$1121 = $1113;
      } else {
       $1114 = (_XXH_swap64($1112,$1113)|0);
       $1115 = tempRet0;
       $1118 = $1114;$1121 = $1115;
      }
      $1116 = $21;
      $1117 = $1116;
      HEAP32[$1117>>2] = $1118;
      $1119 = (($1116) + 4)|0;
      $1120 = $1119;
      HEAP32[$1120>>2] = $1121;
     } else {
      $1122 = $1111;
      $1123 = $1122;
      $1124 = HEAP32[$1123>>2]|0;
      $1125 = (($1122) + 4)|0;
      $1126 = $1125;
      $1127 = HEAP32[$1126>>2]|0;
      if ($1110) {
       $1132 = $1124;$1135 = $1127;
      } else {
       $1128 = (_XXH_swap64($1124,$1127)|0);
       $1129 = tempRet0;
       $1132 = $1128;$1135 = $1129;
      }
      $1130 = $21;
      $1131 = $1130;
      HEAP32[$1131>>2] = $1132;
      $1133 = (($1130) + 4)|0;
      $1134 = $1133;
      HEAP32[$1134>>2] = $1135;
     }
     $1136 = $21;
     $1137 = $1136;
     $1138 = HEAP32[$1137>>2]|0;
     $1139 = (($1136) + 4)|0;
     $1140 = $1139;
     $1141 = HEAP32[$1140>>2]|0;
     $1142 = (_XXH64_round($1099,$1102,$1138,$1141)|0);
     $1143 = tempRet0;
     $1144 = $59;
     $1145 = $1144;
     HEAP32[$1145>>2] = $1142;
     $1146 = (($1144) + 4)|0;
     $1147 = $1146;
     HEAP32[$1147>>2] = $1143;
     $1148 = $56;
     $1149 = ((($1148)) + 8|0);
     $56 = $1149;
     $1150 = $60;
     $1151 = $1150;
     $1152 = HEAP32[$1151>>2]|0;
     $1153 = (($1150) + 4)|0;
     $1154 = $1153;
     $1155 = HEAP32[$1154>>2]|0;
     $1156 = $56;
     $1157 = $55;
     $19 = $1156;
     $20 = $1157;
     $1158 = $19;
     $1159 = $20;
     $16 = $1158;
     $17 = $1159;
     $18 = 1;
     $1160 = $18;
     $1161 = ($1160|0)==(1);
     $1162 = $17;
     $1163 = ($1162|0)==(1);
     $1164 = $16;
     if ($1161) {
      $1165 = (_XXH_read64($1164)|0);
      $1166 = tempRet0;
      if ($1163) {
       $1171 = $1165;$1174 = $1166;
      } else {
       $1167 = (_XXH_swap64($1165,$1166)|0);
       $1168 = tempRet0;
       $1171 = $1167;$1174 = $1168;
      }
      $1169 = $15;
      $1170 = $1169;
      HEAP32[$1170>>2] = $1171;
      $1172 = (($1169) + 4)|0;
      $1173 = $1172;
      HEAP32[$1173>>2] = $1174;
     } else {
      $1175 = $1164;
      $1176 = $1175;
      $1177 = HEAP32[$1176>>2]|0;
      $1178 = (($1175) + 4)|0;
      $1179 = $1178;
      $1180 = HEAP32[$1179>>2]|0;
      if ($1163) {
       $1185 = $1177;$1188 = $1180;
      } else {
       $1181 = (_XXH_swap64($1177,$1180)|0);
       $1182 = tempRet0;
       $1185 = $1181;$1188 = $1182;
      }
      $1183 = $15;
      $1184 = $1183;
      HEAP32[$1184>>2] = $1185;
      $1186 = (($1183) + 4)|0;
      $1187 = $1186;
      HEAP32[$1187>>2] = $1188;
     }
     $1189 = $15;
     $1190 = $1189;
     $1191 = HEAP32[$1190>>2]|0;
     $1192 = (($1189) + 4)|0;
     $1193 = $1192;
     $1194 = HEAP32[$1193>>2]|0;
     $1195 = (_XXH64_round($1152,$1155,$1191,$1194)|0);
     $1196 = tempRet0;
     $1197 = $60;
     $1198 = $1197;
     HEAP32[$1198>>2] = $1195;
     $1199 = (($1197) + 4)|0;
     $1200 = $1199;
     HEAP32[$1200>>2] = $1196;
     $1201 = $56;
     $1202 = ((($1201)) + 8|0);
     $56 = $1202;
     $1203 = $61;
     $1204 = $1203;
     $1205 = HEAP32[$1204>>2]|0;
     $1206 = (($1203) + 4)|0;
     $1207 = $1206;
     $1208 = HEAP32[$1207>>2]|0;
     $1209 = $56;
     $1210 = $55;
     $13 = $1209;
     $14 = $1210;
     $1211 = $13;
     $1212 = $14;
     $10 = $1211;
     $11 = $1212;
     $12 = 1;
     $1213 = $12;
     $1214 = ($1213|0)==(1);
     $1215 = $11;
     $1216 = ($1215|0)==(1);
     $1217 = $10;
     if ($1214) {
      $1218 = (_XXH_read64($1217)|0);
      $1219 = tempRet0;
      if ($1216) {
       $1224 = $1218;$1227 = $1219;
      } else {
       $1220 = (_XXH_swap64($1218,$1219)|0);
       $1221 = tempRet0;
       $1224 = $1220;$1227 = $1221;
      }
      $1222 = $9;
      $1223 = $1222;
      HEAP32[$1223>>2] = $1224;
      $1225 = (($1222) + 4)|0;
      $1226 = $1225;
      HEAP32[$1226>>2] = $1227;
     } else {
      $1228 = $1217;
      $1229 = $1228;
      $1230 = HEAP32[$1229>>2]|0;
      $1231 = (($1228) + 4)|0;
      $1232 = $1231;
      $1233 = HEAP32[$1232>>2]|0;
      if ($1216) {
       $1238 = $1230;$1241 = $1233;
      } else {
       $1234 = (_XXH_swap64($1230,$1233)|0);
       $1235 = tempRet0;
       $1238 = $1234;$1241 = $1235;
      }
      $1236 = $9;
      $1237 = $1236;
      HEAP32[$1237>>2] = $1238;
      $1239 = (($1236) + 4)|0;
      $1240 = $1239;
      HEAP32[$1240>>2] = $1241;
     }
     $1242 = $9;
     $1243 = $1242;
     $1244 = HEAP32[$1243>>2]|0;
     $1245 = (($1242) + 4)|0;
     $1246 = $1245;
     $1247 = HEAP32[$1246>>2]|0;
     $1248 = (_XXH64_round($1205,$1208,$1244,$1247)|0);
     $1249 = tempRet0;
     $1250 = $61;
     $1251 = $1250;
     HEAP32[$1251>>2] = $1248;
     $1252 = (($1250) + 4)|0;
     $1253 = $1252;
     HEAP32[$1253>>2] = $1249;
     $1254 = $56;
     $1255 = ((($1254)) + 8|0);
     $56 = $1255;
     $1256 = $62;
     $1257 = $1256;
     $1258 = HEAP32[$1257>>2]|0;
     $1259 = (($1256) + 4)|0;
     $1260 = $1259;
     $1261 = HEAP32[$1260>>2]|0;
     $1262 = $56;
     $1263 = $55;
     $7 = $1262;
     $8 = $1263;
     $1264 = $7;
     $1265 = $8;
     $4 = $1264;
     $5 = $1265;
     $6 = 1;
     $1266 = $6;
     $1267 = ($1266|0)==(1);
     $1268 = $5;
     $1269 = ($1268|0)==(1);
     $1270 = $4;
     if ($1267) {
      $1271 = (_XXH_read64($1270)|0);
      $1272 = tempRet0;
      if ($1269) {
       $1277 = $1271;$1280 = $1272;
      } else {
       $1273 = (_XXH_swap64($1271,$1272)|0);
       $1274 = tempRet0;
       $1277 = $1273;$1280 = $1274;
      }
      $1275 = $3;
      $1276 = $1275;
      HEAP32[$1276>>2] = $1277;
      $1278 = (($1275) + 4)|0;
      $1279 = $1278;
      HEAP32[$1279>>2] = $1280;
     } else {
      $1281 = $1270;
      $1282 = $1281;
      $1283 = HEAP32[$1282>>2]|0;
      $1284 = (($1281) + 4)|0;
      $1285 = $1284;
      $1286 = HEAP32[$1285>>2]|0;
      if ($1269) {
       $1291 = $1283;$1294 = $1286;
      } else {
       $1287 = (_XXH_swap64($1283,$1286)|0);
       $1288 = tempRet0;
       $1291 = $1287;$1294 = $1288;
      }
      $1289 = $3;
      $1290 = $1289;
      HEAP32[$1290>>2] = $1291;
      $1292 = (($1289) + 4)|0;
      $1293 = $1292;
      HEAP32[$1293>>2] = $1294;
     }
     $1295 = $3;
     $1296 = $1295;
     $1297 = HEAP32[$1296>>2]|0;
     $1298 = (($1295) + 4)|0;
     $1299 = $1298;
     $1300 = HEAP32[$1299>>2]|0;
     $1301 = (_XXH64_round($1258,$1261,$1297,$1300)|0);
     $1302 = tempRet0;
     $1303 = $62;
     $1304 = $1303;
     HEAP32[$1304>>2] = $1301;
     $1305 = (($1303) + 4)|0;
     $1306 = $1305;
     HEAP32[$1306>>2] = $1302;
     $1307 = $56;
     $1308 = ((($1307)) + 8|0);
     $56 = $1308;
     $1309 = $56;
     $1310 = $58;
     $1311 = ($1309>>>0)<=($1310>>>0);
     if (!($1311)) {
      break;
     }
    }
    $1312 = $59;
    $1313 = $1312;
    $1314 = HEAP32[$1313>>2]|0;
    $1315 = (($1312) + 4)|0;
    $1316 = $1315;
    $1317 = HEAP32[$1316>>2]|0;
    $1318 = $52;
    $1319 = ((($1318)) + 8|0);
    $1320 = $1319;
    $1321 = $1320;
    HEAP32[$1321>>2] = $1314;
    $1322 = (($1320) + 4)|0;
    $1323 = $1322;
    HEAP32[$1323>>2] = $1317;
    $1324 = $60;
    $1325 = $1324;
    $1326 = HEAP32[$1325>>2]|0;
    $1327 = (($1324) + 4)|0;
    $1328 = $1327;
    $1329 = HEAP32[$1328>>2]|0;
    $1330 = $52;
    $1331 = ((($1330)) + 16|0);
    $1332 = $1331;
    $1333 = $1332;
    HEAP32[$1333>>2] = $1326;
    $1334 = (($1332) + 4)|0;
    $1335 = $1334;
    HEAP32[$1335>>2] = $1329;
    $1336 = $61;
    $1337 = $1336;
    $1338 = HEAP32[$1337>>2]|0;
    $1339 = (($1336) + 4)|0;
    $1340 = $1339;
    $1341 = HEAP32[$1340>>2]|0;
    $1342 = $52;
    $1343 = ((($1342)) + 24|0);
    $1344 = $1343;
    $1345 = $1344;
    HEAP32[$1345>>2] = $1338;
    $1346 = (($1344) + 4)|0;
    $1347 = $1346;
    HEAP32[$1347>>2] = $1341;
    $1348 = $62;
    $1349 = $1348;
    $1350 = HEAP32[$1349>>2]|0;
    $1351 = (($1348) + 4)|0;
    $1352 = $1351;
    $1353 = HEAP32[$1352>>2]|0;
    $1354 = $52;
    $1355 = ((($1354)) + 32|0);
    $1356 = $1355;
    $1357 = $1356;
    HEAP32[$1357>>2] = $1350;
    $1358 = (($1356) + 4)|0;
    $1359 = $1358;
    HEAP32[$1359>>2] = $1353;
   }
   $1360 = $56;
   $1361 = $57;
   $1362 = ($1360>>>0)<($1361>>>0);
   if ($1362) {
    $1363 = $52;
    $1364 = ((($1363)) + 40|0);
    $1365 = $56;
    $1366 = $57;
    $1367 = $56;
    $1368 = $1366;
    $1369 = $1367;
    $1370 = (($1368) - ($1369))|0;
    (_XXH_memcpy($1364,$1365,$1370)|0);
    $1371 = $57;
    $1372 = $56;
    $1373 = $1371;
    $1374 = $1372;
    $1375 = (($1373) - ($1374))|0;
    $1376 = $52;
    $1377 = ((($1376)) + 72|0);
    HEAP32[$1377>>2] = $1375;
   }
   $51 = 0;
  }
  $1378 = $51;
  $123 = $1378;
  $1379 = $123;
  STACKTOP = sp;return ($1379|0);
 }
 return (0)|0;
}
function _ZSTD_XXH64_digest($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0;
 var $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0;
 var $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0;
 var $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0;
 var $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0;
 var $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0;
 var $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0;
 var $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0;
 var $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $7 = sp + 112|0;
 $17 = sp + 104|0;
 $18 = sp + 96|0;
 $19 = sp + 88|0;
 $20 = sp + 80|0;
 $21 = sp + 72|0;
 $22 = sp + 64|0;
 $29 = sp + 56|0;
 $39 = sp + 48|0;
 $40 = sp + 40|0;
 $41 = sp + 32|0;
 $42 = sp + 24|0;
 $43 = sp + 16|0;
 $44 = sp + 8|0;
 $45 = sp;
 $46 = $0;
 $48 = HEAP8[16]|0;
 $49 = $48 << 24 >> 24;
 $47 = $49;
 $50 = $47;
 $51 = ($50|0)==(1);
 $52 = $46;
 if ($51) {
  $35 = $52;
  $36 = 1;
  $53 = $35;
  $54 = ((($53)) + 40|0);
  $37 = $54;
  $55 = $35;
  $56 = ((($55)) + 40|0);
  $57 = $35;
  $58 = ((($57)) + 72|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = (($56) + ($59)|0);
  $38 = $60;
  $61 = $35;
  $62 = $61;
  $63 = $62;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($62) + 4)|0;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67>>>0)>(0);
  $69 = ($64>>>0)>=(32);
  $70 = ($67|0)==(0);
  $71 = $70 & $69;
  $72 = $68 | $71;
  $73 = $35;
  if ($72) {
   $74 = ((($73)) + 8|0);
   $75 = $74;
   $76 = $75;
   $77 = HEAP32[$76>>2]|0;
   $78 = (($75) + 4)|0;
   $79 = $78;
   $80 = HEAP32[$79>>2]|0;
   $81 = $40;
   $82 = $81;
   HEAP32[$82>>2] = $77;
   $83 = (($81) + 4)|0;
   $84 = $83;
   HEAP32[$84>>2] = $80;
   $85 = $35;
   $86 = ((($85)) + 16|0);
   $87 = $86;
   $88 = $87;
   $89 = HEAP32[$88>>2]|0;
   $90 = (($87) + 4)|0;
   $91 = $90;
   $92 = HEAP32[$91>>2]|0;
   $93 = $41;
   $94 = $93;
   HEAP32[$94>>2] = $89;
   $95 = (($93) + 4)|0;
   $96 = $95;
   HEAP32[$96>>2] = $92;
   $97 = $35;
   $98 = ((($97)) + 24|0);
   $99 = $98;
   $100 = $99;
   $101 = HEAP32[$100>>2]|0;
   $102 = (($99) + 4)|0;
   $103 = $102;
   $104 = HEAP32[$103>>2]|0;
   $105 = $42;
   $106 = $105;
   HEAP32[$106>>2] = $101;
   $107 = (($105) + 4)|0;
   $108 = $107;
   HEAP32[$108>>2] = $104;
   $109 = $35;
   $110 = ((($109)) + 32|0);
   $111 = $110;
   $112 = $111;
   $113 = HEAP32[$112>>2]|0;
   $114 = (($111) + 4)|0;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = $43;
   $118 = $117;
   HEAP32[$118>>2] = $113;
   $119 = (($117) + 4)|0;
   $120 = $119;
   HEAP32[$120>>2] = $116;
   $121 = $40;
   $122 = $121;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($121) + 4)|0;
   $125 = $124;
   $126 = HEAP32[$125>>2]|0;
   $127 = (_bitshift64Shl(($123|0),($126|0),1)|0);
   $128 = tempRet0;
   $129 = $40;
   $130 = $129;
   $131 = HEAP32[$130>>2]|0;
   $132 = (($129) + 4)|0;
   $133 = $132;
   $134 = HEAP32[$133>>2]|0;
   $135 = (_bitshift64Lshr(($131|0),($134|0),63)|0);
   $136 = tempRet0;
   $137 = $127 | $135;
   $138 = $128 | $136;
   $139 = $41;
   $140 = $139;
   $141 = HEAP32[$140>>2]|0;
   $142 = (($139) + 4)|0;
   $143 = $142;
   $144 = HEAP32[$143>>2]|0;
   $145 = (_bitshift64Shl(($141|0),($144|0),7)|0);
   $146 = tempRet0;
   $147 = $41;
   $148 = $147;
   $149 = HEAP32[$148>>2]|0;
   $150 = (($147) + 4)|0;
   $151 = $150;
   $152 = HEAP32[$151>>2]|0;
   $153 = (_bitshift64Lshr(($149|0),($152|0),57)|0);
   $154 = tempRet0;
   $155 = $145 | $153;
   $156 = $146 | $154;
   $157 = (_i64Add(($137|0),($138|0),($155|0),($156|0))|0);
   $158 = tempRet0;
   $159 = $42;
   $160 = $159;
   $161 = HEAP32[$160>>2]|0;
   $162 = (($159) + 4)|0;
   $163 = $162;
   $164 = HEAP32[$163>>2]|0;
   $165 = (_bitshift64Shl(($161|0),($164|0),12)|0);
   $166 = tempRet0;
   $167 = $42;
   $168 = $167;
   $169 = HEAP32[$168>>2]|0;
   $170 = (($167) + 4)|0;
   $171 = $170;
   $172 = HEAP32[$171>>2]|0;
   $173 = (_bitshift64Lshr(($169|0),($172|0),52)|0);
   $174 = tempRet0;
   $175 = $165 | $173;
   $176 = $166 | $174;
   $177 = (_i64Add(($157|0),($158|0),($175|0),($176|0))|0);
   $178 = tempRet0;
   $179 = $43;
   $180 = $179;
   $181 = HEAP32[$180>>2]|0;
   $182 = (($179) + 4)|0;
   $183 = $182;
   $184 = HEAP32[$183>>2]|0;
   $185 = (_bitshift64Shl(($181|0),($184|0),18)|0);
   $186 = tempRet0;
   $187 = $43;
   $188 = $187;
   $189 = HEAP32[$188>>2]|0;
   $190 = (($187) + 4)|0;
   $191 = $190;
   $192 = HEAP32[$191>>2]|0;
   $193 = (_bitshift64Lshr(($189|0),($192|0),46)|0);
   $194 = tempRet0;
   $195 = $185 | $193;
   $196 = $186 | $194;
   $197 = (_i64Add(($177|0),($178|0),($195|0),($196|0))|0);
   $198 = tempRet0;
   $199 = $39;
   $200 = $199;
   HEAP32[$200>>2] = $197;
   $201 = (($199) + 4)|0;
   $202 = $201;
   HEAP32[$202>>2] = $198;
   $203 = $39;
   $204 = $203;
   $205 = HEAP32[$204>>2]|0;
   $206 = (($203) + 4)|0;
   $207 = $206;
   $208 = HEAP32[$207>>2]|0;
   $209 = $40;
   $210 = $209;
   $211 = HEAP32[$210>>2]|0;
   $212 = (($209) + 4)|0;
   $213 = $212;
   $214 = HEAP32[$213>>2]|0;
   $215 = (_XXH64_mergeRound($205,$208,$211,$214)|0);
   $216 = tempRet0;
   $217 = $39;
   $218 = $217;
   HEAP32[$218>>2] = $215;
   $219 = (($217) + 4)|0;
   $220 = $219;
   HEAP32[$220>>2] = $216;
   $221 = $39;
   $222 = $221;
   $223 = HEAP32[$222>>2]|0;
   $224 = (($221) + 4)|0;
   $225 = $224;
   $226 = HEAP32[$225>>2]|0;
   $227 = $41;
   $228 = $227;
   $229 = HEAP32[$228>>2]|0;
   $230 = (($227) + 4)|0;
   $231 = $230;
   $232 = HEAP32[$231>>2]|0;
   $233 = (_XXH64_mergeRound($223,$226,$229,$232)|0);
   $234 = tempRet0;
   $235 = $39;
   $236 = $235;
   HEAP32[$236>>2] = $233;
   $237 = (($235) + 4)|0;
   $238 = $237;
   HEAP32[$238>>2] = $234;
   $239 = $39;
   $240 = $239;
   $241 = HEAP32[$240>>2]|0;
   $242 = (($239) + 4)|0;
   $243 = $242;
   $244 = HEAP32[$243>>2]|0;
   $245 = $42;
   $246 = $245;
   $247 = HEAP32[$246>>2]|0;
   $248 = (($245) + 4)|0;
   $249 = $248;
   $250 = HEAP32[$249>>2]|0;
   $251 = (_XXH64_mergeRound($241,$244,$247,$250)|0);
   $252 = tempRet0;
   $253 = $39;
   $254 = $253;
   HEAP32[$254>>2] = $251;
   $255 = (($253) + 4)|0;
   $256 = $255;
   HEAP32[$256>>2] = $252;
   $257 = $39;
   $258 = $257;
   $259 = HEAP32[$258>>2]|0;
   $260 = (($257) + 4)|0;
   $261 = $260;
   $262 = HEAP32[$261>>2]|0;
   $263 = $43;
   $264 = $263;
   $265 = HEAP32[$264>>2]|0;
   $266 = (($263) + 4)|0;
   $267 = $266;
   $268 = HEAP32[$267>>2]|0;
   $269 = (_XXH64_mergeRound($259,$262,$265,$268)|0);
   $270 = tempRet0;
   $271 = $39;
   $272 = $271;
   HEAP32[$272>>2] = $269;
   $273 = (($271) + 4)|0;
   $274 = $273;
   HEAP32[$274>>2] = $270;
  } else {
   $275 = ((($73)) + 24|0);
   $276 = $275;
   $277 = $276;
   $278 = HEAP32[$277>>2]|0;
   $279 = (($276) + 4)|0;
   $280 = $279;
   $281 = HEAP32[$280>>2]|0;
   $282 = (_i64Add(($278|0),($281|0),374761413,668265263)|0);
   $283 = tempRet0;
   $284 = $39;
   $285 = $284;
   HEAP32[$285>>2] = $282;
   $286 = (($284) + 4)|0;
   $287 = $286;
   HEAP32[$287>>2] = $283;
  }
  $288 = $35;
  $289 = $288;
  $290 = $289;
  $291 = HEAP32[$290>>2]|0;
  $292 = (($289) + 4)|0;
  $293 = $292;
  $294 = HEAP32[$293>>2]|0;
  $295 = $39;
  $296 = $295;
  $297 = HEAP32[$296>>2]|0;
  $298 = (($295) + 4)|0;
  $299 = $298;
  $300 = HEAP32[$299>>2]|0;
  $301 = (_i64Add(($297|0),($300|0),($291|0),($294|0))|0);
  $302 = tempRet0;
  $303 = $39;
  $304 = $303;
  HEAP32[$304>>2] = $301;
  $305 = (($303) + 4)|0;
  $306 = $305;
  HEAP32[$306>>2] = $302;
  while(1) {
   $307 = $37;
   $308 = ((($307)) + 8|0);
   $309 = $38;
   $310 = ($308>>>0)<=($309>>>0);
   $311 = $37;
   if (!($310)) {
    break;
   }
   $312 = $36;
   $33 = $311;
   $34 = $312;
   $313 = $33;
   $314 = $34;
   $30 = $313;
   $31 = $314;
   $32 = 1;
   $315 = $32;
   $316 = ($315|0)==(1);
   $317 = $31;
   $318 = ($317|0)==(1);
   $319 = $30;
   if ($316) {
    $320 = (_XXH_read64($319)|0);
    $321 = tempRet0;
    if ($318) {
     $326 = $320;$329 = $321;
    } else {
     $322 = (_XXH_swap64($320,$321)|0);
     $323 = tempRet0;
     $326 = $322;$329 = $323;
    }
    $324 = $29;
    $325 = $324;
    HEAP32[$325>>2] = $326;
    $327 = (($324) + 4)|0;
    $328 = $327;
    HEAP32[$328>>2] = $329;
   } else {
    $330 = $319;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    $333 = (($330) + 4)|0;
    $334 = $333;
    $335 = HEAP32[$334>>2]|0;
    if ($318) {
     $340 = $332;$343 = $335;
    } else {
     $336 = (_XXH_swap64($332,$335)|0);
     $337 = tempRet0;
     $340 = $336;$343 = $337;
    }
    $338 = $29;
    $339 = $338;
    HEAP32[$339>>2] = $340;
    $341 = (($338) + 4)|0;
    $342 = $341;
    HEAP32[$342>>2] = $343;
   }
   $344 = $29;
   $345 = $344;
   $346 = HEAP32[$345>>2]|0;
   $347 = (($344) + 4)|0;
   $348 = $347;
   $349 = HEAP32[$348>>2]|0;
   $350 = (_XXH64_round(0,0,$346,$349)|0);
   $351 = tempRet0;
   $352 = $44;
   $353 = $352;
   HEAP32[$353>>2] = $350;
   $354 = (($352) + 4)|0;
   $355 = $354;
   HEAP32[$355>>2] = $351;
   $356 = $44;
   $357 = $356;
   $358 = HEAP32[$357>>2]|0;
   $359 = (($356) + 4)|0;
   $360 = $359;
   $361 = HEAP32[$360>>2]|0;
   $362 = $39;
   $363 = $362;
   $364 = HEAP32[$363>>2]|0;
   $365 = (($362) + 4)|0;
   $366 = $365;
   $367 = HEAP32[$366>>2]|0;
   $368 = $364 ^ $358;
   $369 = $367 ^ $361;
   $370 = $39;
   $371 = $370;
   HEAP32[$371>>2] = $368;
   $372 = (($370) + 4)|0;
   $373 = $372;
   HEAP32[$373>>2] = $369;
   $374 = $39;
   $375 = $374;
   $376 = HEAP32[$375>>2]|0;
   $377 = (($374) + 4)|0;
   $378 = $377;
   $379 = HEAP32[$378>>2]|0;
   $380 = (_bitshift64Shl(($376|0),($379|0),27)|0);
   $381 = tempRet0;
   $382 = $39;
   $383 = $382;
   $384 = HEAP32[$383>>2]|0;
   $385 = (($382) + 4)|0;
   $386 = $385;
   $387 = HEAP32[$386>>2]|0;
   $388 = (_bitshift64Lshr(($384|0),($387|0),37)|0);
   $389 = tempRet0;
   $390 = $380 | $388;
   $391 = $381 | $389;
   $392 = (___muldi3(($390|0),($391|0),-2048144761,-1640531535)|0);
   $393 = tempRet0;
   $394 = (_i64Add(($392|0),($393|0),-1028477341,-2048144777)|0);
   $395 = tempRet0;
   $396 = $39;
   $397 = $396;
   HEAP32[$397>>2] = $394;
   $398 = (($396) + 4)|0;
   $399 = $398;
   HEAP32[$399>>2] = $395;
   $400 = $37;
   $401 = ((($400)) + 8|0);
   $37 = $401;
  }
  $402 = ((($311)) + 4|0);
  $403 = $38;
  $404 = ($402>>>0)<=($403>>>0);
  if ($404) {
   $405 = $37;
   $406 = $36;
   $27 = $405;
   $28 = $406;
   $407 = $27;
   $408 = $28;
   $24 = $407;
   $25 = $408;
   $26 = 1;
   $409 = $26;
   $410 = ($409|0)==(1);
   $411 = $25;
   $412 = ($411|0)==(1);
   $413 = $24;
   if ($410) {
    $414 = (_XXH_read32($413)|0);
    if ($412) {
     $416 = $414;
    } else {
     $415 = (_XXH_swap32($414)|0);
     $416 = $415;
    }
    $23 = $416;
   } else {
    $417 = HEAP32[$413>>2]|0;
    if ($412) {
     $419 = $417;
    } else {
     $418 = (_XXH_swap32($417)|0);
     $419 = $418;
    }
    $23 = $419;
   }
   $420 = $23;
   $421 = (___muldi3(($420|0),0,-2048144761,-1640531535)|0);
   $422 = tempRet0;
   $423 = $39;
   $424 = $423;
   $425 = HEAP32[$424>>2]|0;
   $426 = (($423) + 4)|0;
   $427 = $426;
   $428 = HEAP32[$427>>2]|0;
   $429 = $425 ^ $421;
   $430 = $428 ^ $422;
   $431 = $39;
   $432 = $431;
   HEAP32[$432>>2] = $429;
   $433 = (($431) + 4)|0;
   $434 = $433;
   HEAP32[$434>>2] = $430;
   $435 = $39;
   $436 = $435;
   $437 = HEAP32[$436>>2]|0;
   $438 = (($435) + 4)|0;
   $439 = $438;
   $440 = HEAP32[$439>>2]|0;
   $441 = (_bitshift64Shl(($437|0),($440|0),23)|0);
   $442 = tempRet0;
   $443 = $39;
   $444 = $443;
   $445 = HEAP32[$444>>2]|0;
   $446 = (($443) + 4)|0;
   $447 = $446;
   $448 = HEAP32[$447>>2]|0;
   $449 = (_bitshift64Lshr(($445|0),($448|0),41)|0);
   $450 = tempRet0;
   $451 = $441 | $449;
   $452 = $442 | $450;
   $453 = (___muldi3(($451|0),($452|0),668265295,-1028477379)|0);
   $454 = tempRet0;
   $455 = (_i64Add(($453|0),($454|0),-1640531463,374761393)|0);
   $456 = tempRet0;
   $457 = $39;
   $458 = $457;
   HEAP32[$458>>2] = $455;
   $459 = (($457) + 4)|0;
   $460 = $459;
   HEAP32[$460>>2] = $456;
   $461 = $37;
   $462 = ((($461)) + 4|0);
   $37 = $462;
  }
  while(1) {
   $463 = $37;
   $464 = $38;
   $465 = ($463>>>0)<($464>>>0);
   if (!($465)) {
    break;
   }
   $466 = $37;
   $467 = HEAP8[$466>>0]|0;
   $468 = $467&255;
   $469 = (___muldi3(($468|0),0,374761413,668265263)|0);
   $470 = tempRet0;
   $471 = $39;
   $472 = $471;
   $473 = HEAP32[$472>>2]|0;
   $474 = (($471) + 4)|0;
   $475 = $474;
   $476 = HEAP32[$475>>2]|0;
   $477 = $473 ^ $469;
   $478 = $476 ^ $470;
   $479 = $39;
   $480 = $479;
   HEAP32[$480>>2] = $477;
   $481 = (($479) + 4)|0;
   $482 = $481;
   HEAP32[$482>>2] = $478;
   $483 = $39;
   $484 = $483;
   $485 = HEAP32[$484>>2]|0;
   $486 = (($483) + 4)|0;
   $487 = $486;
   $488 = HEAP32[$487>>2]|0;
   $489 = (_bitshift64Shl(($485|0),($488|0),11)|0);
   $490 = tempRet0;
   $491 = $39;
   $492 = $491;
   $493 = HEAP32[$492>>2]|0;
   $494 = (($491) + 4)|0;
   $495 = $494;
   $496 = HEAP32[$495>>2]|0;
   $497 = (_bitshift64Lshr(($493|0),($496|0),53)|0);
   $498 = tempRet0;
   $499 = $489 | $497;
   $500 = $490 | $498;
   $501 = (___muldi3(($499|0),($500|0),-2048144761,-1640531535)|0);
   $502 = tempRet0;
   $503 = $39;
   $504 = $503;
   HEAP32[$504>>2] = $501;
   $505 = (($503) + 4)|0;
   $506 = $505;
   HEAP32[$506>>2] = $502;
   $507 = $37;
   $508 = ((($507)) + 1|0);
   $37 = $508;
  }
  $509 = $39;
  $510 = $509;
  $511 = HEAP32[$510>>2]|0;
  $512 = (($509) + 4)|0;
  $513 = $512;
  $514 = HEAP32[$513>>2]|0;
  $515 = (_bitshift64Lshr(($511|0),($514|0),33)|0);
  $516 = tempRet0;
  $517 = $39;
  $518 = $517;
  $519 = HEAP32[$518>>2]|0;
  $520 = (($517) + 4)|0;
  $521 = $520;
  $522 = HEAP32[$521>>2]|0;
  $523 = $519 ^ $515;
  $524 = $522 ^ $516;
  $525 = $39;
  $526 = $525;
  HEAP32[$526>>2] = $523;
  $527 = (($525) + 4)|0;
  $528 = $527;
  HEAP32[$528>>2] = $524;
  $529 = $39;
  $530 = $529;
  $531 = HEAP32[$530>>2]|0;
  $532 = (($529) + 4)|0;
  $533 = $532;
  $534 = HEAP32[$533>>2]|0;
  $535 = (___muldi3(($531|0),($534|0),668265295,-1028477379)|0);
  $536 = tempRet0;
  $537 = $39;
  $538 = $537;
  HEAP32[$538>>2] = $535;
  $539 = (($537) + 4)|0;
  $540 = $539;
  HEAP32[$540>>2] = $536;
  $541 = $39;
  $542 = $541;
  $543 = HEAP32[$542>>2]|0;
  $544 = (($541) + 4)|0;
  $545 = $544;
  $546 = HEAP32[$545>>2]|0;
  $547 = (_bitshift64Lshr(($543|0),($546|0),29)|0);
  $548 = tempRet0;
  $549 = $39;
  $550 = $549;
  $551 = HEAP32[$550>>2]|0;
  $552 = (($549) + 4)|0;
  $553 = $552;
  $554 = HEAP32[$553>>2]|0;
  $555 = $551 ^ $547;
  $556 = $554 ^ $548;
  $557 = $39;
  $558 = $557;
  HEAP32[$558>>2] = $555;
  $559 = (($557) + 4)|0;
  $560 = $559;
  HEAP32[$560>>2] = $556;
  $561 = $39;
  $562 = $561;
  $563 = HEAP32[$562>>2]|0;
  $564 = (($561) + 4)|0;
  $565 = $564;
  $566 = HEAP32[$565>>2]|0;
  $567 = (___muldi3(($563|0),($566|0),-1640531463,374761393)|0);
  $568 = tempRet0;
  $569 = $39;
  $570 = $569;
  HEAP32[$570>>2] = $567;
  $571 = (($569) + 4)|0;
  $572 = $571;
  HEAP32[$572>>2] = $568;
  $573 = $39;
  $574 = $573;
  $575 = HEAP32[$574>>2]|0;
  $576 = (($573) + 4)|0;
  $577 = $576;
  $578 = HEAP32[$577>>2]|0;
  $579 = $39;
  $580 = $579;
  $581 = HEAP32[$580>>2]|0;
  $582 = (($579) + 4)|0;
  $583 = $582;
  $584 = HEAP32[$583>>2]|0;
  $585 = $581 ^ $578;
  $586 = $39;
  $587 = $586;
  HEAP32[$587>>2] = $585;
  $588 = (($586) + 4)|0;
  $589 = $588;
  HEAP32[$589>>2] = $584;
  $590 = $39;
  $591 = $590;
  $592 = HEAP32[$591>>2]|0;
  $593 = (($590) + 4)|0;
  $594 = $593;
  $595 = HEAP32[$594>>2]|0;
  $596 = $45;
  $597 = $596;
  HEAP32[$597>>2] = $592;
  $598 = (($596) + 4)|0;
  $599 = $598;
  HEAP32[$599>>2] = $595;
  $1147 = $45;
  $1148 = $1147;
  $1149 = HEAP32[$1148>>2]|0;
  $1150 = (($1147) + 4)|0;
  $1151 = $1150;
  $1152 = HEAP32[$1151>>2]|0;
  tempRet0 = ($1152);
  STACKTOP = sp;return ($1149|0);
 } else {
  $13 = $52;
  $14 = 0;
  $600 = $13;
  $601 = ((($600)) + 40|0);
  $15 = $601;
  $602 = $13;
  $603 = ((($602)) + 40|0);
  $604 = $13;
  $605 = ((($604)) + 72|0);
  $606 = HEAP32[$605>>2]|0;
  $607 = (($603) + ($606)|0);
  $16 = $607;
  $608 = $13;
  $609 = $608;
  $610 = $609;
  $611 = HEAP32[$610>>2]|0;
  $612 = (($609) + 4)|0;
  $613 = $612;
  $614 = HEAP32[$613>>2]|0;
  $615 = ($614>>>0)>(0);
  $616 = ($611>>>0)>=(32);
  $617 = ($614|0)==(0);
  $618 = $617 & $616;
  $619 = $615 | $618;
  $620 = $13;
  if ($619) {
   $621 = ((($620)) + 8|0);
   $622 = $621;
   $623 = $622;
   $624 = HEAP32[$623>>2]|0;
   $625 = (($622) + 4)|0;
   $626 = $625;
   $627 = HEAP32[$626>>2]|0;
   $628 = $18;
   $629 = $628;
   HEAP32[$629>>2] = $624;
   $630 = (($628) + 4)|0;
   $631 = $630;
   HEAP32[$631>>2] = $627;
   $632 = $13;
   $633 = ((($632)) + 16|0);
   $634 = $633;
   $635 = $634;
   $636 = HEAP32[$635>>2]|0;
   $637 = (($634) + 4)|0;
   $638 = $637;
   $639 = HEAP32[$638>>2]|0;
   $640 = $19;
   $641 = $640;
   HEAP32[$641>>2] = $636;
   $642 = (($640) + 4)|0;
   $643 = $642;
   HEAP32[$643>>2] = $639;
   $644 = $13;
   $645 = ((($644)) + 24|0);
   $646 = $645;
   $647 = $646;
   $648 = HEAP32[$647>>2]|0;
   $649 = (($646) + 4)|0;
   $650 = $649;
   $651 = HEAP32[$650>>2]|0;
   $652 = $20;
   $653 = $652;
   HEAP32[$653>>2] = $648;
   $654 = (($652) + 4)|0;
   $655 = $654;
   HEAP32[$655>>2] = $651;
   $656 = $13;
   $657 = ((($656)) + 32|0);
   $658 = $657;
   $659 = $658;
   $660 = HEAP32[$659>>2]|0;
   $661 = (($658) + 4)|0;
   $662 = $661;
   $663 = HEAP32[$662>>2]|0;
   $664 = $21;
   $665 = $664;
   HEAP32[$665>>2] = $660;
   $666 = (($664) + 4)|0;
   $667 = $666;
   HEAP32[$667>>2] = $663;
   $668 = $18;
   $669 = $668;
   $670 = HEAP32[$669>>2]|0;
   $671 = (($668) + 4)|0;
   $672 = $671;
   $673 = HEAP32[$672>>2]|0;
   $674 = (_bitshift64Shl(($670|0),($673|0),1)|0);
   $675 = tempRet0;
   $676 = $18;
   $677 = $676;
   $678 = HEAP32[$677>>2]|0;
   $679 = (($676) + 4)|0;
   $680 = $679;
   $681 = HEAP32[$680>>2]|0;
   $682 = (_bitshift64Lshr(($678|0),($681|0),63)|0);
   $683 = tempRet0;
   $684 = $674 | $682;
   $685 = $675 | $683;
   $686 = $19;
   $687 = $686;
   $688 = HEAP32[$687>>2]|0;
   $689 = (($686) + 4)|0;
   $690 = $689;
   $691 = HEAP32[$690>>2]|0;
   $692 = (_bitshift64Shl(($688|0),($691|0),7)|0);
   $693 = tempRet0;
   $694 = $19;
   $695 = $694;
   $696 = HEAP32[$695>>2]|0;
   $697 = (($694) + 4)|0;
   $698 = $697;
   $699 = HEAP32[$698>>2]|0;
   $700 = (_bitshift64Lshr(($696|0),($699|0),57)|0);
   $701 = tempRet0;
   $702 = $692 | $700;
   $703 = $693 | $701;
   $704 = (_i64Add(($684|0),($685|0),($702|0),($703|0))|0);
   $705 = tempRet0;
   $706 = $20;
   $707 = $706;
   $708 = HEAP32[$707>>2]|0;
   $709 = (($706) + 4)|0;
   $710 = $709;
   $711 = HEAP32[$710>>2]|0;
   $712 = (_bitshift64Shl(($708|0),($711|0),12)|0);
   $713 = tempRet0;
   $714 = $20;
   $715 = $714;
   $716 = HEAP32[$715>>2]|0;
   $717 = (($714) + 4)|0;
   $718 = $717;
   $719 = HEAP32[$718>>2]|0;
   $720 = (_bitshift64Lshr(($716|0),($719|0),52)|0);
   $721 = tempRet0;
   $722 = $712 | $720;
   $723 = $713 | $721;
   $724 = (_i64Add(($704|0),($705|0),($722|0),($723|0))|0);
   $725 = tempRet0;
   $726 = $21;
   $727 = $726;
   $728 = HEAP32[$727>>2]|0;
   $729 = (($726) + 4)|0;
   $730 = $729;
   $731 = HEAP32[$730>>2]|0;
   $732 = (_bitshift64Shl(($728|0),($731|0),18)|0);
   $733 = tempRet0;
   $734 = $21;
   $735 = $734;
   $736 = HEAP32[$735>>2]|0;
   $737 = (($734) + 4)|0;
   $738 = $737;
   $739 = HEAP32[$738>>2]|0;
   $740 = (_bitshift64Lshr(($736|0),($739|0),46)|0);
   $741 = tempRet0;
   $742 = $732 | $740;
   $743 = $733 | $741;
   $744 = (_i64Add(($724|0),($725|0),($742|0),($743|0))|0);
   $745 = tempRet0;
   $746 = $17;
   $747 = $746;
   HEAP32[$747>>2] = $744;
   $748 = (($746) + 4)|0;
   $749 = $748;
   HEAP32[$749>>2] = $745;
   $750 = $17;
   $751 = $750;
   $752 = HEAP32[$751>>2]|0;
   $753 = (($750) + 4)|0;
   $754 = $753;
   $755 = HEAP32[$754>>2]|0;
   $756 = $18;
   $757 = $756;
   $758 = HEAP32[$757>>2]|0;
   $759 = (($756) + 4)|0;
   $760 = $759;
   $761 = HEAP32[$760>>2]|0;
   $762 = (_XXH64_mergeRound($752,$755,$758,$761)|0);
   $763 = tempRet0;
   $764 = $17;
   $765 = $764;
   HEAP32[$765>>2] = $762;
   $766 = (($764) + 4)|0;
   $767 = $766;
   HEAP32[$767>>2] = $763;
   $768 = $17;
   $769 = $768;
   $770 = HEAP32[$769>>2]|0;
   $771 = (($768) + 4)|0;
   $772 = $771;
   $773 = HEAP32[$772>>2]|0;
   $774 = $19;
   $775 = $774;
   $776 = HEAP32[$775>>2]|0;
   $777 = (($774) + 4)|0;
   $778 = $777;
   $779 = HEAP32[$778>>2]|0;
   $780 = (_XXH64_mergeRound($770,$773,$776,$779)|0);
   $781 = tempRet0;
   $782 = $17;
   $783 = $782;
   HEAP32[$783>>2] = $780;
   $784 = (($782) + 4)|0;
   $785 = $784;
   HEAP32[$785>>2] = $781;
   $786 = $17;
   $787 = $786;
   $788 = HEAP32[$787>>2]|0;
   $789 = (($786) + 4)|0;
   $790 = $789;
   $791 = HEAP32[$790>>2]|0;
   $792 = $20;
   $793 = $792;
   $794 = HEAP32[$793>>2]|0;
   $795 = (($792) + 4)|0;
   $796 = $795;
   $797 = HEAP32[$796>>2]|0;
   $798 = (_XXH64_mergeRound($788,$791,$794,$797)|0);
   $799 = tempRet0;
   $800 = $17;
   $801 = $800;
   HEAP32[$801>>2] = $798;
   $802 = (($800) + 4)|0;
   $803 = $802;
   HEAP32[$803>>2] = $799;
   $804 = $17;
   $805 = $804;
   $806 = HEAP32[$805>>2]|0;
   $807 = (($804) + 4)|0;
   $808 = $807;
   $809 = HEAP32[$808>>2]|0;
   $810 = $21;
   $811 = $810;
   $812 = HEAP32[$811>>2]|0;
   $813 = (($810) + 4)|0;
   $814 = $813;
   $815 = HEAP32[$814>>2]|0;
   $816 = (_XXH64_mergeRound($806,$809,$812,$815)|0);
   $817 = tempRet0;
   $818 = $17;
   $819 = $818;
   HEAP32[$819>>2] = $816;
   $820 = (($818) + 4)|0;
   $821 = $820;
   HEAP32[$821>>2] = $817;
  } else {
   $822 = ((($620)) + 24|0);
   $823 = $822;
   $824 = $823;
   $825 = HEAP32[$824>>2]|0;
   $826 = (($823) + 4)|0;
   $827 = $826;
   $828 = HEAP32[$827>>2]|0;
   $829 = (_i64Add(($825|0),($828|0),374761413,668265263)|0);
   $830 = tempRet0;
   $831 = $17;
   $832 = $831;
   HEAP32[$832>>2] = $829;
   $833 = (($831) + 4)|0;
   $834 = $833;
   HEAP32[$834>>2] = $830;
  }
  $835 = $13;
  $836 = $835;
  $837 = $836;
  $838 = HEAP32[$837>>2]|0;
  $839 = (($836) + 4)|0;
  $840 = $839;
  $841 = HEAP32[$840>>2]|0;
  $842 = $17;
  $843 = $842;
  $844 = HEAP32[$843>>2]|0;
  $845 = (($842) + 4)|0;
  $846 = $845;
  $847 = HEAP32[$846>>2]|0;
  $848 = (_i64Add(($844|0),($847|0),($838|0),($841|0))|0);
  $849 = tempRet0;
  $850 = $17;
  $851 = $850;
  HEAP32[$851>>2] = $848;
  $852 = (($850) + 4)|0;
  $853 = $852;
  HEAP32[$853>>2] = $849;
  while(1) {
   $854 = $15;
   $855 = ((($854)) + 8|0);
   $856 = $16;
   $857 = ($855>>>0)<=($856>>>0);
   $858 = $15;
   if (!($857)) {
    break;
   }
   $859 = $14;
   $11 = $858;
   $12 = $859;
   $860 = $11;
   $861 = $12;
   $8 = $860;
   $9 = $861;
   $10 = 1;
   $862 = $10;
   $863 = ($862|0)==(1);
   $864 = $9;
   $865 = ($864|0)==(1);
   $866 = $8;
   if ($863) {
    $867 = (_XXH_read64($866)|0);
    $868 = tempRet0;
    if ($865) {
     $873 = $867;$876 = $868;
    } else {
     $869 = (_XXH_swap64($867,$868)|0);
     $870 = tempRet0;
     $873 = $869;$876 = $870;
    }
    $871 = $7;
    $872 = $871;
    HEAP32[$872>>2] = $873;
    $874 = (($871) + 4)|0;
    $875 = $874;
    HEAP32[$875>>2] = $876;
   } else {
    $877 = $866;
    $878 = $877;
    $879 = HEAP32[$878>>2]|0;
    $880 = (($877) + 4)|0;
    $881 = $880;
    $882 = HEAP32[$881>>2]|0;
    if ($865) {
     $887 = $879;$890 = $882;
    } else {
     $883 = (_XXH_swap64($879,$882)|0);
     $884 = tempRet0;
     $887 = $883;$890 = $884;
    }
    $885 = $7;
    $886 = $885;
    HEAP32[$886>>2] = $887;
    $888 = (($885) + 4)|0;
    $889 = $888;
    HEAP32[$889>>2] = $890;
   }
   $891 = $7;
   $892 = $891;
   $893 = HEAP32[$892>>2]|0;
   $894 = (($891) + 4)|0;
   $895 = $894;
   $896 = HEAP32[$895>>2]|0;
   $897 = (_XXH64_round(0,0,$893,$896)|0);
   $898 = tempRet0;
   $899 = $22;
   $900 = $899;
   HEAP32[$900>>2] = $897;
   $901 = (($899) + 4)|0;
   $902 = $901;
   HEAP32[$902>>2] = $898;
   $903 = $22;
   $904 = $903;
   $905 = HEAP32[$904>>2]|0;
   $906 = (($903) + 4)|0;
   $907 = $906;
   $908 = HEAP32[$907>>2]|0;
   $909 = $17;
   $910 = $909;
   $911 = HEAP32[$910>>2]|0;
   $912 = (($909) + 4)|0;
   $913 = $912;
   $914 = HEAP32[$913>>2]|0;
   $915 = $911 ^ $905;
   $916 = $914 ^ $908;
   $917 = $17;
   $918 = $917;
   HEAP32[$918>>2] = $915;
   $919 = (($917) + 4)|0;
   $920 = $919;
   HEAP32[$920>>2] = $916;
   $921 = $17;
   $922 = $921;
   $923 = HEAP32[$922>>2]|0;
   $924 = (($921) + 4)|0;
   $925 = $924;
   $926 = HEAP32[$925>>2]|0;
   $927 = (_bitshift64Shl(($923|0),($926|0),27)|0);
   $928 = tempRet0;
   $929 = $17;
   $930 = $929;
   $931 = HEAP32[$930>>2]|0;
   $932 = (($929) + 4)|0;
   $933 = $932;
   $934 = HEAP32[$933>>2]|0;
   $935 = (_bitshift64Lshr(($931|0),($934|0),37)|0);
   $936 = tempRet0;
   $937 = $927 | $935;
   $938 = $928 | $936;
   $939 = (___muldi3(($937|0),($938|0),-2048144761,-1640531535)|0);
   $940 = tempRet0;
   $941 = (_i64Add(($939|0),($940|0),-1028477341,-2048144777)|0);
   $942 = tempRet0;
   $943 = $17;
   $944 = $943;
   HEAP32[$944>>2] = $941;
   $945 = (($943) + 4)|0;
   $946 = $945;
   HEAP32[$946>>2] = $942;
   $947 = $15;
   $948 = ((($947)) + 8|0);
   $15 = $948;
  }
  $949 = ((($858)) + 4|0);
  $950 = $16;
  $951 = ($949>>>0)<=($950>>>0);
  if ($951) {
   $952 = $15;
   $953 = $14;
   $5 = $952;
   $6 = $953;
   $954 = $5;
   $955 = $6;
   $2 = $954;
   $3 = $955;
   $4 = 1;
   $956 = $4;
   $957 = ($956|0)==(1);
   $958 = $3;
   $959 = ($958|0)==(1);
   $960 = $2;
   if ($957) {
    $961 = (_XXH_read32($960)|0);
    if ($959) {
     $963 = $961;
    } else {
     $962 = (_XXH_swap32($961)|0);
     $963 = $962;
    }
    $1 = $963;
   } else {
    $964 = HEAP32[$960>>2]|0;
    if ($959) {
     $966 = $964;
    } else {
     $965 = (_XXH_swap32($964)|0);
     $966 = $965;
    }
    $1 = $966;
   }
   $967 = $1;
   $968 = (___muldi3(($967|0),0,-2048144761,-1640531535)|0);
   $969 = tempRet0;
   $970 = $17;
   $971 = $970;
   $972 = HEAP32[$971>>2]|0;
   $973 = (($970) + 4)|0;
   $974 = $973;
   $975 = HEAP32[$974>>2]|0;
   $976 = $972 ^ $968;
   $977 = $975 ^ $969;
   $978 = $17;
   $979 = $978;
   HEAP32[$979>>2] = $976;
   $980 = (($978) + 4)|0;
   $981 = $980;
   HEAP32[$981>>2] = $977;
   $982 = $17;
   $983 = $982;
   $984 = HEAP32[$983>>2]|0;
   $985 = (($982) + 4)|0;
   $986 = $985;
   $987 = HEAP32[$986>>2]|0;
   $988 = (_bitshift64Shl(($984|0),($987|0),23)|0);
   $989 = tempRet0;
   $990 = $17;
   $991 = $990;
   $992 = HEAP32[$991>>2]|0;
   $993 = (($990) + 4)|0;
   $994 = $993;
   $995 = HEAP32[$994>>2]|0;
   $996 = (_bitshift64Lshr(($992|0),($995|0),41)|0);
   $997 = tempRet0;
   $998 = $988 | $996;
   $999 = $989 | $997;
   $1000 = (___muldi3(($998|0),($999|0),668265295,-1028477379)|0);
   $1001 = tempRet0;
   $1002 = (_i64Add(($1000|0),($1001|0),-1640531463,374761393)|0);
   $1003 = tempRet0;
   $1004 = $17;
   $1005 = $1004;
   HEAP32[$1005>>2] = $1002;
   $1006 = (($1004) + 4)|0;
   $1007 = $1006;
   HEAP32[$1007>>2] = $1003;
   $1008 = $15;
   $1009 = ((($1008)) + 4|0);
   $15 = $1009;
  }
  while(1) {
   $1010 = $15;
   $1011 = $16;
   $1012 = ($1010>>>0)<($1011>>>0);
   if (!($1012)) {
    break;
   }
   $1013 = $15;
   $1014 = HEAP8[$1013>>0]|0;
   $1015 = $1014&255;
   $1016 = (___muldi3(($1015|0),0,374761413,668265263)|0);
   $1017 = tempRet0;
   $1018 = $17;
   $1019 = $1018;
   $1020 = HEAP32[$1019>>2]|0;
   $1021 = (($1018) + 4)|0;
   $1022 = $1021;
   $1023 = HEAP32[$1022>>2]|0;
   $1024 = $1020 ^ $1016;
   $1025 = $1023 ^ $1017;
   $1026 = $17;
   $1027 = $1026;
   HEAP32[$1027>>2] = $1024;
   $1028 = (($1026) + 4)|0;
   $1029 = $1028;
   HEAP32[$1029>>2] = $1025;
   $1030 = $17;
   $1031 = $1030;
   $1032 = HEAP32[$1031>>2]|0;
   $1033 = (($1030) + 4)|0;
   $1034 = $1033;
   $1035 = HEAP32[$1034>>2]|0;
   $1036 = (_bitshift64Shl(($1032|0),($1035|0),11)|0);
   $1037 = tempRet0;
   $1038 = $17;
   $1039 = $1038;
   $1040 = HEAP32[$1039>>2]|0;
   $1041 = (($1038) + 4)|0;
   $1042 = $1041;
   $1043 = HEAP32[$1042>>2]|0;
   $1044 = (_bitshift64Lshr(($1040|0),($1043|0),53)|0);
   $1045 = tempRet0;
   $1046 = $1036 | $1044;
   $1047 = $1037 | $1045;
   $1048 = (___muldi3(($1046|0),($1047|0),-2048144761,-1640531535)|0);
   $1049 = tempRet0;
   $1050 = $17;
   $1051 = $1050;
   HEAP32[$1051>>2] = $1048;
   $1052 = (($1050) + 4)|0;
   $1053 = $1052;
   HEAP32[$1053>>2] = $1049;
   $1054 = $15;
   $1055 = ((($1054)) + 1|0);
   $15 = $1055;
  }
  $1056 = $17;
  $1057 = $1056;
  $1058 = HEAP32[$1057>>2]|0;
  $1059 = (($1056) + 4)|0;
  $1060 = $1059;
  $1061 = HEAP32[$1060>>2]|0;
  $1062 = (_bitshift64Lshr(($1058|0),($1061|0),33)|0);
  $1063 = tempRet0;
  $1064 = $17;
  $1065 = $1064;
  $1066 = HEAP32[$1065>>2]|0;
  $1067 = (($1064) + 4)|0;
  $1068 = $1067;
  $1069 = HEAP32[$1068>>2]|0;
  $1070 = $1066 ^ $1062;
  $1071 = $1069 ^ $1063;
  $1072 = $17;
  $1073 = $1072;
  HEAP32[$1073>>2] = $1070;
  $1074 = (($1072) + 4)|0;
  $1075 = $1074;
  HEAP32[$1075>>2] = $1071;
  $1076 = $17;
  $1077 = $1076;
  $1078 = HEAP32[$1077>>2]|0;
  $1079 = (($1076) + 4)|0;
  $1080 = $1079;
  $1081 = HEAP32[$1080>>2]|0;
  $1082 = (___muldi3(($1078|0),($1081|0),668265295,-1028477379)|0);
  $1083 = tempRet0;
  $1084 = $17;
  $1085 = $1084;
  HEAP32[$1085>>2] = $1082;
  $1086 = (($1084) + 4)|0;
  $1087 = $1086;
  HEAP32[$1087>>2] = $1083;
  $1088 = $17;
  $1089 = $1088;
  $1090 = HEAP32[$1089>>2]|0;
  $1091 = (($1088) + 4)|0;
  $1092 = $1091;
  $1093 = HEAP32[$1092>>2]|0;
  $1094 = (_bitshift64Lshr(($1090|0),($1093|0),29)|0);
  $1095 = tempRet0;
  $1096 = $17;
  $1097 = $1096;
  $1098 = HEAP32[$1097>>2]|0;
  $1099 = (($1096) + 4)|0;
  $1100 = $1099;
  $1101 = HEAP32[$1100>>2]|0;
  $1102 = $1098 ^ $1094;
  $1103 = $1101 ^ $1095;
  $1104 = $17;
  $1105 = $1104;
  HEAP32[$1105>>2] = $1102;
  $1106 = (($1104) + 4)|0;
  $1107 = $1106;
  HEAP32[$1107>>2] = $1103;
  $1108 = $17;
  $1109 = $1108;
  $1110 = HEAP32[$1109>>2]|0;
  $1111 = (($1108) + 4)|0;
  $1112 = $1111;
  $1113 = HEAP32[$1112>>2]|0;
  $1114 = (___muldi3(($1110|0),($1113|0),-1640531463,374761393)|0);
  $1115 = tempRet0;
  $1116 = $17;
  $1117 = $1116;
  HEAP32[$1117>>2] = $1114;
  $1118 = (($1116) + 4)|0;
  $1119 = $1118;
  HEAP32[$1119>>2] = $1115;
  $1120 = $17;
  $1121 = $1120;
  $1122 = HEAP32[$1121>>2]|0;
  $1123 = (($1120) + 4)|0;
  $1124 = $1123;
  $1125 = HEAP32[$1124>>2]|0;
  $1126 = $17;
  $1127 = $1126;
  $1128 = HEAP32[$1127>>2]|0;
  $1129 = (($1126) + 4)|0;
  $1130 = $1129;
  $1131 = HEAP32[$1130>>2]|0;
  $1132 = $1128 ^ $1125;
  $1133 = $17;
  $1134 = $1133;
  HEAP32[$1134>>2] = $1132;
  $1135 = (($1133) + 4)|0;
  $1136 = $1135;
  HEAP32[$1136>>2] = $1131;
  $1137 = $17;
  $1138 = $1137;
  $1139 = HEAP32[$1138>>2]|0;
  $1140 = (($1137) + 4)|0;
  $1141 = $1140;
  $1142 = HEAP32[$1141>>2]|0;
  $1143 = $45;
  $1144 = $1143;
  HEAP32[$1144>>2] = $1139;
  $1145 = (($1143) + 4)|0;
  $1146 = $1145;
  HEAP32[$1146>>2] = $1142;
  $1147 = $45;
  $1148 = $1147;
  $1149 = HEAP32[$1148>>2]|0;
  $1150 = (($1147) + 4)|0;
  $1151 = $1150;
  $1152 = HEAP32[$1151>>2]|0;
  tempRet0 = ($1152);
  STACKTOP = sp;return ($1149|0);
 }
 return (0)|0;
}
function _ZSTD_versionNumber() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 10300;
}
function _ZSTD_isError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_27($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ERR_isError_27($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2>>>0)>(4294967271);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _ZSTD_malloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[$1>>2]|0;
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $3;
  $10 = (FUNCTION_TABLE_iii[$6 & 7]($8,$9)|0);
  $2 = $10;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 } else {
  $11 = $3;
  $12 = (_malloc($11)|0);
  $2 = $12;
  $13 = $2;
  STACKTOP = sp;return ($13|0);
 }
 return (0)|0;
}
function _ZSTD_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = ((($1)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $2;
  FUNCTION_TABLE_vii[$9 & 15]($11,$12);
  STACKTOP = sp;return;
 } else {
  $13 = $2;
  _free($13);
  STACKTOP = sp;return;
 }
}
function _HUF_readDTableX2_wksp($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $11 = sp + 56|0;
 $12 = sp + 52|0;
 $19 = sp + 88|0;
 $27 = sp + 84|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 HEAP32[$11>>2] = 0;
 HEAP32[$12>>2] = 0;
 $28 = $6;
 $29 = ((($28)) + 4|0);
 $14 = $29;
 $30 = $14;
 $15 = $30;
 $18 = 0;
 $31 = $9;
 $32 = $18;
 $33 = (($31) + ($32<<2)|0);
 $16 = $33;
 $34 = $18;
 $35 = (($34) + 16)|0;
 $18 = $35;
 $36 = $9;
 $37 = $18;
 $38 = (($36) + ($37<<2)|0);
 $17 = $38;
 $39 = $18;
 $40 = (($39) + 64)|0;
 $18 = $40;
 $41 = $18;
 $42 = $41 << 2;
 $43 = $10;
 $44 = ($42>>>0)>($43>>>0);
 if ($44) {
  $5 = -17;
  $137 = $5;
  STACKTOP = sp;return ($137|0);
 }
 $45 = $9;
 $46 = $18;
 $47 = (($45) + ($46<<2)|0);
 $9 = $47;
 $48 = $18;
 $49 = $48 << 2;
 $50 = $10;
 $51 = (($50) - ($49))|0;
 $10 = $51;
 $52 = $17;
 $53 = $16;
 $54 = $7;
 $55 = $8;
 $56 = (_HUF_readStats($52,256,$53,$12,$11,$54,$55)|0);
 $13 = $56;
 $57 = $13;
 $58 = (_HUF_isError($57)|0);
 $59 = ($58|0)!=(0);
 if ($59) {
  $60 = $13;
  $5 = $60;
  $137 = $5;
  STACKTOP = sp;return ($137|0);
 }
 $61 = $6;
 _HUF_getDTableDesc($19,$61);
 $62 = HEAP32[$11>>2]|0;
 $63 = HEAP8[$19>>0]|0;
 $64 = $63&255;
 $65 = (($64) + 1)|0;
 $66 = ($62>>>0)>($65>>>0);
 if ($66) {
  $5 = -17;
  $137 = $5;
  STACKTOP = sp;return ($137|0);
 }
 $67 = ((($19)) + 1|0);
 HEAP8[$67>>0] = 0;
 $68 = HEAP32[$11>>2]|0;
 $69 = $68&255;
 $70 = ((($19)) + 2|0);
 HEAP8[$70>>0] = $69;
 $71 = $6;
 ;HEAP8[$71>>0]=HEAP8[$19>>0]|0;HEAP8[$71+1>>0]=HEAP8[$19+1>>0]|0;HEAP8[$71+2>>0]=HEAP8[$19+2>>0]|0;HEAP8[$71+3>>0]=HEAP8[$19+3>>0]|0;
 $21 = 0;
 $20 = 1;
 while(1) {
  $72 = $20;
  $73 = HEAP32[$11>>2]|0;
  $74 = (($73) + 1)|0;
  $75 = ($72>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $76 = $21;
  $22 = $76;
  $77 = $16;
  $78 = $20;
  $79 = (($77) + ($78<<2)|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $20;
  $82 = (($81) - 1)|0;
  $83 = $80 << $82;
  $84 = $21;
  $85 = (($84) + ($83))|0;
  $21 = $85;
  $86 = $22;
  $87 = $16;
  $88 = $20;
  $89 = (($87) + ($88<<2)|0);
  HEAP32[$89>>2] = $86;
  $90 = $20;
  $91 = (($90) + 1)|0;
  $20 = $91;
 }
 $23 = 0;
 while(1) {
  $92 = $23;
  $93 = HEAP32[$12>>2]|0;
  $94 = ($92>>>0)<($93>>>0);
  if (!($94)) {
   break;
  }
  $95 = $17;
  $96 = $23;
  $97 = (($95) + ($96)|0);
  $98 = HEAP8[$97>>0]|0;
  $99 = $98&255;
  $24 = $99;
  $100 = $24;
  $101 = 1 << $100;
  $102 = $101 >> 1;
  $25 = $102;
  $103 = $23;
  $104 = $103&255;
  HEAP8[$27>>0] = $104;
  $105 = HEAP32[$11>>2]|0;
  $106 = (($105) + 1)|0;
  $107 = $24;
  $108 = (($106) - ($107))|0;
  $109 = $108&255;
  $110 = ((($27)) + 1|0);
  HEAP8[$110>>0] = $109;
  $111 = $16;
  $112 = $24;
  $113 = (($111) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $26 = $114;
  while(1) {
   $115 = $26;
   $116 = $16;
   $117 = $24;
   $118 = (($116) + ($117<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $25;
   $121 = (($119) + ($120))|0;
   $122 = ($115>>>0)<($121>>>0);
   if (!($122)) {
    break;
   }
   $123 = $15;
   $124 = $26;
   $125 = (($123) + ($124<<1)|0);
   ;HEAP8[$125>>0]=HEAP8[$27>>0]|0;HEAP8[$125+1>>0]=HEAP8[$27+1>>0]|0;
   $126 = $26;
   $127 = (($126) + 1)|0;
   $26 = $127;
  }
  $128 = $25;
  $129 = $16;
  $130 = $24;
  $131 = (($129) + ($130<<2)|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = (($132) + ($128))|0;
  HEAP32[$131>>2] = $133;
  $134 = $23;
  $135 = (($134) + 1)|0;
  $23 = $135;
 }
 $136 = $13;
 $5 = $136;
 $137 = $5;
 STACKTOP = sp;return ($137|0);
}
function _HUF_getDTableDesc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $1;
 $4 = $2;
 ;HEAP8[$3>>0]=HEAP8[$4>>0]|0;HEAP8[$3+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$4+3>>0]|0;
 ;HEAP8[$0>>0]=HEAP8[$3>>0]|0;HEAP8[$0+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$3+3>>0]|0;
 STACKTOP = sp;return;
}
function _HUF_decompress1X2_usingDTable_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $21 = sp + 8|0;
 $22 = sp + 92|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $25 = $12;
 $17 = $25;
 $26 = $17;
 $27 = $13;
 $28 = (($26) + ($27)|0);
 $18 = $28;
 $29 = $16;
 $30 = ((($29)) + 4|0);
 $19 = $30;
 $31 = $19;
 $20 = $31;
 $32 = $16;
 _HUF_getDTableDesc($22,$32);
 $33 = ((($22)) + 2|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $23 = $35;
 $36 = $14;
 $37 = $15;
 $38 = (_BIT_initDStream_125($21,$36,$37)|0);
 $24 = $38;
 $39 = $24;
 $40 = (_HUF_isError($39)|0);
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $24;
  $11 = $42;
  $107 = $11;
  STACKTOP = sp;return ($107|0);
 }
 $43 = $17;
 $44 = $18;
 $45 = $20;
 $46 = $23;
 $5 = $43;
 $6 = $21;
 $7 = $44;
 $8 = $45;
 $9 = $46;
 $47 = $5;
 $10 = $47;
 while(1) {
  $48 = $6;
  $49 = (_BIT_reloadDStream_126($48)|0);
  $50 = ($49|0)==(0);
  if (!($50)) {
   break;
  }
  $51 = $5;
  $52 = $7;
  $53 = ((($52)) + -4|0);
  $54 = ($51>>>0)<=($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = (_MEM_64bits_127()|0);
  $56 = ($55|0)!=(0);
  if ($56) {
   $57 = $6;
   $58 = $8;
   $59 = $9;
   $60 = (_HUF_decodeSymbolX2($57,$58,$59)|0);
   $61 = $5;
   $62 = ((($61)) + 1|0);
   $5 = $62;
   HEAP8[$61>>0] = $60;
  }
  (_MEM_64bits_127()|0);
  $63 = $6;
  $64 = $8;
  $65 = $9;
  $66 = (_HUF_decodeSymbolX2($63,$64,$65)|0);
  $67 = $5;
  $68 = ((($67)) + 1|0);
  $5 = $68;
  HEAP8[$67>>0] = $66;
  $69 = (_MEM_64bits_127()|0);
  $70 = ($69|0)!=(0);
  if ($70) {
   $71 = $6;
   $72 = $8;
   $73 = $9;
   $74 = (_HUF_decodeSymbolX2($71,$72,$73)|0);
   $75 = $5;
   $76 = ((($75)) + 1|0);
   $5 = $76;
   HEAP8[$75>>0] = $74;
  }
  $77 = $6;
  $78 = $8;
  $79 = $9;
  $80 = (_HUF_decodeSymbolX2($77,$78,$79)|0);
  $81 = $5;
  $82 = ((($81)) + 1|0);
  $5 = $82;
  HEAP8[$81>>0] = $80;
 }
 while(1) {
  $83 = $6;
  $84 = (_BIT_reloadDStream_126($83)|0);
  $85 = ($84|0)==(0);
  if (!($85)) {
   break;
  }
  $86 = $5;
  $87 = $7;
  $88 = ($86>>>0)<($87>>>0);
  if (!($88)) {
   break;
  }
  $89 = $6;
  $90 = $8;
  $91 = $9;
  $92 = (_HUF_decodeSymbolX2($89,$90,$91)|0);
  $93 = $5;
  $94 = ((($93)) + 1|0);
  $5 = $94;
  HEAP8[$93>>0] = $92;
 }
 while(1) {
  $95 = $5;
  $96 = $7;
  $97 = ($95>>>0)<($96>>>0);
  if (!($97)) {
   break;
  }
  $98 = $6;
  $99 = $8;
  $100 = $9;
  $101 = (_HUF_decodeSymbolX2($98,$99,$100)|0);
  $102 = $5;
  $103 = ((($102)) + 1|0);
  $5 = $103;
  HEAP8[$102>>0] = $101;
 }
 $104 = (_BIT_endOfDStream($21)|0);
 $105 = ($104|0)!=(0);
 if ($105) {
  $106 = $13;
  $11 = $106;
  $107 = $11;
  STACKTOP = sp;return ($107|0);
 } else {
  $11 = -15;
  $107 = $11;
  STACKTOP = sp;return ($107|0);
 }
 return (0)|0;
}
function _BIT_initDStream_125($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9>>>0)<(1);
 if ($10) {
  $11 = $4;
  ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;HEAP32[$11+16>>2]=0|0;
  $3 = -14;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $12 = $5;
 $13 = $4;
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = $12;
 $15 = $4;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = $4;
 $20 = ((($19)) + 16|0);
 HEAP32[$20>>2] = $18;
 $21 = $6;
 $22 = ($21>>>0)>=(4);
 do {
  if ($22) {
   $23 = $5;
   $24 = $6;
   $25 = (($23) + ($24)|0);
   $26 = ((($25)) + -4|0);
   $27 = $4;
   $28 = ((($27)) + 8|0);
   HEAP32[$28>>2] = $26;
   $29 = $4;
   $30 = ((($29)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_MEM_readLEST_130($31)|0);
   $33 = $4;
   HEAP32[$33>>2] = $32;
   $34 = $5;
   $35 = $6;
   $36 = (($35) - 1)|0;
   $37 = (($34) + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $7 = $38;
   $39 = $7;
   $40 = $39&255;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $7;
    $43 = $42&255;
    $44 = (_BIT_highbit32_140($43)|0);
    $45 = (8 - ($44))|0;
    $48 = $45;
   } else {
    $48 = 0;
   }
   $46 = $4;
   $47 = ((($46)) + 4|0);
   HEAP32[$47>>2] = $48;
   $49 = $7;
   $50 = $49&255;
   $51 = ($50|0)==(0);
   if ($51) {
    $3 = -1;
    $138 = $3;
    STACKTOP = sp;return ($138|0);
   }
  } else {
   $52 = $4;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $4;
   $56 = ((($55)) + 8|0);
   HEAP32[$56>>2] = $54;
   $57 = $4;
   $58 = ((($57)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $4;
   HEAP32[$62>>2] = $61;
   $63 = $6;
   switch ($63|0) {
   case 7:  {
    $64 = $5;
    $65 = ((($64)) + 6|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $67 << 16;
    $69 = $4;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($68))|0;
    HEAP32[$69>>2] = $71;
    label = 10;
    break;
   }
   case 6:  {
    label = 10;
    break;
   }
   case 5:  {
    label = 11;
    break;
   }
   case 4:  {
    label = 12;
    break;
   }
   case 3:  {
    label = 13;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    $72 = $5;
    $73 = ((($72)) + 5|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $75 << 8;
    $77 = $4;
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + ($76))|0;
    HEAP32[$77>>2] = $79;
    label = 11;
   }
   if ((label|0) == 11) {
    $80 = $5;
    $81 = ((($80)) + 4|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = $83 << 0;
    $85 = $4;
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($84))|0;
    HEAP32[$85>>2] = $87;
    label = 12;
   }
   if ((label|0) == 12) {
    $88 = $5;
    $89 = ((($88)) + 3|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90&255;
    $92 = $91 << 24;
    $93 = $4;
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + ($92))|0;
    HEAP32[$93>>2] = $95;
    label = 13;
   }
   if ((label|0) == 13) {
    $96 = $5;
    $97 = ((($96)) + 2|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = $99 << 16;
    $101 = $4;
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + ($100))|0;
    HEAP32[$101>>2] = $103;
    label = 14;
   }
   if ((label|0) == 14) {
    $104 = $5;
    $105 = ((($104)) + 1|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106&255;
    $108 = $107 << 8;
    $109 = $4;
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($108))|0;
    HEAP32[$109>>2] = $111;
   }
   $112 = $5;
   $113 = $6;
   $114 = (($113) - 1)|0;
   $115 = (($112) + ($114)|0);
   $116 = HEAP8[$115>>0]|0;
   $8 = $116;
   $117 = $8;
   $118 = $117&255;
   $119 = ($118|0)!=(0);
   if ($119) {
    $120 = $8;
    $121 = $120&255;
    $122 = (_BIT_highbit32_140($121)|0);
    $123 = (8 - ($122))|0;
    $126 = $123;
   } else {
    $126 = 0;
   }
   $124 = $4;
   $125 = ((($124)) + 4|0);
   HEAP32[$125>>2] = $126;
   $127 = $8;
   $128 = $127&255;
   $129 = ($128|0)==(0);
   if (!($129)) {
    $130 = $6;
    $131 = (4 - ($130))|0;
    $132 = $131<<3;
    $133 = $4;
    $134 = ((($133)) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132))|0;
    HEAP32[$134>>2] = $136;
    break;
   }
   $3 = -1;
   $138 = $3;
   STACKTOP = sp;return ($138|0);
  }
 } while(0);
 $137 = $6;
 $3 = $137;
 $138 = $3;
 STACKTOP = sp;return ($138|0);
}
function _BIT_reloadDStream_126($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(32);
 if ($8) {
  $1 = 3;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>=($14>>>0);
 $16 = $2;
 if ($15) {
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 >>> 3;
  $20 = $2;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (0 - ($19))|0;
  $24 = (($22) + ($23)|0);
  HEAP32[$21>>2] = $24;
  $25 = $2;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 7;
  HEAP32[$26>>2] = $28;
  $29 = $2;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_MEM_readLEST_130($31)|0);
  $33 = $2;
  HEAP32[$33>>2] = $32;
  $1 = 0;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $34 = ((($16)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $2;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($35|0)==($38|0);
 $40 = $2;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 if (!($39)) {
  $44 = $42 >>> 3;
  $3 = $44;
  $4 = 0;
  $45 = $2;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $3;
  $49 = (0 - ($48))|0;
  $50 = (($47) + ($49)|0);
  $51 = $2;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($50>>>0)<($53>>>0);
  if ($54) {
   $55 = $2;
   $56 = ((($55)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $2;
   $59 = ((($58)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $57;
   $62 = $60;
   $63 = (($61) - ($62))|0;
   $3 = $63;
   $4 = 1;
  }
  $64 = $3;
  $65 = $2;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (0 - ($64))|0;
  $69 = (($67) + ($68)|0);
  HEAP32[$66>>2] = $69;
  $70 = $3;
  $71 = $70<<3;
  $72 = $2;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) - ($71))|0;
  HEAP32[$73>>2] = $75;
  $76 = $2;
  $77 = ((($76)) + 8|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (_MEM_readLEST_130($78)|0);
  $80 = $2;
  HEAP32[$80>>2] = $79;
  $81 = $4;
  $1 = $81;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $43 = ($42>>>0)<(32);
 if ($43) {
  $1 = 1;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 } else {
  $1 = 2;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 return (0)|0;
}
function _MEM_64bits_127() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _HUF_decodeSymbolX2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $5;
 $10 = (_BIT_lookBitsFast_128($8,$9)|0);
 $6 = $10;
 $11 = $4;
 $12 = $6;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP8[$13>>0]|0;
 $7 = $14;
 $15 = $3;
 $16 = $4;
 $17 = $6;
 $18 = (($16) + ($17<<1)|0);
 $19 = ((($18)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 _BIT_skipBits_129($15,$21);
 $22 = $7;
 STACKTOP = sp;return ($22|0);
}
function _BIT_endOfDStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  $14 = 0;
  $13 = $14&1;
  STACKTOP = sp;return ($13|0);
 }
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(32);
 $14 = $12;
 $13 = $14&1;
 STACKTOP = sp;return ($13|0);
}
function _BIT_lookBitsFast_128($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $3;
 $13 = (32 - ($12))|0;
 $14 = $13 & 31;
 $15 = $11 >>> $14;
 STACKTOP = sp;return ($15|0);
}
function _BIT_skipBits_129($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _MEM_readLEST_130($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_32bits_131()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 if ($4) {
  $6 = (_MEM_readLE32_132($5)|0);
  $1 = $6;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = (_MEM_readLE64_133($5)|0);
  $8 = tempRet0;
  $1 = $7;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _MEM_32bits_131() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _MEM_readLE32_132($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_isLittleEndian_134()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read32_138($5)|0);
 if ($4) {
  $1 = $6;
 } else {
  $7 = (_MEM_swap32_139($6)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _MEM_readLE64_133($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = $0;
 $3 = (_MEM_isLittleEndian_134()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read64_135($5)|0);
 $7 = tempRet0;
 if ($4) {
  $8 = $1;
  $9 = $8;
  HEAP32[$9>>2] = $6;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $7;
 } else {
  $12 = (_MEM_swap64_136($6,$7)|0);
  $13 = tempRet0;
  $14 = $1;
  $15 = $14;
  HEAP32[$15>>2] = $12;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
 }
 $18 = $1;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 tempRet0 = ($23);
 STACKTOP = sp;return ($20|0);
}
function _MEM_isLittleEndian_134() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[20]|0;
 $1 = $0&255;
 return ($1|0);
}
function _MEM_read64_135($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
 tempRet0 = ($8);
 STACKTOP = sp;return ($5|0);
}
function _MEM_swap64_136($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 (_bitshift64Shl(($9|0),($12|0),56)|0);
 $13 = tempRet0;
 $14 = $13 & -16777216;
 $15 = $2;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 (_bitshift64Shl(($17|0),($20|0),40)|0);
 $21 = tempRet0;
 $22 = $21 & 16711680;
 $23 = $14 | $22;
 $24 = $2;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 (_bitshift64Shl(($26|0),($29|0),24)|0);
 $30 = tempRet0;
 $31 = $30 & 65280;
 $32 = $23 | $31;
 $33 = $2;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 (_bitshift64Shl(($35|0),($38|0),8)|0);
 $39 = tempRet0;
 $40 = $39 & 255;
 $41 = $32 | $40;
 $42 = $2;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (_bitshift64Lshr(($44|0),($47|0),8)|0);
 $49 = tempRet0;
 $50 = $48 & -16777216;
 $51 = $2;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_bitshift64Lshr(($53|0),($56|0),24)|0);
 $58 = tempRet0;
 $59 = $57 & 16711680;
 $60 = $50 | $59;
 $61 = $2;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (_bitshift64Lshr(($63|0),($66|0),40)|0);
 $68 = tempRet0;
 $69 = $67 & 65280;
 $70 = $60 | $69;
 $71 = $2;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (_bitshift64Lshr(($73|0),($76|0),56)|0);
 $78 = tempRet0;
 $79 = $77 & 255;
 $80 = $70 | $79;
 tempRet0 = ($41);
 STACKTOP = sp;return ($80|0);
}
function _MEM_read32_138($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 STACKTOP = sp;return ($3|0);
}
function _MEM_swap32_139($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24;
 $4 = $3 & -16777216;
 $5 = $1;
 $6 = $5 << 8;
 $7 = $6 & 16711680;
 $8 = $4 | $7;
 $9 = $1;
 $10 = $9 >>> 8;
 $11 = $10 & 65280;
 $12 = $8 | $11;
 $13 = $1;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $12 | $15;
 STACKTOP = sp;return ($16|0);
}
function _BIT_highbit32_140($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (Math_clz32(($2|0))|0);
 $4 = (31 - ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function _HUF_decompress1X2_DCtx_wksp($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = $11;
 $15 = $17;
 $18 = $8;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = (_HUF_readDTableX2_wksp($18,$19,$20,$21,$22)|0);
 $16 = $23;
 $24 = $16;
 $25 = (_HUF_isError($24)|0);
 $26 = ($25|0)!=(0);
 $27 = $16;
 if ($26) {
  $7 = $27;
  $42 = $7;
  STACKTOP = sp;return ($42|0);
 }
 $28 = $12;
 $29 = ($27>>>0)>=($28>>>0);
 if ($29) {
  $7 = -14;
  $42 = $7;
  STACKTOP = sp;return ($42|0);
 } else {
  $30 = $16;
  $31 = $15;
  $32 = (($31) + ($30)|0);
  $15 = $32;
  $33 = $16;
  $34 = $12;
  $35 = (($34) - ($33))|0;
  $12 = $35;
  $36 = $9;
  $37 = $10;
  $38 = $15;
  $39 = $12;
  $40 = $8;
  $41 = (_HUF_decompress1X2_usingDTable_internal($36,$37,$38,$39,$40)|0);
  $7 = $41;
  $42 = $7;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _HUF_decompress4X2_usingDTable_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $40 = sp + 148|0;
 $41 = sp + 128|0;
 $42 = sp + 108|0;
 $43 = sp + 88|0;
 $61 = sp + 308|0;
 $30 = $0;
 $31 = $1;
 $32 = $2;
 $33 = $3;
 $34 = $4;
 $67 = $33;
 $68 = ($67>>>0)<(10);
 if ($68) {
  $29 = -15;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 }
 $69 = $32;
 $35 = $69;
 $70 = $30;
 $36 = $70;
 $71 = $36;
 $72 = $31;
 $73 = (($71) + ($72)|0);
 $37 = $73;
 $74 = $34;
 $75 = ((($74)) + 4|0);
 $38 = $75;
 $76 = $38;
 $39 = $76;
 $77 = $35;
 $78 = (_MEM_readLE16($77)|0);
 $79 = $78&65535;
 $44 = $79;
 $80 = $35;
 $81 = ((($80)) + 2|0);
 $82 = (_MEM_readLE16($81)|0);
 $83 = $82&65535;
 $45 = $83;
 $84 = $35;
 $85 = ((($84)) + 4|0);
 $86 = (_MEM_readLE16($85)|0);
 $87 = $86&65535;
 $46 = $87;
 $88 = $33;
 $89 = $44;
 $90 = $45;
 $91 = (($89) + ($90))|0;
 $92 = $46;
 $93 = (($91) + ($92))|0;
 $94 = (($93) + 6)|0;
 $95 = (($88) - ($94))|0;
 $47 = $95;
 $96 = $35;
 $97 = ((($96)) + 6|0);
 $48 = $97;
 $98 = $48;
 $99 = $44;
 $100 = (($98) + ($99)|0);
 $49 = $100;
 $101 = $49;
 $102 = $45;
 $103 = (($101) + ($102)|0);
 $50 = $103;
 $104 = $50;
 $105 = $46;
 $106 = (($104) + ($105)|0);
 $51 = $106;
 $107 = $31;
 $108 = (($107) + 3)|0;
 $109 = (($108>>>0) / 4)&-1;
 $52 = $109;
 $110 = $36;
 $111 = $52;
 $112 = (($110) + ($111)|0);
 $53 = $112;
 $113 = $53;
 $114 = $52;
 $115 = (($113) + ($114)|0);
 $54 = $115;
 $116 = $54;
 $117 = $52;
 $118 = (($116) + ($117)|0);
 $55 = $118;
 $119 = $36;
 $56 = $119;
 $120 = $53;
 $57 = $120;
 $121 = $54;
 $58 = $121;
 $122 = $55;
 $59 = $122;
 $123 = $34;
 _HUF_getDTableDesc($61,$123);
 $124 = ((($61)) + 2|0);
 $125 = HEAP8[$124>>0]|0;
 $126 = $125&255;
 $62 = $126;
 $127 = $47;
 $128 = $33;
 $129 = ($127>>>0)>($128>>>0);
 if ($129) {
  $29 = -15;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 }
 $130 = $48;
 $131 = $44;
 $132 = (_BIT_initDStream_125($40,$130,$131)|0);
 $63 = $132;
 $133 = $63;
 $134 = (_HUF_isError($133)|0);
 $135 = ($134|0)!=(0);
 if ($135) {
  $136 = $63;
  $29 = $136;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 }
 $137 = $49;
 $138 = $45;
 $139 = (_BIT_initDStream_125($41,$137,$138)|0);
 $64 = $139;
 $140 = $64;
 $141 = (_HUF_isError($140)|0);
 $142 = ($141|0)!=(0);
 if ($142) {
  $143 = $64;
  $29 = $143;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 }
 $144 = $50;
 $145 = $46;
 $146 = (_BIT_initDStream_125($42,$144,$145)|0);
 $65 = $146;
 $147 = $65;
 $148 = (_HUF_isError($147)|0);
 $149 = ($148|0)!=(0);
 if ($149) {
  $150 = $65;
  $29 = $150;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 }
 $151 = $51;
 $152 = $47;
 $153 = (_BIT_initDStream_125($43,$151,$152)|0);
 $66 = $153;
 $154 = $66;
 $155 = (_HUF_isError($154)|0);
 $156 = ($155|0)!=(0);
 if ($156) {
  $157 = $66;
  $29 = $157;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 }
 $158 = (_BIT_reloadDStream_126($40)|0);
 $159 = (_BIT_reloadDStream_126($41)|0);
 $160 = $158 | $159;
 $161 = (_BIT_reloadDStream_126($42)|0);
 $162 = $160 | $161;
 $163 = (_BIT_reloadDStream_126($43)|0);
 $164 = $162 | $163;
 $60 = $164;
 while(1) {
  $165 = $60;
  $166 = ($165|0)==(0);
  if (!($166)) {
   break;
  }
  $167 = $59;
  $168 = $37;
  $169 = ((($168)) + -7|0);
  $170 = ($167>>>0)<($169>>>0);
  if (!($170)) {
   break;
  }
  $171 = (_MEM_64bits_127()|0);
  $172 = ($171|0)!=(0);
  if ($172) {
   $173 = $39;
   $174 = $62;
   $175 = (_HUF_decodeSymbolX2($40,$173,$174)|0);
   $176 = $56;
   $177 = ((($176)) + 1|0);
   $56 = $177;
   HEAP8[$176>>0] = $175;
  }
  $178 = (_MEM_64bits_127()|0);
  $179 = ($178|0)!=(0);
  if ($179) {
   $180 = $39;
   $181 = $62;
   $182 = (_HUF_decodeSymbolX2($41,$180,$181)|0);
   $183 = $57;
   $184 = ((($183)) + 1|0);
   $57 = $184;
   HEAP8[$183>>0] = $182;
  }
  $185 = (_MEM_64bits_127()|0);
  $186 = ($185|0)!=(0);
  if ($186) {
   $187 = $39;
   $188 = $62;
   $189 = (_HUF_decodeSymbolX2($42,$187,$188)|0);
   $190 = $58;
   $191 = ((($190)) + 1|0);
   $58 = $191;
   HEAP8[$190>>0] = $189;
  }
  $192 = (_MEM_64bits_127()|0);
  $193 = ($192|0)!=(0);
  if ($193) {
   $194 = $39;
   $195 = $62;
   $196 = (_HUF_decodeSymbolX2($43,$194,$195)|0);
   $197 = $59;
   $198 = ((($197)) + 1|0);
   $59 = $198;
   HEAP8[$197>>0] = $196;
  }
  (_MEM_64bits_127()|0);
  $199 = $39;
  $200 = $62;
  $201 = (_HUF_decodeSymbolX2($40,$199,$200)|0);
  $202 = $56;
  $203 = ((($202)) + 1|0);
  $56 = $203;
  HEAP8[$202>>0] = $201;
  (_MEM_64bits_127()|0);
  $204 = $39;
  $205 = $62;
  $206 = (_HUF_decodeSymbolX2($41,$204,$205)|0);
  $207 = $57;
  $208 = ((($207)) + 1|0);
  $57 = $208;
  HEAP8[$207>>0] = $206;
  (_MEM_64bits_127()|0);
  $209 = $39;
  $210 = $62;
  $211 = (_HUF_decodeSymbolX2($42,$209,$210)|0);
  $212 = $58;
  $213 = ((($212)) + 1|0);
  $58 = $213;
  HEAP8[$212>>0] = $211;
  (_MEM_64bits_127()|0);
  $214 = $39;
  $215 = $62;
  $216 = (_HUF_decodeSymbolX2($43,$214,$215)|0);
  $217 = $59;
  $218 = ((($217)) + 1|0);
  $59 = $218;
  HEAP8[$217>>0] = $216;
  $219 = (_MEM_64bits_127()|0);
  $220 = ($219|0)!=(0);
  if ($220) {
   $221 = $39;
   $222 = $62;
   $223 = (_HUF_decodeSymbolX2($40,$221,$222)|0);
   $224 = $56;
   $225 = ((($224)) + 1|0);
   $56 = $225;
   HEAP8[$224>>0] = $223;
  }
  $226 = (_MEM_64bits_127()|0);
  $227 = ($226|0)!=(0);
  if ($227) {
   $228 = $39;
   $229 = $62;
   $230 = (_HUF_decodeSymbolX2($41,$228,$229)|0);
   $231 = $57;
   $232 = ((($231)) + 1|0);
   $57 = $232;
   HEAP8[$231>>0] = $230;
  }
  $233 = (_MEM_64bits_127()|0);
  $234 = ($233|0)!=(0);
  if ($234) {
   $235 = $39;
   $236 = $62;
   $237 = (_HUF_decodeSymbolX2($42,$235,$236)|0);
   $238 = $58;
   $239 = ((($238)) + 1|0);
   $58 = $239;
   HEAP8[$238>>0] = $237;
  }
  $240 = (_MEM_64bits_127()|0);
  $241 = ($240|0)!=(0);
  if ($241) {
   $242 = $39;
   $243 = $62;
   $244 = (_HUF_decodeSymbolX2($43,$242,$243)|0);
   $245 = $59;
   $246 = ((($245)) + 1|0);
   $59 = $246;
   HEAP8[$245>>0] = $244;
  }
  $247 = $39;
  $248 = $62;
  $249 = (_HUF_decodeSymbolX2($40,$247,$248)|0);
  $250 = $56;
  $251 = ((($250)) + 1|0);
  $56 = $251;
  HEAP8[$250>>0] = $249;
  $252 = $39;
  $253 = $62;
  $254 = (_HUF_decodeSymbolX2($41,$252,$253)|0);
  $255 = $57;
  $256 = ((($255)) + 1|0);
  $57 = $256;
  HEAP8[$255>>0] = $254;
  $257 = $39;
  $258 = $62;
  $259 = (_HUF_decodeSymbolX2($42,$257,$258)|0);
  $260 = $58;
  $261 = ((($260)) + 1|0);
  $58 = $261;
  HEAP8[$260>>0] = $259;
  $262 = $39;
  $263 = $62;
  $264 = (_HUF_decodeSymbolX2($43,$262,$263)|0);
  $265 = $59;
  $266 = ((($265)) + 1|0);
  $59 = $266;
  HEAP8[$265>>0] = $264;
  $267 = (_BIT_reloadDStream_126($40)|0);
  $268 = (_BIT_reloadDStream_126($41)|0);
  $269 = $267 | $268;
  $270 = (_BIT_reloadDStream_126($42)|0);
  $271 = $269 | $270;
  $272 = (_BIT_reloadDStream_126($43)|0);
  $273 = $271 | $272;
  $60 = $273;
 }
 $274 = $56;
 $275 = $53;
 $276 = ($274>>>0)>($275>>>0);
 if ($276) {
  $29 = -15;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 }
 $277 = $57;
 $278 = $54;
 $279 = ($277>>>0)>($278>>>0);
 if ($279) {
  $29 = -15;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 }
 $280 = $58;
 $281 = $55;
 $282 = ($280>>>0)>($281>>>0);
 if ($282) {
  $29 = -15;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 }
 $283 = $56;
 $284 = $53;
 $285 = $39;
 $286 = $62;
 $23 = $283;
 $24 = $40;
 $25 = $284;
 $26 = $285;
 $27 = $286;
 $287 = $23;
 $28 = $287;
 while(1) {
  $288 = $24;
  $289 = (_BIT_reloadDStream_126($288)|0);
  $290 = ($289|0)==(0);
  if (!($290)) {
   break;
  }
  $291 = $23;
  $292 = $25;
  $293 = ((($292)) + -4|0);
  $294 = ($291>>>0)<=($293>>>0);
  if (!($294)) {
   break;
  }
  $295 = (_MEM_64bits_127()|0);
  $296 = ($295|0)!=(0);
  if ($296) {
   $297 = $24;
   $298 = $26;
   $299 = $27;
   $300 = (_HUF_decodeSymbolX2($297,$298,$299)|0);
   $301 = $23;
   $302 = ((($301)) + 1|0);
   $23 = $302;
   HEAP8[$301>>0] = $300;
  }
  (_MEM_64bits_127()|0);
  $303 = $24;
  $304 = $26;
  $305 = $27;
  $306 = (_HUF_decodeSymbolX2($303,$304,$305)|0);
  $307 = $23;
  $308 = ((($307)) + 1|0);
  $23 = $308;
  HEAP8[$307>>0] = $306;
  $309 = (_MEM_64bits_127()|0);
  $310 = ($309|0)!=(0);
  if ($310) {
   $311 = $24;
   $312 = $26;
   $313 = $27;
   $314 = (_HUF_decodeSymbolX2($311,$312,$313)|0);
   $315 = $23;
   $316 = ((($315)) + 1|0);
   $23 = $316;
   HEAP8[$315>>0] = $314;
  }
  $317 = $24;
  $318 = $26;
  $319 = $27;
  $320 = (_HUF_decodeSymbolX2($317,$318,$319)|0);
  $321 = $23;
  $322 = ((($321)) + 1|0);
  $23 = $322;
  HEAP8[$321>>0] = $320;
 }
 while(1) {
  $323 = $24;
  $324 = (_BIT_reloadDStream_126($323)|0);
  $325 = ($324|0)==(0);
  if (!($325)) {
   break;
  }
  $326 = $23;
  $327 = $25;
  $328 = ($326>>>0)<($327>>>0);
  if (!($328)) {
   break;
  }
  $329 = $24;
  $330 = $26;
  $331 = $27;
  $332 = (_HUF_decodeSymbolX2($329,$330,$331)|0);
  $333 = $23;
  $334 = ((($333)) + 1|0);
  $23 = $334;
  HEAP8[$333>>0] = $332;
 }
 while(1) {
  $335 = $23;
  $336 = $25;
  $337 = ($335>>>0)<($336>>>0);
  if (!($337)) {
   break;
  }
  $338 = $24;
  $339 = $26;
  $340 = $27;
  $341 = (_HUF_decodeSymbolX2($338,$339,$340)|0);
  $342 = $23;
  $343 = ((($342)) + 1|0);
  $23 = $343;
  HEAP8[$342>>0] = $341;
 }
 $344 = $57;
 $345 = $54;
 $346 = $39;
 $347 = $62;
 $17 = $344;
 $18 = $41;
 $19 = $345;
 $20 = $346;
 $21 = $347;
 $348 = $17;
 $22 = $348;
 while(1) {
  $349 = $18;
  $350 = (_BIT_reloadDStream_126($349)|0);
  $351 = ($350|0)==(0);
  if (!($351)) {
   break;
  }
  $352 = $17;
  $353 = $19;
  $354 = ((($353)) + -4|0);
  $355 = ($352>>>0)<=($354>>>0);
  if (!($355)) {
   break;
  }
  $356 = (_MEM_64bits_127()|0);
  $357 = ($356|0)!=(0);
  if ($357) {
   $358 = $18;
   $359 = $20;
   $360 = $21;
   $361 = (_HUF_decodeSymbolX2($358,$359,$360)|0);
   $362 = $17;
   $363 = ((($362)) + 1|0);
   $17 = $363;
   HEAP8[$362>>0] = $361;
  }
  (_MEM_64bits_127()|0);
  $364 = $18;
  $365 = $20;
  $366 = $21;
  $367 = (_HUF_decodeSymbolX2($364,$365,$366)|0);
  $368 = $17;
  $369 = ((($368)) + 1|0);
  $17 = $369;
  HEAP8[$368>>0] = $367;
  $370 = (_MEM_64bits_127()|0);
  $371 = ($370|0)!=(0);
  if ($371) {
   $372 = $18;
   $373 = $20;
   $374 = $21;
   $375 = (_HUF_decodeSymbolX2($372,$373,$374)|0);
   $376 = $17;
   $377 = ((($376)) + 1|0);
   $17 = $377;
   HEAP8[$376>>0] = $375;
  }
  $378 = $18;
  $379 = $20;
  $380 = $21;
  $381 = (_HUF_decodeSymbolX2($378,$379,$380)|0);
  $382 = $17;
  $383 = ((($382)) + 1|0);
  $17 = $383;
  HEAP8[$382>>0] = $381;
 }
 while(1) {
  $384 = $18;
  $385 = (_BIT_reloadDStream_126($384)|0);
  $386 = ($385|0)==(0);
  if (!($386)) {
   break;
  }
  $387 = $17;
  $388 = $19;
  $389 = ($387>>>0)<($388>>>0);
  if (!($389)) {
   break;
  }
  $390 = $18;
  $391 = $20;
  $392 = $21;
  $393 = (_HUF_decodeSymbolX2($390,$391,$392)|0);
  $394 = $17;
  $395 = ((($394)) + 1|0);
  $17 = $395;
  HEAP8[$394>>0] = $393;
 }
 while(1) {
  $396 = $17;
  $397 = $19;
  $398 = ($396>>>0)<($397>>>0);
  if (!($398)) {
   break;
  }
  $399 = $18;
  $400 = $20;
  $401 = $21;
  $402 = (_HUF_decodeSymbolX2($399,$400,$401)|0);
  $403 = $17;
  $404 = ((($403)) + 1|0);
  $17 = $404;
  HEAP8[$403>>0] = $402;
 }
 $405 = $58;
 $406 = $55;
 $407 = $39;
 $408 = $62;
 $11 = $405;
 $12 = $42;
 $13 = $406;
 $14 = $407;
 $15 = $408;
 $409 = $11;
 $16 = $409;
 while(1) {
  $410 = $12;
  $411 = (_BIT_reloadDStream_126($410)|0);
  $412 = ($411|0)==(0);
  if (!($412)) {
   break;
  }
  $413 = $11;
  $414 = $13;
  $415 = ((($414)) + -4|0);
  $416 = ($413>>>0)<=($415>>>0);
  if (!($416)) {
   break;
  }
  $417 = (_MEM_64bits_127()|0);
  $418 = ($417|0)!=(0);
  if ($418) {
   $419 = $12;
   $420 = $14;
   $421 = $15;
   $422 = (_HUF_decodeSymbolX2($419,$420,$421)|0);
   $423 = $11;
   $424 = ((($423)) + 1|0);
   $11 = $424;
   HEAP8[$423>>0] = $422;
  }
  (_MEM_64bits_127()|0);
  $425 = $12;
  $426 = $14;
  $427 = $15;
  $428 = (_HUF_decodeSymbolX2($425,$426,$427)|0);
  $429 = $11;
  $430 = ((($429)) + 1|0);
  $11 = $430;
  HEAP8[$429>>0] = $428;
  $431 = (_MEM_64bits_127()|0);
  $432 = ($431|0)!=(0);
  if ($432) {
   $433 = $12;
   $434 = $14;
   $435 = $15;
   $436 = (_HUF_decodeSymbolX2($433,$434,$435)|0);
   $437 = $11;
   $438 = ((($437)) + 1|0);
   $11 = $438;
   HEAP8[$437>>0] = $436;
  }
  $439 = $12;
  $440 = $14;
  $441 = $15;
  $442 = (_HUF_decodeSymbolX2($439,$440,$441)|0);
  $443 = $11;
  $444 = ((($443)) + 1|0);
  $11 = $444;
  HEAP8[$443>>0] = $442;
 }
 while(1) {
  $445 = $12;
  $446 = (_BIT_reloadDStream_126($445)|0);
  $447 = ($446|0)==(0);
  if (!($447)) {
   break;
  }
  $448 = $11;
  $449 = $13;
  $450 = ($448>>>0)<($449>>>0);
  if (!($450)) {
   break;
  }
  $451 = $12;
  $452 = $14;
  $453 = $15;
  $454 = (_HUF_decodeSymbolX2($451,$452,$453)|0);
  $455 = $11;
  $456 = ((($455)) + 1|0);
  $11 = $456;
  HEAP8[$455>>0] = $454;
 }
 while(1) {
  $457 = $11;
  $458 = $13;
  $459 = ($457>>>0)<($458>>>0);
  if (!($459)) {
   break;
  }
  $460 = $12;
  $461 = $14;
  $462 = $15;
  $463 = (_HUF_decodeSymbolX2($460,$461,$462)|0);
  $464 = $11;
  $465 = ((($464)) + 1|0);
  $11 = $465;
  HEAP8[$464>>0] = $463;
 }
 $466 = $59;
 $467 = $37;
 $468 = $39;
 $469 = $62;
 $5 = $466;
 $6 = $43;
 $7 = $467;
 $8 = $468;
 $9 = $469;
 $470 = $5;
 $10 = $470;
 while(1) {
  $471 = $6;
  $472 = (_BIT_reloadDStream_126($471)|0);
  $473 = ($472|0)==(0);
  if (!($473)) {
   break;
  }
  $474 = $5;
  $475 = $7;
  $476 = ((($475)) + -4|0);
  $477 = ($474>>>0)<=($476>>>0);
  if (!($477)) {
   break;
  }
  $478 = (_MEM_64bits_127()|0);
  $479 = ($478|0)!=(0);
  if ($479) {
   $480 = $6;
   $481 = $8;
   $482 = $9;
   $483 = (_HUF_decodeSymbolX2($480,$481,$482)|0);
   $484 = $5;
   $485 = ((($484)) + 1|0);
   $5 = $485;
   HEAP8[$484>>0] = $483;
  }
  (_MEM_64bits_127()|0);
  $486 = $6;
  $487 = $8;
  $488 = $9;
  $489 = (_HUF_decodeSymbolX2($486,$487,$488)|0);
  $490 = $5;
  $491 = ((($490)) + 1|0);
  $5 = $491;
  HEAP8[$490>>0] = $489;
  $492 = (_MEM_64bits_127()|0);
  $493 = ($492|0)!=(0);
  if ($493) {
   $494 = $6;
   $495 = $8;
   $496 = $9;
   $497 = (_HUF_decodeSymbolX2($494,$495,$496)|0);
   $498 = $5;
   $499 = ((($498)) + 1|0);
   $5 = $499;
   HEAP8[$498>>0] = $497;
  }
  $500 = $6;
  $501 = $8;
  $502 = $9;
  $503 = (_HUF_decodeSymbolX2($500,$501,$502)|0);
  $504 = $5;
  $505 = ((($504)) + 1|0);
  $5 = $505;
  HEAP8[$504>>0] = $503;
 }
 while(1) {
  $506 = $6;
  $507 = (_BIT_reloadDStream_126($506)|0);
  $508 = ($507|0)==(0);
  if (!($508)) {
   break;
  }
  $509 = $5;
  $510 = $7;
  $511 = ($509>>>0)<($510>>>0);
  if (!($511)) {
   break;
  }
  $512 = $6;
  $513 = $8;
  $514 = $9;
  $515 = (_HUF_decodeSymbolX2($512,$513,$514)|0);
  $516 = $5;
  $517 = ((($516)) + 1|0);
  $5 = $517;
  HEAP8[$516>>0] = $515;
 }
 while(1) {
  $518 = $5;
  $519 = $7;
  $520 = ($518>>>0)<($519>>>0);
  if (!($520)) {
   break;
  }
  $521 = $6;
  $522 = $8;
  $523 = $9;
  $524 = (_HUF_decodeSymbolX2($521,$522,$523)|0);
  $525 = $5;
  $526 = ((($525)) + 1|0);
  $5 = $526;
  HEAP8[$525>>0] = $524;
 }
 $527 = (_BIT_endOfDStream($40)|0);
 $528 = (_BIT_endOfDStream($41)|0);
 $529 = $527 & $528;
 $530 = (_BIT_endOfDStream($42)|0);
 $531 = $529 & $530;
 $532 = (_BIT_endOfDStream($43)|0);
 $533 = $531 & $532;
 $60 = $533;
 $534 = $60;
 $535 = ($534|0)!=(0);
 if ($535) {
  $536 = $31;
  $29 = $536;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 } else {
  $29 = -15;
  $537 = $29;
  STACKTOP = sp;return ($537|0);
 }
 return (0)|0;
}
function _MEM_readLE16($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_MEM_isLittleEndian_134()|0);
 $5 = ($4|0)!=(0);
 $6 = $2;
 if ($5) {
  $7 = (_MEM_read16_141($6)|0);
  $1 = $7;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $3 = $6;
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $3;
  $12 = ((($11)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = (($10) + ($15))|0;
  $17 = $16&65535;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _MEM_read16_141($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8);
 STACKTOP = sp;return ($3|0);
}
function _HUF_decompress4X2_DCtx_wksp($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = $11;
 $15 = $17;
 $18 = $8;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = (_HUF_readDTableX2_wksp($18,$19,$20,$21,$22)|0);
 $16 = $23;
 $24 = $16;
 $25 = (_HUF_isError($24)|0);
 $26 = ($25|0)!=(0);
 $27 = $16;
 if ($26) {
  $7 = $27;
  $42 = $7;
  STACKTOP = sp;return ($42|0);
 }
 $28 = $12;
 $29 = ($27>>>0)>=($28>>>0);
 if ($29) {
  $7 = -14;
  $42 = $7;
  STACKTOP = sp;return ($42|0);
 } else {
  $30 = $16;
  $31 = $15;
  $32 = (($31) + ($30)|0);
  $15 = $32;
  $33 = $16;
  $34 = $12;
  $35 = (($34) - ($33))|0;
  $12 = $35;
  $36 = $9;
  $37 = $10;
  $38 = $15;
  $39 = $12;
  $40 = $8;
  $41 = (_HUF_decompress4X2_usingDTable_internal($36,$37,$38,$39,$40)|0);
  $7 = $41;
  $42 = $7;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _HUF_readDTableX4_wksp($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $11 = sp + 116|0;
 $14 = sp + 104|0;
 $15 = sp + 144|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $42 = $6;
 _HUF_getDTableDesc($15,$42);
 $43 = HEAP8[$15>>0]|0;
 $44 = $43&255;
 $16 = $44;
 $45 = $6;
 $46 = ((($45)) + 4|0);
 $18 = $46;
 $47 = $18;
 $19 = $47;
 $26 = 0;
 $48 = $9;
 $49 = $26;
 $50 = (($48) + ($49<<2)|0);
 $21 = $50;
 $51 = $26;
 $52 = (($51) + 156)|0;
 $26 = $52;
 $53 = $9;
 $54 = $26;
 $55 = (($53) + ($54<<2)|0);
 $22 = $55;
 $56 = $26;
 $57 = (($56) + 13)|0;
 $26 = $57;
 $58 = $9;
 $59 = $26;
 $60 = (($58) + ($59<<2)|0);
 $23 = $60;
 $61 = $26;
 $62 = (($61) + 14)|0;
 $26 = $62;
 $63 = $9;
 $64 = $26;
 $65 = $64<<2;
 $66 = (($65>>>0) / 2)&-1;
 $67 = (($63) + ($66<<1)|0);
 $24 = $67;
 $68 = $26;
 $69 = (($68) + 128)|0;
 $26 = $69;
 $70 = $9;
 $71 = $26;
 $72 = (($70) + ($71<<2)|0);
 $25 = $72;
 $73 = $26;
 $74 = (($73) + 64)|0;
 $26 = $74;
 $75 = $26;
 $76 = $75 << 2;
 $77 = $10;
 $78 = ($76>>>0)>($77>>>0);
 if ($78) {
  $5 = -17;
  $229 = $5;
  STACKTOP = sp;return ($229|0);
 }
 $79 = $9;
 $80 = $26;
 $81 = (($79) + ($80<<2)|0);
 $9 = $81;
 $82 = $26;
 $83 = $82 << 2;
 $84 = $10;
 $85 = (($84) - ($83))|0;
 $10 = $85;
 $86 = $23;
 $87 = ((($86)) + 4|0);
 $20 = $87;
 $88 = $22;
 dest=$88; stop=dest+108|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $89 = $16;
 $90 = ($89>>>0)>(12);
 if ($90) {
  $5 = -17;
  $229 = $5;
  STACKTOP = sp;return ($229|0);
 }
 $91 = $25;
 $92 = $22;
 $93 = $7;
 $94 = $8;
 $95 = (_HUF_readStats($91,256,$92,$14,$11,$93,$94)|0);
 $17 = $95;
 $96 = $17;
 $97 = (_HUF_isError($96)|0);
 $98 = ($97|0)!=(0);
 if ($98) {
  $99 = $17;
  $5 = $99;
  $229 = $5;
  STACKTOP = sp;return ($229|0);
 }
 $100 = HEAP32[$11>>2]|0;
 $101 = $16;
 $102 = ($100>>>0)>($101>>>0);
 if ($102) {
  $5 = -17;
  $229 = $5;
  STACKTOP = sp;return ($229|0);
 }
 $103 = HEAP32[$11>>2]|0;
 $12 = $103;
 while(1) {
  $104 = $22;
  $105 = $12;
  $106 = (($104) + ($105<<2)|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = ($107|0)==(0);
  if (!($108)) {
   break;
  }
  $109 = $12;
  $110 = (($109) + -1)|0;
  $12 = $110;
 }
 $28 = 0;
 $27 = 1;
 while(1) {
  $111 = $27;
  $112 = $12;
  $113 = (($112) + 1)|0;
  $114 = ($111>>>0)<($113>>>0);
  $115 = $28;
  if (!($114)) {
   break;
  }
  $29 = $115;
  $116 = $22;
  $117 = $27;
  $118 = (($116) + ($117<<2)|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = $28;
  $121 = (($120) + ($119))|0;
  $28 = $121;
  $122 = $29;
  $123 = $20;
  $124 = $27;
  $125 = (($123) + ($124<<2)|0);
  HEAP32[$125>>2] = $122;
  $126 = $27;
  $127 = (($126) + 1)|0;
  $27 = $127;
 }
 $128 = $20;
 HEAP32[$128>>2] = $115;
 $129 = $28;
 $13 = $129;
 $30 = 0;
 while(1) {
  $130 = $30;
  $131 = HEAP32[$14>>2]|0;
  $132 = ($130>>>0)<($131>>>0);
  if (!($132)) {
   break;
  }
  $133 = $25;
  $134 = $30;
  $135 = (($133) + ($134)|0);
  $136 = HEAP8[$135>>0]|0;
  $137 = $136&255;
  $31 = $137;
  $138 = $20;
  $139 = $31;
  $140 = (($138) + ($139<<2)|0);
  $141 = HEAP32[$140>>2]|0;
  $142 = (($141) + 1)|0;
  HEAP32[$140>>2] = $142;
  $32 = $141;
  $143 = $30;
  $144 = $143&255;
  $145 = $24;
  $146 = $32;
  $147 = (($145) + ($146<<1)|0);
  HEAP8[$147>>0] = $144;
  $148 = $31;
  $149 = $148&255;
  $150 = $24;
  $151 = $32;
  $152 = (($150) + ($151<<1)|0);
  $153 = ((($152)) + 1|0);
  HEAP8[$153>>0] = $149;
  $154 = $30;
  $155 = (($154) + 1)|0;
  $30 = $155;
 }
 $156 = $20;
 HEAP32[$156>>2] = 0;
 $157 = $21;
 $33 = $157;
 $158 = $16;
 $159 = HEAP32[$11>>2]|0;
 $160 = (($158) - ($159))|0;
 $161 = (($160) - 1)|0;
 $34 = $161;
 $35 = 0;
 $36 = 1;
 while(1) {
  $162 = $36;
  $163 = $12;
  $164 = (($163) + 1)|0;
  $165 = ($162>>>0)<($164>>>0);
  if (!($165)) {
   break;
  }
  $166 = $35;
  $37 = $166;
  $167 = $22;
  $168 = $36;
  $169 = (($167) + ($168<<2)|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = $36;
  $172 = $34;
  $173 = (($171) + ($172))|0;
  $174 = $170 << $173;
  $175 = $35;
  $176 = (($175) + ($174))|0;
  $35 = $176;
  $177 = $37;
  $178 = $33;
  $179 = $36;
  $180 = (($178) + ($179<<2)|0);
  HEAP32[$180>>2] = $177;
  $181 = $36;
  $182 = (($181) + 1)|0;
  $36 = $182;
 }
 $183 = HEAP32[$11>>2]|0;
 $184 = (($183) + 1)|0;
 $185 = $12;
 $186 = (($184) - ($185))|0;
 $38 = $186;
 $187 = $38;
 $39 = $187;
 while(1) {
  $188 = $39;
  $189 = $16;
  $190 = $38;
  $191 = (($189) - ($190))|0;
  $192 = (($191) + 1)|0;
  $193 = ($188>>>0)<($192>>>0);
  if (!($193)) {
   break;
  }
  $194 = $21;
  $195 = $39;
  $196 = (($194) + (($195*52)|0)|0);
  $40 = $196;
  $41 = 1;
  while(1) {
   $197 = $41;
   $198 = $12;
   $199 = (($198) + 1)|0;
   $200 = ($197>>>0)<($199>>>0);
   if (!($200)) {
    break;
   }
   $201 = $33;
   $202 = $41;
   $203 = (($201) + ($202<<2)|0);
   $204 = HEAP32[$203>>2]|0;
   $205 = $39;
   $206 = $204 >>> $205;
   $207 = $40;
   $208 = $41;
   $209 = (($207) + ($208<<2)|0);
   HEAP32[$209>>2] = $206;
   $210 = $41;
   $211 = (($210) + 1)|0;
   $41 = $211;
  }
  $212 = $39;
  $213 = (($212) + 1)|0;
  $39 = $213;
 }
 $214 = $19;
 $215 = $16;
 $216 = $24;
 $217 = $13;
 $218 = $23;
 $219 = $21;
 $220 = $12;
 $221 = HEAP32[$11>>2]|0;
 $222 = (($221) + 1)|0;
 _HUF_fillDTableX4($214,$215,$216,$217,$218,$219,$220,$222);
 $223 = $16;
 $224 = $223&255;
 $225 = ((($15)) + 2|0);
 HEAP8[$225>>0] = $224;
 $226 = ((($15)) + 1|0);
 HEAP8[$226>>0] = 1;
 $227 = $6;
 ;HEAP8[$227>>0]=HEAP8[$15>>0]|0;HEAP8[$227+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$227+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$227+3>>0]=HEAP8[$15+3>>0]|0;
 $228 = $17;
 $5 = $228;
 $229 = $5;
 STACKTOP = sp;return ($229|0);
}
function _HUF_fillDTableX4($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $16 = sp + 44|0;
 $27 = sp + 128|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $30 = $15;
 $31 = $9;
 $32 = (($30) - ($31))|0;
 $17 = $32;
 $33 = $15;
 $34 = $14;
 $35 = (($33) - ($34))|0;
 $18 = $35;
 $36 = $13;
 dest=$16; src=$36; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $19 = 0;
 while(1) {
  $37 = $19;
  $38 = $11;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $40 = $10;
  $41 = $19;
  $42 = (($40) + ($41<<1)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $20 = $44;
  $45 = $10;
  $46 = $19;
  $47 = (($45) + ($46<<1)|0);
  $48 = ((($47)) + 1|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $21 = $50;
  $51 = $15;
  $52 = $21;
  $53 = (($51) - ($52))|0;
  $22 = $53;
  $54 = $21;
  $55 = (($16) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $23 = $56;
  $57 = $9;
  $58 = $22;
  $59 = (($57) - ($58))|0;
  $60 = 1 << $59;
  $24 = $60;
  $61 = $9;
  $62 = $22;
  $63 = (($61) - ($62))|0;
  $64 = $18;
  $65 = ($63>>>0)>=($64>>>0);
  L4: do {
   if ($65) {
    $66 = $22;
    $67 = $17;
    $68 = (($66) + ($67))|0;
    $26 = $68;
    $69 = $26;
    $70 = ($69|0)<(1);
    $$ = $70 ? 1 : $68;
    $26 = $$;
    $71 = $12;
    $72 = $26;
    $73 = (($71) + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $25 = $74;
    $75 = $8;
    $76 = $23;
    $77 = (($75) + ($76<<2)|0);
    $78 = $9;
    $79 = $22;
    $80 = (($78) - ($79))|0;
    $81 = $22;
    $82 = $13;
    $83 = $22;
    $84 = (($82) + (($83*52)|0)|0);
    $85 = $26;
    $86 = $10;
    $87 = $25;
    $88 = (($86) + ($87<<1)|0);
    $89 = $11;
    $90 = $25;
    $91 = (($89) - ($90))|0;
    $92 = $15;
    $93 = $20;
    _HUF_fillDTableX4Level2($77,$80,$81,$84,$85,$88,$91,$92,$93);
   } else {
    $94 = $20;
    _MEM_writeLE16_142($27,$94);
    $95 = $22;
    $96 = $95&255;
    $97 = ((($27)) + 2|0);
    HEAP8[$97>>0] = $96;
    $98 = ((($27)) + 3|0);
    HEAP8[$98>>0] = 1;
    $99 = $23;
    $100 = $24;
    $101 = (($99) + ($100))|0;
    $28 = $101;
    $102 = $23;
    $29 = $102;
    while(1) {
     $103 = $29;
     $104 = $28;
     $105 = ($103>>>0)<($104>>>0);
     if (!($105)) {
      break L4;
     }
     $106 = $8;
     $107 = $29;
     $108 = (($106) + ($107<<2)|0);
     ;HEAP16[$108>>1]=HEAP16[$27>>1]|0;HEAP16[$108+2>>1]=HEAP16[$27+2>>1]|0;
     $109 = $29;
     $110 = (($109) + 1)|0;
     $29 = $110;
    }
   }
  } while(0);
  $111 = $24;
  $112 = $21;
  $113 = (($16) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + ($111))|0;
  HEAP32[$113>>2] = $115;
  $116 = $19;
  $117 = (($116) + 1)|0;
  $19 = $117;
 }
 STACKTOP = sp;return;
}
function _HUF_fillDTableX4Level2($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $18 = sp + 124|0;
 $19 = sp + 40|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $30 = $12;
 dest=$19; src=$30; stop=dest+52|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $31 = $13;
 $32 = ($31|0)>(1);
 L1: do {
  if ($32) {
   $33 = $13;
   $34 = (($19) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $21 = $35;
   $36 = $17;
   _MEM_writeLE16_142($18,$36);
   $37 = $11;
   $38 = $37&255;
   $39 = ((($18)) + 2|0);
   HEAP8[$39>>0] = $38;
   $40 = ((($18)) + 3|0);
   HEAP8[$40>>0] = 1;
   $20 = 0;
   while(1) {
    $41 = $20;
    $42 = $21;
    $43 = ($41>>>0)<($42>>>0);
    if (!($43)) {
     break L1;
    }
    $44 = $9;
    $45 = $20;
    $46 = (($44) + ($45<<2)|0);
    ;HEAP16[$46>>1]=HEAP16[$18>>1]|0;HEAP16[$46+2>>1]=HEAP16[$18+2>>1]|0;
    $47 = $20;
    $48 = (($47) + 1)|0;
    $20 = $48;
   }
  }
 } while(0);
 $22 = 0;
 while(1) {
  $49 = $22;
  $50 = $15;
  $51 = ($49>>>0)<($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $14;
  $53 = $22;
  $54 = (($52) + ($53<<1)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $23 = $56;
  $57 = $14;
  $58 = $22;
  $59 = (($57) + ($58<<1)|0);
  $60 = ((($59)) + 1|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $24 = $62;
  $63 = $16;
  $64 = $24;
  $65 = (($63) - ($64))|0;
  $25 = $65;
  $66 = $10;
  $67 = $25;
  $68 = (($66) - ($67))|0;
  $69 = 1 << $68;
  $26 = $69;
  $70 = $24;
  $71 = (($19) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $27 = $72;
  $73 = $27;
  $28 = $73;
  $74 = $27;
  $75 = $26;
  $76 = (($74) + ($75))|0;
  $29 = $76;
  $77 = $17;
  $78 = $77&65535;
  $79 = $23;
  $80 = $79 << 8;
  $81 = (($78) + ($80))|0;
  $82 = $81&65535;
  _MEM_writeLE16_142($18,$82);
  $83 = $25;
  $84 = $11;
  $85 = (($83) + ($84))|0;
  $86 = $85&255;
  $87 = ((($18)) + 2|0);
  HEAP8[$87>>0] = $86;
  $88 = ((($18)) + 3|0);
  HEAP8[$88>>0] = 2;
  while(1) {
   $89 = $9;
   $90 = $28;
   $91 = (($90) + 1)|0;
   $28 = $91;
   $92 = (($89) + ($90<<2)|0);
   ;HEAP16[$92>>1]=HEAP16[$18>>1]|0;HEAP16[$92+2>>1]=HEAP16[$18+2>>1]|0;
   $93 = $28;
   $94 = $29;
   $95 = ($93>>>0)<($94>>>0);
   if (!($95)) {
    break;
   }
  }
  $96 = $26;
  $97 = $24;
  $98 = (($19) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + ($96))|0;
  HEAP32[$98>>2] = $100;
  $101 = $22;
  $102 = (($101) + 1)|0;
  $22 = $102;
 }
 STACKTOP = sp;return;
}
function _MEM_writeLE16_142($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_MEM_isLittleEndian_134()|0);
 $6 = ($5|0)!=(0);
 $7 = $2;
 if ($6) {
  $8 = $3;
  _MEM_write16_143($7,$8);
  STACKTOP = sp;return;
 } else {
  $4 = $7;
  $9 = $3;
  $10 = $9&255;
  $11 = $4;
  HEAP8[$11>>0] = $10;
  $12 = $3;
  $13 = $12&65535;
  $14 = $13 >> 8;
  $15 = $14&255;
  $16 = $4;
  $17 = ((($16)) + 1|0);
  HEAP8[$17>>0] = $15;
  STACKTOP = sp;return;
 }
}
function _MEM_write16_143($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 HEAP8[$5>>0]=$4&255;HEAP8[$5+1>>0]=$4>>8;
 STACKTOP = sp;return;
}
function _HUF_decompress1X4_usingDTable_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $17 = sp + 20|0;
 $23 = sp + 88|0;
 $12 = $0;
 $13 = $1;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $24 = $14;
 $25 = $15;
 $26 = (_BIT_initDStream_125($17,$24,$25)|0);
 $18 = $26;
 $27 = $18;
 $28 = (_HUF_isError($27)|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $18;
  $11 = $30;
  $130 = $11;
  STACKTOP = sp;return ($130|0);
 }
 $31 = $12;
 $19 = $31;
 $32 = $19;
 $33 = $13;
 $34 = (($32) + ($33)|0);
 $20 = $34;
 $35 = $16;
 $36 = ((($35)) + 4|0);
 $21 = $36;
 $37 = $21;
 $22 = $37;
 $38 = $16;
 _HUF_getDTableDesc($23,$38);
 $39 = $19;
 $40 = $20;
 $41 = $22;
 $42 = ((($23)) + 2|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $5 = $39;
 $6 = $17;
 $7 = $40;
 $8 = $41;
 $9 = $44;
 $45 = $5;
 $10 = $45;
 while(1) {
  $46 = $6;
  $47 = (_BIT_reloadDStream_126($46)|0);
  $48 = ($47|0)==(0);
  $49 = $48&1;
  $50 = $5;
  $51 = $7;
  $52 = ((($51)) + -3|0);
  $53 = ($50>>>0)<($52>>>0);
  $54 = $53&1;
  $55 = $49 & $54;
  $56 = ($55|0)!=(0);
  if (!($56)) {
   break;
  }
  $57 = (_MEM_64bits_127()|0);
  $58 = ($57|0)!=(0);
  if ($58) {
   $59 = $5;
   $60 = $6;
   $61 = $8;
   $62 = $9;
   $63 = (_HUF_decodeSymbolX4($59,$60,$61,$62)|0);
   $64 = $5;
   $65 = (($64) + ($63)|0);
   $5 = $65;
  }
  (_MEM_64bits_127()|0);
  $66 = $5;
  $67 = $6;
  $68 = $8;
  $69 = $9;
  $70 = (_HUF_decodeSymbolX4($66,$67,$68,$69)|0);
  $71 = $5;
  $72 = (($71) + ($70)|0);
  $5 = $72;
  $73 = (_MEM_64bits_127()|0);
  $74 = ($73|0)!=(0);
  if ($74) {
   $75 = $5;
   $76 = $6;
   $77 = $8;
   $78 = $9;
   $79 = (_HUF_decodeSymbolX4($75,$76,$77,$78)|0);
   $80 = $5;
   $81 = (($80) + ($79)|0);
   $5 = $81;
  }
  $82 = $5;
  $83 = $6;
  $84 = $8;
  $85 = $9;
  $86 = (_HUF_decodeSymbolX4($82,$83,$84,$85)|0);
  $87 = $5;
  $88 = (($87) + ($86)|0);
  $5 = $88;
 }
 while(1) {
  $89 = $6;
  $90 = (_BIT_reloadDStream_126($89)|0);
  $91 = ($90|0)==(0);
  $92 = $91&1;
  $93 = $5;
  $94 = $7;
  $95 = ((($94)) + -2|0);
  $96 = ($93>>>0)<=($95>>>0);
  $97 = $96&1;
  $98 = $92 & $97;
  $99 = ($98|0)!=(0);
  if (!($99)) {
   break;
  }
  $100 = $5;
  $101 = $6;
  $102 = $8;
  $103 = $9;
  $104 = (_HUF_decodeSymbolX4($100,$101,$102,$103)|0);
  $105 = $5;
  $106 = (($105) + ($104)|0);
  $5 = $106;
 }
 while(1) {
  $107 = $5;
  $108 = $7;
  $109 = ((($108)) + -2|0);
  $110 = ($107>>>0)<=($109>>>0);
  $111 = $5;
  if (!($110)) {
   break;
  }
  $112 = $6;
  $113 = $8;
  $114 = $9;
  $115 = (_HUF_decodeSymbolX4($111,$112,$113,$114)|0);
  $116 = $5;
  $117 = (($116) + ($115)|0);
  $5 = $117;
 }
 $118 = $7;
 $119 = ($111>>>0)<($118>>>0);
 if ($119) {
  $120 = $5;
  $121 = $6;
  $122 = $8;
  $123 = $9;
  $124 = (_HUF_decodeLastSymbolX4($120,$121,$122,$123)|0);
  $125 = $5;
  $126 = (($125) + ($124)|0);
  $5 = $126;
 }
 $127 = (_BIT_endOfDStream($17)|0);
 $128 = ($127|0)!=(0);
 if ($128) {
  $129 = $13;
  $11 = $129;
  $130 = $11;
  STACKTOP = sp;return ($130|0);
 } else {
  $11 = -15;
  $130 = $11;
  STACKTOP = sp;return ($130|0);
 }
 return (0)|0;
}
function _HUF_decodeSymbolX4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (_BIT_lookBitsFast_128($9,$10)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;HEAP8[$12+1>>0]=HEAP8[$15+1>>0]|0;
 $16 = $5;
 $17 = $6;
 $18 = $8;
 $19 = (($17) + ($18<<2)|0);
 $20 = ((($19)) + 2|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 _BIT_skipBits_129($16,$22);
 $23 = $6;
 $24 = $8;
 $25 = (($23) + ($24<<2)|0);
 $26 = ((($25)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 STACKTOP = sp;return ($28|0);
}
function _HUF_decodeLastSymbolX4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (_BIT_lookBitsFast_128($9,$10)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
 $16 = $6;
 $17 = $8;
 $18 = (($16) + ($17<<2)|0);
 $19 = ((($18)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(1);
 $23 = $5;
 if ($22) {
  $24 = $6;
  $25 = $8;
  $26 = (($24) + ($25<<2)|0);
  $27 = ((($26)) + 2|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  _BIT_skipBits_129($23,$29);
  STACKTOP = sp;return 1;
 }
 $30 = ((($23)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31>>>0)<(32);
 if (!($32)) {
  STACKTOP = sp;return 1;
 }
 $33 = $5;
 $34 = $6;
 $35 = $8;
 $36 = (($34) + ($35<<2)|0);
 $37 = ((($36)) + 2|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 _BIT_skipBits_129($33,$39);
 $40 = $5;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42>>>0)>(32);
 if (!($43)) {
  STACKTOP = sp;return 1;
 }
 $44 = $5;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = 32;
 STACKTOP = sp;return 1;
}
function _HUF_decompress4X4_usingDTable_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $40 = sp + 152|0;
 $41 = sp + 132|0;
 $42 = sp + 112|0;
 $43 = sp + 92|0;
 $61 = sp + 312|0;
 $30 = $0;
 $31 = $1;
 $32 = $2;
 $33 = $3;
 $34 = $4;
 $68 = $33;
 $69 = ($68>>>0)<(10);
 if ($69) {
  $29 = -15;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 }
 $70 = $32;
 $35 = $70;
 $71 = $30;
 $36 = $71;
 $72 = $36;
 $73 = $31;
 $74 = (($72) + ($73)|0);
 $37 = $74;
 $75 = $34;
 $76 = ((($75)) + 4|0);
 $38 = $76;
 $77 = $38;
 $39 = $77;
 $78 = $35;
 $79 = (_MEM_readLE16($78)|0);
 $80 = $79&65535;
 $44 = $80;
 $81 = $35;
 $82 = ((($81)) + 2|0);
 $83 = (_MEM_readLE16($82)|0);
 $84 = $83&65535;
 $45 = $84;
 $85 = $35;
 $86 = ((($85)) + 4|0);
 $87 = (_MEM_readLE16($86)|0);
 $88 = $87&65535;
 $46 = $88;
 $89 = $33;
 $90 = $44;
 $91 = $45;
 $92 = (($90) + ($91))|0;
 $93 = $46;
 $94 = (($92) + ($93))|0;
 $95 = (($94) + 6)|0;
 $96 = (($89) - ($95))|0;
 $47 = $96;
 $97 = $35;
 $98 = ((($97)) + 6|0);
 $48 = $98;
 $99 = $48;
 $100 = $44;
 $101 = (($99) + ($100)|0);
 $49 = $101;
 $102 = $49;
 $103 = $45;
 $104 = (($102) + ($103)|0);
 $50 = $104;
 $105 = $50;
 $106 = $46;
 $107 = (($105) + ($106)|0);
 $51 = $107;
 $108 = $31;
 $109 = (($108) + 3)|0;
 $110 = (($109>>>0) / 4)&-1;
 $52 = $110;
 $111 = $36;
 $112 = $52;
 $113 = (($111) + ($112)|0);
 $53 = $113;
 $114 = $53;
 $115 = $52;
 $116 = (($114) + ($115)|0);
 $54 = $116;
 $117 = $54;
 $118 = $52;
 $119 = (($117) + ($118)|0);
 $55 = $119;
 $120 = $36;
 $56 = $120;
 $121 = $53;
 $57 = $121;
 $122 = $54;
 $58 = $122;
 $123 = $55;
 $59 = $123;
 $124 = $34;
 _HUF_getDTableDesc($61,$124);
 $125 = ((($61)) + 2|0);
 $126 = HEAP8[$125>>0]|0;
 $127 = $126&255;
 $62 = $127;
 $128 = $47;
 $129 = $33;
 $130 = ($128>>>0)>($129>>>0);
 if ($130) {
  $29 = -15;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 }
 $131 = $48;
 $132 = $44;
 $133 = (_BIT_initDStream_125($40,$131,$132)|0);
 $63 = $133;
 $134 = $63;
 $135 = (_HUF_isError($134)|0);
 $136 = ($135|0)!=(0);
 if ($136) {
  $137 = $63;
  $29 = $137;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 }
 $138 = $49;
 $139 = $45;
 $140 = (_BIT_initDStream_125($41,$138,$139)|0);
 $64 = $140;
 $141 = $64;
 $142 = (_HUF_isError($141)|0);
 $143 = ($142|0)!=(0);
 if ($143) {
  $144 = $64;
  $29 = $144;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 }
 $145 = $50;
 $146 = $46;
 $147 = (_BIT_initDStream_125($42,$145,$146)|0);
 $65 = $147;
 $148 = $65;
 $149 = (_HUF_isError($148)|0);
 $150 = ($149|0)!=(0);
 if ($150) {
  $151 = $65;
  $29 = $151;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 }
 $152 = $51;
 $153 = $47;
 $154 = (_BIT_initDStream_125($43,$152,$153)|0);
 $66 = $154;
 $155 = $66;
 $156 = (_HUF_isError($155)|0);
 $157 = ($156|0)!=(0);
 if ($157) {
  $158 = $66;
  $29 = $158;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 }
 $159 = (_BIT_reloadDStream_126($40)|0);
 $160 = (_BIT_reloadDStream_126($41)|0);
 $161 = $159 | $160;
 $162 = (_BIT_reloadDStream_126($42)|0);
 $163 = $161 | $162;
 $164 = (_BIT_reloadDStream_126($43)|0);
 $165 = $163 | $164;
 $60 = $165;
 while(1) {
  $166 = $60;
  $167 = ($166|0)==(0);
  $168 = $167&1;
  $169 = $59;
  $170 = $37;
  $171 = ((($170)) + -3|0);
  $172 = ($169>>>0)<($171>>>0);
  $173 = $172&1;
  $174 = $168 & $173;
  $175 = ($174|0)!=(0);
  if (!($175)) {
   break;
  }
  $176 = (_MEM_64bits_127()|0);
  $177 = ($176|0)!=(0);
  if ($177) {
   $178 = $56;
   $179 = $39;
   $180 = $62;
   $181 = (_HUF_decodeSymbolX4($178,$40,$179,$180)|0);
   $182 = $56;
   $183 = (($182) + ($181)|0);
   $56 = $183;
  }
  $184 = (_MEM_64bits_127()|0);
  $185 = ($184|0)!=(0);
  if ($185) {
   $186 = $57;
   $187 = $39;
   $188 = $62;
   $189 = (_HUF_decodeSymbolX4($186,$41,$187,$188)|0);
   $190 = $57;
   $191 = (($190) + ($189)|0);
   $57 = $191;
  }
  $192 = (_MEM_64bits_127()|0);
  $193 = ($192|0)!=(0);
  if ($193) {
   $194 = $58;
   $195 = $39;
   $196 = $62;
   $197 = (_HUF_decodeSymbolX4($194,$42,$195,$196)|0);
   $198 = $58;
   $199 = (($198) + ($197)|0);
   $58 = $199;
  }
  $200 = (_MEM_64bits_127()|0);
  $201 = ($200|0)!=(0);
  if ($201) {
   $202 = $59;
   $203 = $39;
   $204 = $62;
   $205 = (_HUF_decodeSymbolX4($202,$43,$203,$204)|0);
   $206 = $59;
   $207 = (($206) + ($205)|0);
   $59 = $207;
  }
  (_MEM_64bits_127()|0);
  $208 = $56;
  $209 = $39;
  $210 = $62;
  $211 = (_HUF_decodeSymbolX4($208,$40,$209,$210)|0);
  $212 = $56;
  $213 = (($212) + ($211)|0);
  $56 = $213;
  (_MEM_64bits_127()|0);
  $214 = $57;
  $215 = $39;
  $216 = $62;
  $217 = (_HUF_decodeSymbolX4($214,$41,$215,$216)|0);
  $218 = $57;
  $219 = (($218) + ($217)|0);
  $57 = $219;
  (_MEM_64bits_127()|0);
  $220 = $58;
  $221 = $39;
  $222 = $62;
  $223 = (_HUF_decodeSymbolX4($220,$42,$221,$222)|0);
  $224 = $58;
  $225 = (($224) + ($223)|0);
  $58 = $225;
  (_MEM_64bits_127()|0);
  $226 = $59;
  $227 = $39;
  $228 = $62;
  $229 = (_HUF_decodeSymbolX4($226,$43,$227,$228)|0);
  $230 = $59;
  $231 = (($230) + ($229)|0);
  $59 = $231;
  $232 = (_MEM_64bits_127()|0);
  $233 = ($232|0)!=(0);
  if ($233) {
   $234 = $56;
   $235 = $39;
   $236 = $62;
   $237 = (_HUF_decodeSymbolX4($234,$40,$235,$236)|0);
   $238 = $56;
   $239 = (($238) + ($237)|0);
   $56 = $239;
  }
  $240 = (_MEM_64bits_127()|0);
  $241 = ($240|0)!=(0);
  if ($241) {
   $242 = $57;
   $243 = $39;
   $244 = $62;
   $245 = (_HUF_decodeSymbolX4($242,$41,$243,$244)|0);
   $246 = $57;
   $247 = (($246) + ($245)|0);
   $57 = $247;
  }
  $248 = (_MEM_64bits_127()|0);
  $249 = ($248|0)!=(0);
  if ($249) {
   $250 = $58;
   $251 = $39;
   $252 = $62;
   $253 = (_HUF_decodeSymbolX4($250,$42,$251,$252)|0);
   $254 = $58;
   $255 = (($254) + ($253)|0);
   $58 = $255;
  }
  $256 = (_MEM_64bits_127()|0);
  $257 = ($256|0)!=(0);
  if ($257) {
   $258 = $59;
   $259 = $39;
   $260 = $62;
   $261 = (_HUF_decodeSymbolX4($258,$43,$259,$260)|0);
   $262 = $59;
   $263 = (($262) + ($261)|0);
   $59 = $263;
  }
  $264 = $56;
  $265 = $39;
  $266 = $62;
  $267 = (_HUF_decodeSymbolX4($264,$40,$265,$266)|0);
  $268 = $56;
  $269 = (($268) + ($267)|0);
  $56 = $269;
  $270 = $57;
  $271 = $39;
  $272 = $62;
  $273 = (_HUF_decodeSymbolX4($270,$41,$271,$272)|0);
  $274 = $57;
  $275 = (($274) + ($273)|0);
  $57 = $275;
  $276 = $58;
  $277 = $39;
  $278 = $62;
  $279 = (_HUF_decodeSymbolX4($276,$42,$277,$278)|0);
  $280 = $58;
  $281 = (($280) + ($279)|0);
  $58 = $281;
  $282 = $59;
  $283 = $39;
  $284 = $62;
  $285 = (_HUF_decodeSymbolX4($282,$43,$283,$284)|0);
  $286 = $59;
  $287 = (($286) + ($285)|0);
  $59 = $287;
  $288 = (_BIT_reloadDStream_126($40)|0);
  $289 = (_BIT_reloadDStream_126($41)|0);
  $290 = $288 | $289;
  $291 = (_BIT_reloadDStream_126($42)|0);
  $292 = $290 | $291;
  $293 = (_BIT_reloadDStream_126($43)|0);
  $294 = $292 | $293;
  $60 = $294;
 }
 $295 = $56;
 $296 = $53;
 $297 = ($295>>>0)>($296>>>0);
 if ($297) {
  $29 = -15;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 }
 $298 = $57;
 $299 = $54;
 $300 = ($298>>>0)>($299>>>0);
 if ($300) {
  $29 = -15;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 }
 $301 = $58;
 $302 = $55;
 $303 = ($301>>>0)>($302>>>0);
 if ($303) {
  $29 = -15;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 }
 $304 = $56;
 $305 = $53;
 $306 = $39;
 $307 = $62;
 $23 = $304;
 $24 = $40;
 $25 = $305;
 $26 = $306;
 $27 = $307;
 $308 = $23;
 $28 = $308;
 while(1) {
  $309 = $24;
  $310 = (_BIT_reloadDStream_126($309)|0);
  $311 = ($310|0)==(0);
  $312 = $311&1;
  $313 = $23;
  $314 = $25;
  $315 = ((($314)) + -3|0);
  $316 = ($313>>>0)<($315>>>0);
  $317 = $316&1;
  $318 = $312 & $317;
  $319 = ($318|0)!=(0);
  if (!($319)) {
   break;
  }
  $320 = (_MEM_64bits_127()|0);
  $321 = ($320|0)!=(0);
  if ($321) {
   $322 = $23;
   $323 = $24;
   $324 = $26;
   $325 = $27;
   $326 = (_HUF_decodeSymbolX4($322,$323,$324,$325)|0);
   $327 = $23;
   $328 = (($327) + ($326)|0);
   $23 = $328;
  }
  (_MEM_64bits_127()|0);
  $329 = $23;
  $330 = $24;
  $331 = $26;
  $332 = $27;
  $333 = (_HUF_decodeSymbolX4($329,$330,$331,$332)|0);
  $334 = $23;
  $335 = (($334) + ($333)|0);
  $23 = $335;
  $336 = (_MEM_64bits_127()|0);
  $337 = ($336|0)!=(0);
  if ($337) {
   $338 = $23;
   $339 = $24;
   $340 = $26;
   $341 = $27;
   $342 = (_HUF_decodeSymbolX4($338,$339,$340,$341)|0);
   $343 = $23;
   $344 = (($343) + ($342)|0);
   $23 = $344;
  }
  $345 = $23;
  $346 = $24;
  $347 = $26;
  $348 = $27;
  $349 = (_HUF_decodeSymbolX4($345,$346,$347,$348)|0);
  $350 = $23;
  $351 = (($350) + ($349)|0);
  $23 = $351;
 }
 while(1) {
  $352 = $24;
  $353 = (_BIT_reloadDStream_126($352)|0);
  $354 = ($353|0)==(0);
  $355 = $354&1;
  $356 = $23;
  $357 = $25;
  $358 = ((($357)) + -2|0);
  $359 = ($356>>>0)<=($358>>>0);
  $360 = $359&1;
  $361 = $355 & $360;
  $362 = ($361|0)!=(0);
  if (!($362)) {
   break;
  }
  $363 = $23;
  $364 = $24;
  $365 = $26;
  $366 = $27;
  $367 = (_HUF_decodeSymbolX4($363,$364,$365,$366)|0);
  $368 = $23;
  $369 = (($368) + ($367)|0);
  $23 = $369;
 }
 while(1) {
  $370 = $23;
  $371 = $25;
  $372 = ((($371)) + -2|0);
  $373 = ($370>>>0)<=($372>>>0);
  $374 = $23;
  if (!($373)) {
   break;
  }
  $375 = $24;
  $376 = $26;
  $377 = $27;
  $378 = (_HUF_decodeSymbolX4($374,$375,$376,$377)|0);
  $379 = $23;
  $380 = (($379) + ($378)|0);
  $23 = $380;
 }
 $381 = $25;
 $382 = ($374>>>0)<($381>>>0);
 if ($382) {
  $383 = $23;
  $384 = $24;
  $385 = $26;
  $386 = $27;
  $387 = (_HUF_decodeLastSymbolX4($383,$384,$385,$386)|0);
  $388 = $23;
  $389 = (($388) + ($387)|0);
  $23 = $389;
 }
 $390 = $57;
 $391 = $54;
 $392 = $39;
 $393 = $62;
 $17 = $390;
 $18 = $41;
 $19 = $391;
 $20 = $392;
 $21 = $393;
 $394 = $17;
 $22 = $394;
 while(1) {
  $395 = $18;
  $396 = (_BIT_reloadDStream_126($395)|0);
  $397 = ($396|0)==(0);
  $398 = $397&1;
  $399 = $17;
  $400 = $19;
  $401 = ((($400)) + -3|0);
  $402 = ($399>>>0)<($401>>>0);
  $403 = $402&1;
  $404 = $398 & $403;
  $405 = ($404|0)!=(0);
  if (!($405)) {
   break;
  }
  $406 = (_MEM_64bits_127()|0);
  $407 = ($406|0)!=(0);
  if ($407) {
   $408 = $17;
   $409 = $18;
   $410 = $20;
   $411 = $21;
   $412 = (_HUF_decodeSymbolX4($408,$409,$410,$411)|0);
   $413 = $17;
   $414 = (($413) + ($412)|0);
   $17 = $414;
  }
  (_MEM_64bits_127()|0);
  $415 = $17;
  $416 = $18;
  $417 = $20;
  $418 = $21;
  $419 = (_HUF_decodeSymbolX4($415,$416,$417,$418)|0);
  $420 = $17;
  $421 = (($420) + ($419)|0);
  $17 = $421;
  $422 = (_MEM_64bits_127()|0);
  $423 = ($422|0)!=(0);
  if ($423) {
   $424 = $17;
   $425 = $18;
   $426 = $20;
   $427 = $21;
   $428 = (_HUF_decodeSymbolX4($424,$425,$426,$427)|0);
   $429 = $17;
   $430 = (($429) + ($428)|0);
   $17 = $430;
  }
  $431 = $17;
  $432 = $18;
  $433 = $20;
  $434 = $21;
  $435 = (_HUF_decodeSymbolX4($431,$432,$433,$434)|0);
  $436 = $17;
  $437 = (($436) + ($435)|0);
  $17 = $437;
 }
 while(1) {
  $438 = $18;
  $439 = (_BIT_reloadDStream_126($438)|0);
  $440 = ($439|0)==(0);
  $441 = $440&1;
  $442 = $17;
  $443 = $19;
  $444 = ((($443)) + -2|0);
  $445 = ($442>>>0)<=($444>>>0);
  $446 = $445&1;
  $447 = $441 & $446;
  $448 = ($447|0)!=(0);
  if (!($448)) {
   break;
  }
  $449 = $17;
  $450 = $18;
  $451 = $20;
  $452 = $21;
  $453 = (_HUF_decodeSymbolX4($449,$450,$451,$452)|0);
  $454 = $17;
  $455 = (($454) + ($453)|0);
  $17 = $455;
 }
 while(1) {
  $456 = $17;
  $457 = $19;
  $458 = ((($457)) + -2|0);
  $459 = ($456>>>0)<=($458>>>0);
  $460 = $17;
  if (!($459)) {
   break;
  }
  $461 = $18;
  $462 = $20;
  $463 = $21;
  $464 = (_HUF_decodeSymbolX4($460,$461,$462,$463)|0);
  $465 = $17;
  $466 = (($465) + ($464)|0);
  $17 = $466;
 }
 $467 = $19;
 $468 = ($460>>>0)<($467>>>0);
 if ($468) {
  $469 = $17;
  $470 = $18;
  $471 = $20;
  $472 = $21;
  $473 = (_HUF_decodeLastSymbolX4($469,$470,$471,$472)|0);
  $474 = $17;
  $475 = (($474) + ($473)|0);
  $17 = $475;
 }
 $476 = $58;
 $477 = $55;
 $478 = $39;
 $479 = $62;
 $11 = $476;
 $12 = $42;
 $13 = $477;
 $14 = $478;
 $15 = $479;
 $480 = $11;
 $16 = $480;
 while(1) {
  $481 = $12;
  $482 = (_BIT_reloadDStream_126($481)|0);
  $483 = ($482|0)==(0);
  $484 = $483&1;
  $485 = $11;
  $486 = $13;
  $487 = ((($486)) + -3|0);
  $488 = ($485>>>0)<($487>>>0);
  $489 = $488&1;
  $490 = $484 & $489;
  $491 = ($490|0)!=(0);
  if (!($491)) {
   break;
  }
  $492 = (_MEM_64bits_127()|0);
  $493 = ($492|0)!=(0);
  if ($493) {
   $494 = $11;
   $495 = $12;
   $496 = $14;
   $497 = $15;
   $498 = (_HUF_decodeSymbolX4($494,$495,$496,$497)|0);
   $499 = $11;
   $500 = (($499) + ($498)|0);
   $11 = $500;
  }
  (_MEM_64bits_127()|0);
  $501 = $11;
  $502 = $12;
  $503 = $14;
  $504 = $15;
  $505 = (_HUF_decodeSymbolX4($501,$502,$503,$504)|0);
  $506 = $11;
  $507 = (($506) + ($505)|0);
  $11 = $507;
  $508 = (_MEM_64bits_127()|0);
  $509 = ($508|0)!=(0);
  if ($509) {
   $510 = $11;
   $511 = $12;
   $512 = $14;
   $513 = $15;
   $514 = (_HUF_decodeSymbolX4($510,$511,$512,$513)|0);
   $515 = $11;
   $516 = (($515) + ($514)|0);
   $11 = $516;
  }
  $517 = $11;
  $518 = $12;
  $519 = $14;
  $520 = $15;
  $521 = (_HUF_decodeSymbolX4($517,$518,$519,$520)|0);
  $522 = $11;
  $523 = (($522) + ($521)|0);
  $11 = $523;
 }
 while(1) {
  $524 = $12;
  $525 = (_BIT_reloadDStream_126($524)|0);
  $526 = ($525|0)==(0);
  $527 = $526&1;
  $528 = $11;
  $529 = $13;
  $530 = ((($529)) + -2|0);
  $531 = ($528>>>0)<=($530>>>0);
  $532 = $531&1;
  $533 = $527 & $532;
  $534 = ($533|0)!=(0);
  if (!($534)) {
   break;
  }
  $535 = $11;
  $536 = $12;
  $537 = $14;
  $538 = $15;
  $539 = (_HUF_decodeSymbolX4($535,$536,$537,$538)|0);
  $540 = $11;
  $541 = (($540) + ($539)|0);
  $11 = $541;
 }
 while(1) {
  $542 = $11;
  $543 = $13;
  $544 = ((($543)) + -2|0);
  $545 = ($542>>>0)<=($544>>>0);
  $546 = $11;
  if (!($545)) {
   break;
  }
  $547 = $12;
  $548 = $14;
  $549 = $15;
  $550 = (_HUF_decodeSymbolX4($546,$547,$548,$549)|0);
  $551 = $11;
  $552 = (($551) + ($550)|0);
  $11 = $552;
 }
 $553 = $13;
 $554 = ($546>>>0)<($553>>>0);
 if ($554) {
  $555 = $11;
  $556 = $12;
  $557 = $14;
  $558 = $15;
  $559 = (_HUF_decodeLastSymbolX4($555,$556,$557,$558)|0);
  $560 = $11;
  $561 = (($560) + ($559)|0);
  $11 = $561;
 }
 $562 = $59;
 $563 = $37;
 $564 = $39;
 $565 = $62;
 $5 = $562;
 $6 = $43;
 $7 = $563;
 $8 = $564;
 $9 = $565;
 $566 = $5;
 $10 = $566;
 while(1) {
  $567 = $6;
  $568 = (_BIT_reloadDStream_126($567)|0);
  $569 = ($568|0)==(0);
  $570 = $569&1;
  $571 = $5;
  $572 = $7;
  $573 = ((($572)) + -3|0);
  $574 = ($571>>>0)<($573>>>0);
  $575 = $574&1;
  $576 = $570 & $575;
  $577 = ($576|0)!=(0);
  if (!($577)) {
   break;
  }
  $578 = (_MEM_64bits_127()|0);
  $579 = ($578|0)!=(0);
  if ($579) {
   $580 = $5;
   $581 = $6;
   $582 = $8;
   $583 = $9;
   $584 = (_HUF_decodeSymbolX4($580,$581,$582,$583)|0);
   $585 = $5;
   $586 = (($585) + ($584)|0);
   $5 = $586;
  }
  (_MEM_64bits_127()|0);
  $587 = $5;
  $588 = $6;
  $589 = $8;
  $590 = $9;
  $591 = (_HUF_decodeSymbolX4($587,$588,$589,$590)|0);
  $592 = $5;
  $593 = (($592) + ($591)|0);
  $5 = $593;
  $594 = (_MEM_64bits_127()|0);
  $595 = ($594|0)!=(0);
  if ($595) {
   $596 = $5;
   $597 = $6;
   $598 = $8;
   $599 = $9;
   $600 = (_HUF_decodeSymbolX4($596,$597,$598,$599)|0);
   $601 = $5;
   $602 = (($601) + ($600)|0);
   $5 = $602;
  }
  $603 = $5;
  $604 = $6;
  $605 = $8;
  $606 = $9;
  $607 = (_HUF_decodeSymbolX4($603,$604,$605,$606)|0);
  $608 = $5;
  $609 = (($608) + ($607)|0);
  $5 = $609;
 }
 while(1) {
  $610 = $6;
  $611 = (_BIT_reloadDStream_126($610)|0);
  $612 = ($611|0)==(0);
  $613 = $612&1;
  $614 = $5;
  $615 = $7;
  $616 = ((($615)) + -2|0);
  $617 = ($614>>>0)<=($616>>>0);
  $618 = $617&1;
  $619 = $613 & $618;
  $620 = ($619|0)!=(0);
  if (!($620)) {
   break;
  }
  $621 = $5;
  $622 = $6;
  $623 = $8;
  $624 = $9;
  $625 = (_HUF_decodeSymbolX4($621,$622,$623,$624)|0);
  $626 = $5;
  $627 = (($626) + ($625)|0);
  $5 = $627;
 }
 while(1) {
  $628 = $5;
  $629 = $7;
  $630 = ((($629)) + -2|0);
  $631 = ($628>>>0)<=($630>>>0);
  $632 = $5;
  if (!($631)) {
   break;
  }
  $633 = $6;
  $634 = $8;
  $635 = $9;
  $636 = (_HUF_decodeSymbolX4($632,$633,$634,$635)|0);
  $637 = $5;
  $638 = (($637) + ($636)|0);
  $5 = $638;
 }
 $639 = $7;
 $640 = ($632>>>0)<($639>>>0);
 if ($640) {
  $641 = $5;
  $642 = $6;
  $643 = $8;
  $644 = $9;
  $645 = (_HUF_decodeLastSymbolX4($641,$642,$643,$644)|0);
  $646 = $5;
  $647 = (($646) + ($645)|0);
  $5 = $647;
 }
 $648 = (_BIT_endOfDStream($40)|0);
 $649 = (_BIT_endOfDStream($41)|0);
 $650 = $648 & $649;
 $651 = (_BIT_endOfDStream($42)|0);
 $652 = $650 & $651;
 $653 = (_BIT_endOfDStream($43)|0);
 $654 = $652 & $653;
 $67 = $654;
 $655 = $67;
 $656 = ($655|0)!=(0);
 if ($656) {
  $657 = $31;
  $29 = $657;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 } else {
  $29 = -15;
  $658 = $29;
  STACKTOP = sp;return ($658|0);
 }
 return (0)|0;
}
function _HUF_decompress4X4_DCtx_wksp($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $17 = $11;
 $15 = $17;
 $18 = $8;
 $19 = $11;
 $20 = $12;
 $21 = $13;
 $22 = $14;
 $23 = (_HUF_readDTableX4_wksp($18,$19,$20,$21,$22)|0);
 $16 = $23;
 $24 = $16;
 $25 = (_HUF_isError($24)|0);
 $26 = ($25|0)!=(0);
 $27 = $16;
 if ($26) {
  $7 = $27;
  $42 = $7;
  STACKTOP = sp;return ($42|0);
 }
 $28 = $12;
 $29 = ($27>>>0)>=($28>>>0);
 if ($29) {
  $7 = -14;
  $42 = $7;
  STACKTOP = sp;return ($42|0);
 } else {
  $30 = $16;
  $31 = $15;
  $32 = (($31) + ($30)|0);
  $15 = $32;
  $33 = $16;
  $34 = $12;
  $35 = (($34) - ($33))|0;
  $12 = $35;
  $36 = $9;
  $37 = $10;
  $38 = $15;
  $39 = $12;
  $40 = $8;
  $41 = (_HUF_decompress4X4_usingDTable_internal($36,$37,$38,$39,$40)|0);
  $7 = $41;
  $42 = $7;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _HUF_decompress1X_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp + 20|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $9;
 _HUF_getDTableDesc($10,$11);
 $12 = ((($10)) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)!=(0);
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 if ($15) {
  $21 = (_HUF_decompress1X4_usingDTable_internal($16,$17,$18,$19,$20)|0);
  $23 = $21;
  STACKTOP = sp;return ($23|0);
 } else {
  $22 = (_HUF_decompress1X2_usingDTable_internal($16,$17,$18,$19,$20)|0);
  $23 = $22;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _HUF_decompress4X_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $10 = sp + 20|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $9;
 _HUF_getDTableDesc($10,$11);
 $12 = ((($10)) + 1|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($14|0)!=(0);
 $16 = $5;
 $17 = $6;
 $18 = $7;
 $19 = $8;
 $20 = $9;
 if ($15) {
  $21 = (_HUF_decompress4X4_usingDTable_internal($16,$17,$18,$19,$20)|0);
  $23 = $21;
  STACKTOP = sp;return ($23|0);
 } else {
  $22 = (_HUF_decompress4X2_usingDTable_internal($16,$17,$18,$19,$20)|0);
  $23 = $22;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _HUF_selectDecoder($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = $8<<4;
 $10 = $2;
 $11 = (($9>>>0) / ($10>>>0))&-1;
 $4 = $11;
 $12 = $2;
 $13 = $12 >>> 8;
 $5 = $13;
 $14 = $4;
 $15 = (24 + (($14*24)|0)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = (24 + (($17*24)|0)|0);
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = Math_imul($20, $21)|0;
 $23 = (($16) + ($22))|0;
 $6 = $23;
 $24 = $4;
 $25 = (24 + (($24*24)|0)|0);
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $4;
 $29 = (24 + (($28*24)|0)|0);
 $30 = ((($29)) + 8|0);
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $5;
 $34 = Math_imul($32, $33)|0;
 $35 = (($27) + ($34))|0;
 $7 = $35;
 $36 = $7;
 $37 = $36 >>> 3;
 $38 = $7;
 $39 = (($38) + ($37))|0;
 $7 = $39;
 $40 = $7;
 $41 = $6;
 $42 = ($40>>>0)<($41>>>0);
 $43 = $42&1;
 STACKTOP = sp;return ($43|0);
}
function _HUF_decompress4X_hufOnly_wksp($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $16 = $10;
 $17 = ($16|0)==(0);
 if ($17) {
  $7 = -13;
  $38 = $7;
  STACKTOP = sp;return ($38|0);
 }
 $18 = $12;
 $19 = $10;
 $20 = ($18>>>0)>=($19>>>0);
 $21 = $12;
 $22 = ($21>>>0)<=(1);
 $or$cond = $20 | $22;
 if ($or$cond) {
  $7 = -15;
  $38 = $7;
  STACKTOP = sp;return ($38|0);
 }
 $23 = $10;
 $24 = $12;
 $25 = (_HUF_selectDecoder($23,$24)|0);
 $15 = $25;
 $26 = $15;
 $27 = ($26|0)!=(0);
 $28 = $8;
 $29 = $9;
 $30 = $10;
 $31 = $11;
 $32 = $12;
 $33 = $13;
 $34 = $14;
 if ($27) {
  $35 = (_HUF_decompress4X4_DCtx_wksp($28,$29,$30,$31,$32,$33,$34)|0);
  $37 = $35;
 } else {
  $36 = (_HUF_decompress4X2_DCtx_wksp($28,$29,$30,$31,$32,$33,$34)|0);
  $37 = $36;
 }
 $7 = $37;
 $38 = $7;
 STACKTOP = sp;return ($38|0);
}
function _ZSTD_decompressBegin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 23612|0);
 HEAP32[$3>>2] = 5;
 $4 = $1;
 $5 = ((($4)) + 23644|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 23596|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 23600|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 23604|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 23608|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 16|0);
 $16 = ((($15)) + 5132|0);
 HEAP32[$16>>2] = 201326604;
 $17 = $1;
 $18 = ((($17)) + 23652|0);
 HEAP32[$18>>2] = 0;
 $19 = $1;
 $20 = ((($19)) + 23648|0);
 HEAP32[$20>>2] = 0;
 $21 = $1;
 $22 = ((($21)) + 23748|0);
 HEAP32[$22>>2] = 0;
 $23 = $1;
 $24 = ((($23)) + 16|0);
 $25 = ((($24)) + 23568|0);
 ;HEAP32[$25>>2]=HEAP32[408>>2]|0;HEAP32[$25+4>>2]=HEAP32[408+4>>2]|0;HEAP32[$25+8>>2]=HEAP32[408+8>>2]|0;
 $26 = $1;
 $27 = ((($26)) + 16|0);
 $28 = $1;
 HEAP32[$28>>2] = $27;
 $29 = $1;
 $30 = ((($29)) + 16|0);
 $31 = ((($30)) + 3080|0);
 $32 = $1;
 $33 = ((($32)) + 4|0);
 HEAP32[$33>>2] = $31;
 $34 = $1;
 $35 = ((($34)) + 16|0);
 $36 = ((($35)) + 2052|0);
 $37 = $1;
 $38 = ((($37)) + 8|0);
 HEAP32[$38>>2] = $36;
 $39 = $1;
 $40 = ((($39)) + 16|0);
 $41 = ((($40)) + 5132|0);
 $42 = $1;
 $43 = ((($42)) + 12|0);
 HEAP32[$43>>2] = $41;
 STACKTOP = sp;return 0;
}
function _ZSTD_createDCtx_advanced($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 8|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)!=(0|0);
 $5 = $4 ^ 1;
 $6 = $5&1;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0|0);
 $10 = $9 ^ 1;
 $11 = $10&1;
 $12 = $6 ^ $11;
 $13 = ($12|0)!=(0);
 if ($13) {
  $1 = 0;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$0+8>>2]|0;
 $14 = (_ZSTD_malloc(154952,$$byval_copy)|0);
 $2 = $14;
 $15 = $2;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = $2;
  $18 = ((($17)) + 23756|0);
  ;HEAP32[$18>>2]=HEAP32[$0>>2]|0;HEAP32[$18+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[$0+8>>2]|0;
  $19 = $2;
  $20 = ((($19)) + 23832|0);
  HEAP32[$20>>2] = 0;
  $21 = $2;
  $22 = ((($21)) + 23836|0);
  HEAP32[$22>>2] = 0;
  $23 = $2;
  _ZSTD_initDCtx_internal($23);
  $24 = $2;
  $1 = $24;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 } else {
  $1 = 0;
  $25 = $1;
  STACKTOP = sp;return ($25|0);
 }
 return (0)|0;
}
function _ZSTD_initDCtx_internal($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 (_ZSTD_decompressBegin($2)|0);
 $3 = $1;
 $4 = ((($3)) + 23776|0);
 HEAP32[$4>>2] = 0;
 $5 = $1;
 $6 = ((($5)) + 23804|0);
 HEAP32[$6>>2] = 134217729;
 $7 = $1;
 $8 = ((($7)) + 23784|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 23780|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 23792|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = ((($13)) + 23796|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 23812|0);
 HEAP32[$16>>2] = 0;
 $17 = $1;
 $18 = ((($17)) + 23788|0);
 HEAP32[$18>>2] = 0;
 STACKTOP = sp;return;
}
function _ZSTD_createDCtx() {
 var $0 = 0, $ZSTD_defaultCMem$145$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $ZSTD_defaultCMem$145$byval_copy = sp;
 ;HEAP32[$ZSTD_defaultCMem$145$byval_copy>>2]=HEAP32[6896>>2]|0;HEAP32[$ZSTD_defaultCMem$145$byval_copy+4>>2]=HEAP32[6896+4>>2]|0;HEAP32[$ZSTD_defaultCMem$145$byval_copy+8>>2]=HEAP32[6896+8>>2]|0;
 $0 = (_ZSTD_createDCtx_advanced($ZSTD_defaultCMem$145$byval_copy)|0);
 STACKTOP = sp;return ($0|0);
}
function _ZSTD_freeDCtx($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 20|0;
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = 0;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 $6 = $2;
 $7 = ((($6)) + 23776|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)!=(0);
 if ($9) {
  $1 = -11;
  $33 = $1;
  STACKTOP = sp;return ($33|0);
 }
 $10 = $2;
 $11 = ((($10)) + 23756|0);
 ;HEAP32[$3>>2]=HEAP32[$11>>2]|0;HEAP32[$3+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$11+8>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 23780|0);
 $14 = HEAP32[$13>>2]|0;
 (_ZSTD_freeDDict($14)|0);
 $15 = $2;
 $16 = ((($15)) + 23780|0);
 HEAP32[$16>>2] = 0;
 $17 = $2;
 $18 = ((($17)) + 23792|0);
 $19 = HEAP32[$18>>2]|0;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;
 _ZSTD_free($19,$$byval_copy);
 $20 = $2;
 $21 = ((($20)) + 23792|0);
 HEAP32[$21>>2] = 0;
 $22 = $2;
 $23 = ((($22)) + 23832|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $2;
  $27 = ((($26)) + 23832|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $2;
  $30 = ((($29)) + 23836|0);
  $31 = HEAP32[$30>>2]|0;
  (_ZSTD_freeLegacyStreamContext($28,$31)|0);
 }
 $32 = $2;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;
 _ZSTD_free($32,$$byval_copy1);
 $1 = 0;
 $33 = $1;
 STACKTOP = sp;return ($33|0);
}
function _ZSTD_freeDDict($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy1 = sp + 32|0;
 $$byval_copy = sp + 20|0;
 $3 = sp;
 $2 = $0;
 $4 = $2;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $1 = 0;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 } else {
  $6 = $2;
  $7 = ((($6)) + 23600|0);
  ;HEAP32[$3>>2]=HEAP32[$7>>2]|0;HEAP32[$3+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$7+8>>2]|0;
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$3+8>>2]|0;
  _ZSTD_free($9,$$byval_copy);
  $10 = $2;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$3+8>>2]|0;
  _ZSTD_free($10,$$byval_copy1);
  $1 = 0;
  $11 = $1;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function _ZSTD_freeLegacyStreamContext($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $4;
 switch ($5|0) {
 case 7:  {
  $12 = $3;
  $13 = (_ZBUFFv07_freeDCtx($12)|0);
  $2 = $13;
  break;
 }
 case 6:  {
  $10 = $3;
  $11 = (_ZBUFFv06_freeDCtx($10)|0);
  $2 = $11;
  break;
 }
 case 5:  {
  $8 = $3;
  $9 = (_ZBUFFv05_freeDCtx($8)|0);
  $2 = $9;
  break;
 }
 case 4:  {
  $6 = $3;
  $7 = (_ZBUFFv04_freeDCtx($6)|0);
  $2 = $7;
  break;
 }
 default: {
  $2 = -3;
 }
 }
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function _MEM_readLE32_146($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_isLittleEndian_147()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read32_148($5)|0);
 if ($4) {
  $1 = $6;
 } else {
  $7 = (_MEM_swap32_149($6)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _ZSTD_isLegacy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6>>>0)<(4);
 L1: do {
  if ($7) {
   $2 = 0;
  } else {
   $8 = $3;
   $9 = (_MEM_readLE32_146($8)|0);
   $5 = $9;
   $10 = $5;
   switch ($10|0) {
   case -47205084:  {
    $2 = 4;
    break L1;
    break;
   }
   case -47205083:  {
    $2 = 5;
    break L1;
    break;
   }
   case -47205082:  {
    $2 = 6;
    break L1;
    break;
   }
   case -47205081:  {
    $2 = 7;
    break L1;
    break;
   }
   default: {
    $2 = 0;
    break L1;
   }
   }
  }
 } while(0);
 $11 = $2;
 STACKTOP = sp;return ($11|0);
}
function _MEM_isLittleEndian_147() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[420]|0;
 $1 = $0&255;
 return ($1|0);
}
function _MEM_read32_148($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 STACKTOP = sp;return ($3|0);
}
function _MEM_swap32_149($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24;
 $4 = $3 & -16777216;
 $5 = $1;
 $6 = $5 << 8;
 $7 = $6 & 16711680;
 $8 = $4 | $7;
 $9 = $1;
 $10 = $9 >>> 8;
 $11 = $10 & 65280;
 $12 = $8 | $11;
 $13 = $1;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $12 | $15;
 STACKTOP = sp;return ($16|0);
}
function _ZSTD_frameHeaderSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = ($9>>>0)<(5);
 if ($10) {
  $2 = -14;
  $45 = $2;
  STACKTOP = sp;return ($45|0);
 }
 $11 = $3;
 $12 = ((($11)) + 4|0);
 $13 = HEAP8[$12>>0]|0;
 $5 = $13;
 $14 = $5;
 $15 = $14&255;
 $16 = $15 & 3;
 $6 = $16;
 $17 = $5;
 $18 = $17&255;
 $19 = $18 >> 5;
 $20 = $19 & 1;
 $7 = $20;
 $21 = $5;
 $22 = $21&255;
 $23 = $22 >> 6;
 $8 = $23;
 $24 = $7;
 $25 = ($24|0)!=(0);
 $26 = $25 ^ 1;
 $27 = $26&1;
 $28 = (5 + ($27))|0;
 $29 = $6;
 $30 = (424 + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($28) + ($31))|0;
 $33 = $8;
 $34 = (440 + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($32) + ($35))|0;
 $37 = $7;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $8;
  $40 = ($39|0)!=(0);
  $41 = $40 ^ 1;
  $43 = $41;
 } else {
  $43 = 0;
 }
 $42 = $43&1;
 $44 = (($36) + ($42))|0;
 $2 = $44;
 $45 = $2;
 STACKTOP = sp;return ($45|0);
}
function _ZSTD_getFrameHeader($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $18 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $21 = $5;
 $7 = $21;
 $22 = $6;
 $23 = ($22>>>0)<(5);
 if ($23) {
  $3 = 5;
  $190 = $3;
  STACKTOP = sp;return ($190|0);
 }
 $24 = $5;
 $25 = (_MEM_readLE32_146($24)|0);
 $26 = ($25|0)!=(-47205080);
 $27 = $5;
 if ($26) {
  $28 = (_MEM_readLE32_146($27)|0);
  $29 = $28 & -16;
  $30 = ($29|0)==(407710288);
  if (!($30)) {
   $3 = -2;
   $190 = $3;
   STACKTOP = sp;return ($190|0);
  }
  $31 = $6;
  $32 = ($31>>>0)<(8);
  if ($32) {
   $3 = 8;
   $190 = $3;
   STACKTOP = sp;return ($190|0);
  } else {
   $33 = $4;
   ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;HEAP32[$33+12>>2]=0|0;HEAP32[$33+16>>2]=0|0;HEAP32[$33+20>>2]=0|0;
   $34 = $5;
   $35 = ((($34)) + 4|0);
   $36 = (_MEM_readLE32_146($35)|0);
   $37 = $4;
   $38 = $37;
   $39 = $38;
   HEAP32[$39>>2] = $36;
   $40 = (($38) + 4)|0;
   $41 = $40;
   HEAP32[$41>>2] = 0;
   $42 = $4;
   $43 = ((($42)) + 8|0);
   HEAP32[$43>>2] = 0;
   $3 = 0;
   $190 = $3;
   STACKTOP = sp;return ($190|0);
  }
 }
 $44 = $6;
 $45 = (_ZSTD_frameHeaderSize($27,$44)|0);
 $8 = $45;
 $46 = $6;
 $47 = $8;
 $48 = ($46>>>0)<($47>>>0);
 if ($48) {
  $49 = $8;
  $3 = $49;
  $190 = $3;
  STACKTOP = sp;return ($190|0);
 }
 $50 = $7;
 $51 = ((($50)) + 4|0);
 $52 = HEAP8[$51>>0]|0;
 $9 = $52;
 $10 = 5;
 $53 = $9;
 $54 = $53&255;
 $55 = $54 & 3;
 $11 = $55;
 $56 = $9;
 $57 = $56&255;
 $58 = $57 >> 2;
 $59 = $58 & 1;
 $12 = $59;
 $60 = $9;
 $61 = $60&255;
 $62 = $61 >> 5;
 $63 = $62 & 1;
 $13 = $63;
 $64 = $9;
 $65 = $64&255;
 $66 = $65 >> 6;
 $14 = $66;
 $15 = 134217728;
 $16 = 0;
 $17 = 0;
 $67 = $18;
 $68 = $67;
 HEAP32[$68>>2] = 0;
 $69 = (($67) + 4)|0;
 $70 = $69;
 HEAP32[$70>>2] = 0;
 $71 = $9;
 $72 = $71&255;
 $73 = $72 & 8;
 $74 = ($73|0)!=(0);
 if ($74) {
  $3 = -5;
  $190 = $3;
  STACKTOP = sp;return ($190|0);
 }
 $75 = $13;
 $76 = ($75|0)!=(0);
 do {
  if (!($76)) {
   $77 = $7;
   $78 = $10;
   $79 = (($78) + 1)|0;
   $10 = $79;
   $80 = (($77) + ($78)|0);
   $81 = HEAP8[$80>>0]|0;
   $19 = $81;
   $82 = $19;
   $83 = $82&255;
   $84 = $83 >> 3;
   $85 = (($84) + 10)|0;
   $20 = $85;
   $86 = $20;
   $87 = ($86>>>0)>(27);
   if (!($87)) {
    $88 = $20;
    $89 = 1 << $88;
    $16 = $89;
    $90 = $16;
    $91 = $90 >>> 3;
    $92 = $19;
    $93 = $92&255;
    $94 = $93 & 7;
    $95 = Math_imul($91, $94)|0;
    $96 = $16;
    $97 = (($96) + ($95))|0;
    $16 = $97;
    break;
   }
   $3 = -7;
   $190 = $3;
   STACKTOP = sp;return ($190|0);
  }
 } while(0);
 $98 = $11;
 switch ($98|0) {
 case 3:  {
  $113 = $7;
  $114 = $10;
  $115 = (($113) + ($114)|0);
  $116 = (_MEM_readLE32_146($115)|0);
  $17 = $116;
  $117 = $10;
  $118 = (($117) + 4)|0;
  $10 = $118;
  break;
 }
 case 1:  {
  $99 = $7;
  $100 = $10;
  $101 = (($99) + ($100)|0);
  $102 = HEAP8[$101>>0]|0;
  $103 = $102&255;
  $17 = $103;
  $104 = $10;
  $105 = (($104) + 1)|0;
  $10 = $105;
  break;
 }
 case 2:  {
  $106 = $7;
  $107 = $10;
  $108 = (($106) + ($107)|0);
  $109 = (_MEM_readLE16_151($108)|0);
  $110 = $109&65535;
  $17 = $110;
  $111 = $10;
  $112 = (($111) + 2)|0;
  $10 = $112;
  break;
 }
 default: {
 }
 }
 $119 = $14;
 switch ($119|0) {
 case 3:  {
  $151 = $7;
  $152 = $10;
  $153 = (($151) + ($152)|0);
  $154 = (_MEM_readLE64_152($153)|0);
  $155 = tempRet0;
  $156 = $18;
  $157 = $156;
  HEAP32[$157>>2] = $154;
  $158 = (($156) + 4)|0;
  $159 = $158;
  HEAP32[$159>>2] = $155;
  break;
 }
 case 1:  {
  $131 = $7;
  $132 = $10;
  $133 = (($131) + ($132)|0);
  $134 = (_MEM_readLE16_151($133)|0);
  $135 = $134&65535;
  $136 = (($135) + 256)|0;
  $137 = ($136|0)<(0);
  $138 = $137 << 31 >> 31;
  $139 = $18;
  $140 = $139;
  HEAP32[$140>>2] = $136;
  $141 = (($139) + 4)|0;
  $142 = $141;
  HEAP32[$142>>2] = $138;
  break;
 }
 case 2:  {
  $143 = $7;
  $144 = $10;
  $145 = (($143) + ($144)|0);
  $146 = (_MEM_readLE32_146($145)|0);
  $147 = $18;
  $148 = $147;
  HEAP32[$148>>2] = $146;
  $149 = (($147) + 4)|0;
  $150 = $149;
  HEAP32[$150>>2] = 0;
  break;
 }
 default: {
  $120 = $13;
  $121 = ($120|0)!=(0);
  if ($121) {
   $122 = $7;
   $123 = $10;
   $124 = (($122) + ($123)|0);
   $125 = HEAP8[$124>>0]|0;
   $126 = $125&255;
   $127 = $18;
   $128 = $127;
   HEAP32[$128>>2] = $126;
   $129 = (($127) + 4)|0;
   $130 = $129;
   HEAP32[$130>>2] = 0;
  }
 }
 }
 $160 = $16;
 $161 = ($160|0)!=(0);
 if (!($161)) {
  $162 = $18;
  $163 = $162;
  $164 = HEAP32[$163>>2]|0;
  $165 = (($162) + 4)|0;
  $166 = $165;
  $167 = HEAP32[$166>>2]|0;
  $16 = $164;
 }
 $168 = $16;
 $169 = ($168>>>0)>(134217728);
 if ($169) {
  $3 = -7;
  $190 = $3;
  STACKTOP = sp;return ($190|0);
 } else {
  $170 = $18;
  $171 = $170;
  $172 = HEAP32[$171>>2]|0;
  $173 = (($170) + 4)|0;
  $174 = $173;
  $175 = HEAP32[$174>>2]|0;
  $176 = $4;
  $177 = $176;
  $178 = $177;
  HEAP32[$178>>2] = $172;
  $179 = (($177) + 4)|0;
  $180 = $179;
  HEAP32[$180>>2] = $175;
  $181 = $16;
  $182 = $4;
  $183 = ((($182)) + 8|0);
  HEAP32[$183>>2] = $181;
  $184 = $17;
  $185 = $4;
  $186 = ((($185)) + 12|0);
  HEAP32[$186>>2] = $184;
  $187 = $12;
  $188 = $4;
  $189 = ((($188)) + 16|0);
  HEAP32[$189>>2] = $187;
  $3 = 0;
  $190 = $3;
  STACKTOP = sp;return ($190|0);
 }
 return (0)|0;
}
function _MEM_readLE16_151($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_MEM_isLittleEndian_147()|0);
 $5 = ($4|0)!=(0);
 $6 = $2;
 if ($5) {
  $7 = (_MEM_read16_155($6)|0);
  $1 = $7;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $3 = $6;
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $3;
  $12 = ((($11)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = (($10) + ($15))|0;
  $17 = $16&65535;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _MEM_readLE64_152($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = $0;
 $3 = (_MEM_isLittleEndian_147()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read64_153($5)|0);
 $7 = tempRet0;
 if ($4) {
  $8 = $1;
  $9 = $8;
  HEAP32[$9>>2] = $6;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $7;
 } else {
  $12 = (_MEM_swap64_154($6,$7)|0);
  $13 = tempRet0;
  $14 = $1;
  $15 = $14;
  HEAP32[$15>>2] = $12;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
 }
 $18 = $1;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 tempRet0 = ($23);
 STACKTOP = sp;return ($20|0);
}
function _MEM_read64_153($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
 tempRet0 = ($8);
 STACKTOP = sp;return ($5|0);
}
function _MEM_swap64_154($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 (_bitshift64Shl(($9|0),($12|0),56)|0);
 $13 = tempRet0;
 $14 = $13 & -16777216;
 $15 = $2;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 (_bitshift64Shl(($17|0),($20|0),40)|0);
 $21 = tempRet0;
 $22 = $21 & 16711680;
 $23 = $14 | $22;
 $24 = $2;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 (_bitshift64Shl(($26|0),($29|0),24)|0);
 $30 = tempRet0;
 $31 = $30 & 65280;
 $32 = $23 | $31;
 $33 = $2;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 (_bitshift64Shl(($35|0),($38|0),8)|0);
 $39 = tempRet0;
 $40 = $39 & 255;
 $41 = $32 | $40;
 $42 = $2;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (_bitshift64Lshr(($44|0),($47|0),8)|0);
 $49 = tempRet0;
 $50 = $48 & -16777216;
 $51 = $2;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_bitshift64Lshr(($53|0),($56|0),24)|0);
 $58 = tempRet0;
 $59 = $57 & 16711680;
 $60 = $50 | $59;
 $61 = $2;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (_bitshift64Lshr(($63|0),($66|0),40)|0);
 $68 = tempRet0;
 $69 = $67 & 65280;
 $70 = $60 | $69;
 $71 = $2;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (_bitshift64Lshr(($73|0),($76|0),56)|0);
 $78 = tempRet0;
 $79 = $77 & 255;
 $80 = $70 | $79;
 tempRet0 = ($41);
 STACKTOP = sp;return ($80|0);
}
function _MEM_read16_155($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8);
 STACKTOP = sp;return ($3|0);
}
function _ZSTD_getFrameContentSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 32|0;
 $5 = sp + 24|0;
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $7 = $3;
 $8 = $4;
 $9 = (_ZSTD_isLegacy($7,$8)|0);
 $10 = ($9|0)!=(0);
 $11 = $3;
 $12 = $4;
 do {
  if ($10) {
   $13 = (_ZSTD_getDecompressedSize_legacy($11,$12)|0);
   $14 = tempRet0;
   $15 = $5;
   $16 = $15;
   HEAP32[$16>>2] = $13;
   $17 = (($15) + 4)|0;
   $18 = $17;
   HEAP32[$18>>2] = $14;
   $19 = $5;
   $20 = $19;
   $21 = HEAP32[$20>>2]|0;
   $22 = (($19) + 4)|0;
   $23 = $22;
   $24 = HEAP32[$23>>2]|0;
   $25 = ($21|0)==(0);
   $26 = ($24|0)==(0);
   $27 = $25 & $26;
   $28 = $5;
   $29 = $28;
   $30 = HEAP32[$29>>2]|0;
   $31 = (($28) + 4)|0;
   $32 = $31;
   $33 = HEAP32[$32>>2]|0;
   $34 = $27 ? -1 : $30;
   $35 = $27 ? -1 : $33;
   $36 = $2;
   $37 = $36;
   HEAP32[$37>>2] = $34;
   $38 = (($36) + 4)|0;
   $39 = $38;
   HEAP32[$39>>2] = $35;
  } else {
   $40 = (_ZSTD_getFrameHeader($6,$11,$12)|0);
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $2;
    $43 = $42;
    HEAP32[$43>>2] = -2;
    $44 = (($42) + 4)|0;
    $45 = $44;
    HEAP32[$45>>2] = -1;
    break;
   }
   $46 = ((($6)) + 8|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==(0);
   if ($48) {
    $49 = $2;
    $50 = $49;
    HEAP32[$50>>2] = 0;
    $51 = (($49) + 4)|0;
    $52 = $51;
    HEAP32[$52>>2] = 0;
    break;
   }
   $53 = $6;
   $54 = $53;
   $55 = HEAP32[$54>>2]|0;
   $56 = (($53) + 4)|0;
   $57 = $56;
   $58 = HEAP32[$57>>2]|0;
   $59 = ($55|0)!=(0);
   $60 = ($58|0)!=(0);
   $61 = $59 | $60;
   if ($61) {
    $62 = $6;
    $63 = $62;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($62) + 4)|0;
    $66 = $65;
    $67 = HEAP32[$66>>2]|0;
    $68 = $2;
    $69 = $68;
    HEAP32[$69>>2] = $64;
    $70 = (($68) + 4)|0;
    $71 = $70;
    HEAP32[$71>>2] = $67;
    break;
   } else {
    $72 = $2;
    $73 = $72;
    HEAP32[$73>>2] = -1;
    $74 = (($72) + 4)|0;
    $75 = $74;
    HEAP32[$75>>2] = -1;
    break;
   }
  }
 } while(0);
 $76 = $2;
 $77 = $76;
 $78 = HEAP32[$77>>2]|0;
 $79 = (($76) + 4)|0;
 $80 = $79;
 $81 = HEAP32[$80>>2]|0;
 tempRet0 = ($81);
 STACKTOP = sp;return ($78|0);
}
function _ZSTD_getDecompressedSize_legacy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp + 80|0;
 $6 = sp + 40|0;
 $8 = sp + 24|0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $12 = $3;
 $13 = $4;
 $14 = (_ZSTD_isLegacy($12,$13)|0);
 $5 = $14;
 $15 = $5;
 $16 = ($15>>>0)<(5);
 do {
  if ($16) {
   $17 = $2;
   $18 = $17;
   HEAP32[$18>>2] = 0;
   $19 = (($17) + 4)|0;
   $20 = $19;
   HEAP32[$20>>2] = 0;
  } else {
   $21 = $5;
   $22 = ($21|0)==(5);
   if ($22) {
    $23 = $3;
    $24 = $4;
    $25 = (_ZSTDv05_getFrameParams($6,$23,$24)|0);
    $7 = $25;
    $26 = $7;
    $27 = ($26|0)!=(0);
    if ($27) {
     $28 = $2;
     $29 = $28;
     HEAP32[$29>>2] = 0;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break;
    } else {
     $32 = $6;
     $33 = $32;
     $34 = HEAP32[$33>>2]|0;
     $35 = (($32) + 4)|0;
     $36 = $35;
     $37 = HEAP32[$36>>2]|0;
     $38 = $2;
     $39 = $38;
     HEAP32[$39>>2] = $34;
     $40 = (($38) + 4)|0;
     $41 = $40;
     HEAP32[$41>>2] = $37;
     break;
    }
   }
   $42 = $5;
   $43 = ($42|0)==(6);
   if ($43) {
    $44 = $3;
    $45 = $4;
    $46 = (_ZSTDv06_getFrameParams($8,$44,$45)|0);
    $9 = $46;
    $47 = $9;
    $48 = ($47|0)!=(0);
    if ($48) {
     $49 = $2;
     $50 = $49;
     HEAP32[$50>>2] = 0;
     $51 = (($49) + 4)|0;
     $52 = $51;
     HEAP32[$52>>2] = 0;
     break;
    } else {
     $53 = $8;
     $54 = $53;
     $55 = HEAP32[$54>>2]|0;
     $56 = (($53) + 4)|0;
     $57 = $56;
     $58 = HEAP32[$57>>2]|0;
     $59 = $2;
     $60 = $59;
     HEAP32[$60>>2] = $55;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break;
    }
   }
   $63 = $5;
   $64 = ($63|0)==(7);
   if (!($64)) {
    $84 = $2;
    $85 = $84;
    HEAP32[$85>>2] = 0;
    $86 = (($84) + 4)|0;
    $87 = $86;
    HEAP32[$87>>2] = 0;
    break;
   }
   $65 = $3;
   $66 = $4;
   $67 = (_ZSTDv07_getFrameParams($10,$65,$66)|0);
   $11 = $67;
   $68 = $11;
   $69 = ($68|0)!=(0);
   if ($69) {
    $70 = $2;
    $71 = $70;
    HEAP32[$71>>2] = 0;
    $72 = (($70) + 4)|0;
    $73 = $72;
    HEAP32[$73>>2] = 0;
    break;
   } else {
    $74 = $10;
    $75 = $74;
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 4)|0;
    $78 = $77;
    $79 = HEAP32[$78>>2]|0;
    $80 = $2;
    $81 = $80;
    HEAP32[$81>>2] = $76;
    $82 = (($80) + 4)|0;
    $83 = $82;
    HEAP32[$83>>2] = $79;
    break;
   }
  }
 } while(0);
 $88 = $2;
 $89 = $88;
 $90 = HEAP32[$89>>2]|0;
 $91 = (($88) + 4)|0;
 $92 = $91;
 $93 = HEAP32[$92>>2]|0;
 tempRet0 = ($93);
 STACKTOP = sp;return ($90|0);
}
function _ERR_isError_156($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2>>>0)>(4294967271);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _ZSTD_findFrameCompressedSizeLegacy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = $4;
 $8 = (_ZSTD_isLegacy($6,$7)|0);
 $5 = $8;
 $9 = $5;
 switch ($9|0) {
 case 4:  {
  $10 = $3;
  $11 = $4;
  $12 = (_ZSTDv04_findFrameCompressedSize($10,$11)|0);
  $2 = $12;
  break;
 }
 case 5:  {
  $13 = $3;
  $14 = $4;
  $15 = (_ZSTDv05_findFrameCompressedSize($13,$14)|0);
  $2 = $15;
  break;
 }
 case 6:  {
  $16 = $3;
  $17 = $4;
  $18 = (_ZSTDv06_findFrameCompressedSize($16,$17)|0);
  $2 = $18;
  break;
 }
 case 7:  {
  $19 = $3;
  $20 = $4;
  $21 = (_ZSTDv07_findFrameCompressedSize($19,$20)|0);
  $2 = $21;
  break;
 }
 default: {
  $2 = -2;
 }
 }
 $22 = $2;
 STACKTOP = sp;return ($22|0);
}
function _ZSTD_getcBlockSize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = ($9>>>0)<(3);
 do {
  if ($10) {
   $3 = -14;
  } else {
   $11 = $4;
   $12 = (_MEM_readLE24($11)|0);
   $7 = $12;
   $13 = $7;
   $14 = $13 >>> 3;
   $8 = $14;
   $15 = $7;
   $16 = $15 & 1;
   $17 = $6;
   $18 = ((($17)) + 4|0);
   HEAP32[$18>>2] = $16;
   $19 = $7;
   $20 = $19 >>> 1;
   $21 = $20 & 3;
   $22 = $6;
   HEAP32[$22>>2] = $21;
   $23 = $8;
   $24 = $6;
   $25 = ((($24)) + 8|0);
   HEAP32[$25>>2] = $23;
   $26 = $6;
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(1);
   if ($28) {
    $3 = 1;
    break;
   }
   $29 = $6;
   $30 = HEAP32[$29>>2]|0;
   $31 = ($30|0)==(3);
   if ($31) {
    $3 = -15;
    break;
   } else {
    $32 = $8;
    $3 = $32;
    break;
   }
  }
 } while(0);
 $33 = $3;
 STACKTOP = sp;return ($33|0);
}
function _MEM_readLE24($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_MEM_readLE16_151($2)|0);
 $4 = $3&65535;
 $5 = $1;
 $6 = ((($5)) + 2|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = (($4) + ($9))|0;
 STACKTOP = sp;return ($10|0);
}
function _ZSTD_decodeLiteralsBlock($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $21 = $6;
 $22 = ($21>>>0)<(3);
 if ($22) {
  $3 = -15;
  $235 = $3;
  STACKTOP = sp;return ($235|0);
 }
 $23 = $5;
 $7 = $23;
 $24 = $7;
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 & 3;
 $8 = $27;
 $28 = $8;
 switch ($28|0) {
 case 3:  {
  $29 = $4;
  $30 = ((($29)) + 23648|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($31|0)==(0);
  if ($32) {
   $3 = -20;
   $235 = $3;
   STACKTOP = sp;return ($235|0);
  }
  break;
 }
 case 2:  {
  break;
 }
 case 0:  {
  $134 = $7;
  $135 = HEAP8[$134>>0]|0;
  $136 = $135&255;
  $137 = $136 >> 2;
  $138 = $137 & 3;
  $17 = $138;
  $139 = $17;
  switch ($139|0) {
  case 3:  {
   $16 = 3;
   $148 = $7;
   $149 = (_MEM_readLE24($148)|0);
   $150 = $149 >>> 4;
   $15 = $150;
   break;
  }
  case 1:  {
   $16 = 2;
   $144 = $7;
   $145 = (_MEM_readLE16_151($144)|0);
   $146 = $145&65535;
   $147 = $146 >> 4;
   $15 = $147;
   break;
  }
  default: {
   $16 = 1;
   $140 = $7;
   $141 = HEAP8[$140>>0]|0;
   $142 = $141&255;
   $143 = $142 >> 3;
   $15 = $143;
  }
  }
  $151 = $16;
  $152 = $15;
  $153 = (($151) + ($152))|0;
  $154 = (($153) + 8)|0;
  $155 = $6;
  $156 = ($154>>>0)>($155>>>0);
  if (!($156)) {
   $184 = $7;
   $185 = $16;
   $186 = (($184) + ($185)|0);
   $187 = $4;
   $188 = ((($187)) + 23752|0);
   HEAP32[$188>>2] = $186;
   $189 = $15;
   $190 = $4;
   $191 = ((($190)) + 23768|0);
   HEAP32[$191>>2] = $189;
   $192 = $16;
   $193 = $15;
   $194 = (($192) + ($193))|0;
   $3 = $194;
   $235 = $3;
   STACKTOP = sp;return ($235|0);
  }
  $157 = $15;
  $158 = $16;
  $159 = (($157) + ($158))|0;
  $160 = $6;
  $161 = ($159>>>0)>($160>>>0);
  if ($161) {
   $3 = -15;
   $235 = $3;
   STACKTOP = sp;return ($235|0);
  } else {
   $162 = $4;
   $163 = ((($162)) + 23848|0);
   $164 = $7;
   $165 = $16;
   $166 = (($164) + ($165)|0);
   $167 = $15;
   _memcpy(($163|0),($166|0),($167|0))|0;
   $168 = $4;
   $169 = ((($168)) + 23848|0);
   $170 = $4;
   $171 = ((($170)) + 23752|0);
   HEAP32[$171>>2] = $169;
   $172 = $15;
   $173 = $4;
   $174 = ((($173)) + 23768|0);
   HEAP32[$174>>2] = $172;
   $175 = $4;
   $176 = ((($175)) + 23848|0);
   $177 = $4;
   $178 = ((($177)) + 23768|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($176) + ($179)|0);
   ;HEAP8[$180>>0]=0|0;HEAP8[$180+1>>0]=0|0;HEAP8[$180+2>>0]=0|0;HEAP8[$180+3>>0]=0|0;HEAP8[$180+4>>0]=0|0;HEAP8[$180+5>>0]=0|0;HEAP8[$180+6>>0]=0|0;HEAP8[$180+7>>0]=0|0;
   $181 = $16;
   $182 = $15;
   $183 = (($181) + ($182))|0;
   $3 = $183;
   $235 = $3;
   STACKTOP = sp;return ($235|0);
  }
  break;
 }
 case 1:  {
  $195 = $7;
  $196 = HEAP8[$195>>0]|0;
  $197 = $196&255;
  $198 = $197 >> 2;
  $199 = $198 & 3;
  $18 = $199;
  $200 = $18;
  switch ($200|0) {
  case 3:  {
   $20 = 3;
   $209 = $7;
   $210 = (_MEM_readLE24($209)|0);
   $211 = $210 >>> 4;
   $19 = $211;
   $212 = $6;
   $213 = ($212>>>0)<(4);
   if ($213) {
    $3 = -15;
    $235 = $3;
    STACKTOP = sp;return ($235|0);
   }
   break;
  }
  case 1:  {
   $20 = 2;
   $205 = $7;
   $206 = (_MEM_readLE16_151($205)|0);
   $207 = $206&65535;
   $208 = $207 >> 4;
   $19 = $208;
   break;
  }
  default: {
   $20 = 1;
   $201 = $7;
   $202 = HEAP8[$201>>0]|0;
   $203 = $202&255;
   $204 = $203 >> 3;
   $19 = $204;
  }
  }
  $214 = $19;
  $215 = ($214>>>0)>(131072);
  if ($215) {
   $3 = -15;
   $235 = $3;
   STACKTOP = sp;return ($235|0);
  } else {
   $216 = $4;
   $217 = ((($216)) + 23848|0);
   $218 = $7;
   $219 = $20;
   $220 = (($218) + ($219)|0);
   $221 = HEAP8[$220>>0]|0;
   $222 = $221&255;
   $223 = $222&255;
   $224 = $19;
   $225 = (($224) + 8)|0;
   _memset(($217|0),($223|0),($225|0))|0;
   $226 = $4;
   $227 = ((($226)) + 23848|0);
   $228 = $4;
   $229 = ((($228)) + 23752|0);
   HEAP32[$229>>2] = $227;
   $230 = $19;
   $231 = $4;
   $232 = ((($231)) + 23768|0);
   HEAP32[$232>>2] = $230;
   $233 = $20;
   $234 = (($233) + 1)|0;
   $3 = $234;
   $235 = $3;
   STACKTOP = sp;return ($235|0);
  }
  break;
 }
 default: {
  $3 = -15;
  $235 = $3;
  STACKTOP = sp;return ($235|0);
 }
 }
 $33 = $6;
 $34 = ($33>>>0)<(5);
 if ($34) {
  $3 = -15;
  $235 = $3;
  STACKTOP = sp;return ($235|0);
 }
 $12 = 0;
 $35 = $7;
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 >> 2;
 $39 = $38 & 3;
 $13 = $39;
 $40 = $7;
 $41 = (_MEM_readLE32_146($40)|0);
 $14 = $41;
 $42 = $13;
 switch ($42|0) {
 case 3:  {
  $9 = 5;
  $58 = $14;
  $59 = $58 >>> 4;
  $60 = $59 & 262143;
  $10 = $60;
  $61 = $14;
  $62 = $61 >>> 22;
  $63 = $7;
  $64 = ((($63)) + 4|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $66 << 10;
  $68 = (($62) + ($67))|0;
  $11 = $68;
  break;
 }
 case 2:  {
  $9 = 4;
  $53 = $14;
  $54 = $53 >>> 4;
  $55 = $54 & 16383;
  $10 = $55;
  $56 = $14;
  $57 = $56 >>> 18;
  $11 = $57;
  break;
 }
 default: {
  $43 = $13;
  $44 = ($43|0)!=(0);
  $45 = $44 ^ 1;
  $46 = $45&1;
  $12 = $46;
  $9 = 3;
  $47 = $14;
  $48 = $47 >>> 4;
  $49 = $48 & 1023;
  $10 = $49;
  $50 = $14;
  $51 = $50 >>> 14;
  $52 = $51 & 1023;
  $11 = $52;
 }
 }
 $69 = $10;
 $70 = ($69>>>0)>(131072);
 if ($70) {
  $3 = -15;
  $235 = $3;
  STACKTOP = sp;return ($235|0);
 }
 $71 = $11;
 $72 = $9;
 $73 = (($71) + ($72))|0;
 $74 = $6;
 $75 = ($73>>>0)>($74>>>0);
 if ($75) {
  $3 = -15;
  $235 = $3;
  STACKTOP = sp;return ($235|0);
 }
 $76 = $8;
 $77 = ($76|0)==(3);
 $78 = $12;
 $79 = ($78|0)!=(0);
 $80 = $4;
 do {
  if ($77) {
   $81 = ((($80)) + 23848|0);
   $82 = $10;
   $83 = $7;
   $84 = $9;
   $85 = (($83) + ($84)|0);
   $86 = $11;
   $87 = $4;
   $88 = ((($87)) + 12|0);
   $89 = HEAP32[$88>>2]|0;
   if ($79) {
    $90 = (_HUF_decompress1X_usingDTable($81,$82,$85,$86,$89)|0);
    $106 = $90;
    break;
   } else {
    $91 = (_HUF_decompress4X_usingDTable($81,$82,$85,$86,$89)|0);
    $106 = $91;
    break;
   }
  } else {
   $92 = ((($80)) + 16|0);
   $93 = ((($92)) + 5132|0);
   $94 = $4;
   $95 = ((($94)) + 23848|0);
   $96 = $10;
   $97 = $7;
   $98 = $9;
   $99 = (($97) + ($98)|0);
   $100 = $11;
   $101 = $4;
   $102 = ((($101)) + 16|0);
   $103 = ((($102)) + 21520|0);
   if ($79) {
    $104 = (_HUF_decompress1X2_DCtx_wksp($93,$95,$96,$99,$100,$103,2048)|0);
    $106 = $104;
    break;
   } else {
    $105 = (_HUF_decompress4X_hufOnly_wksp($93,$95,$96,$99,$100,$103,2048)|0);
    $106 = $105;
    break;
   }
  }
 } while(0);
 $107 = (_ERR_isError_156($106)|0);
 $108 = ($107|0)!=(0);
 if ($108) {
  $3 = -15;
  $235 = $3;
  STACKTOP = sp;return ($235|0);
 }
 $109 = $4;
 $110 = ((($109)) + 23848|0);
 $111 = $4;
 $112 = ((($111)) + 23752|0);
 HEAP32[$112>>2] = $110;
 $113 = $10;
 $114 = $4;
 $115 = ((($114)) + 23768|0);
 HEAP32[$115>>2] = $113;
 $116 = $4;
 $117 = ((($116)) + 23648|0);
 HEAP32[$117>>2] = 1;
 $118 = $8;
 $119 = ($118|0)==(2);
 if ($119) {
  $120 = $4;
  $121 = ((($120)) + 16|0);
  $122 = ((($121)) + 5132|0);
  $123 = $4;
  $124 = ((($123)) + 12|0);
  HEAP32[$124>>2] = $122;
 }
 $125 = $4;
 $126 = ((($125)) + 23848|0);
 $127 = $4;
 $128 = ((($127)) + 23768|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = (($126) + ($129)|0);
 ;HEAP8[$130>>0]=0|0;HEAP8[$130+1>>0]=0|0;HEAP8[$130+2>>0]=0|0;HEAP8[$130+3>>0]=0|0;HEAP8[$130+4>>0]=0|0;HEAP8[$130+5>>0]=0|0;HEAP8[$130+6>>0]=0|0;HEAP8[$130+7>>0]=0|0;
 $131 = $11;
 $132 = $9;
 $133 = (($131) + ($132))|0;
 $3 = $133;
 $235 = $3;
 STACKTOP = sp;return ($235|0);
}
function _ZSTD_decodeSeqHeaders($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $19 = $7;
 $9 = $19;
 $20 = $9;
 $21 = $8;
 $22 = (($20) + ($21)|0);
 $10 = $22;
 $23 = $9;
 $11 = $23;
 $24 = $8;
 $25 = ($24>>>0)<(1);
 if ($25) {
  $4 = -14;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 }
 $26 = $11;
 $27 = ((($26)) + 1|0);
 $11 = $27;
 $28 = HEAP8[$26>>0]|0;
 $29 = $28&255;
 $12 = $29;
 $30 = $12;
 $31 = ($30|0)!=(0);
 if (!($31)) {
  $32 = $6;
  HEAP32[$32>>2] = 0;
  $4 = 1;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 }
 $33 = $12;
 $34 = ($33|0)>(127);
 do {
  if ($34) {
   $35 = $12;
   $36 = ($35|0)==(255);
   $37 = $11;
   if ($36) {
    $38 = ((($37)) + 2|0);
    $39 = $10;
    $40 = ($38>>>0)>($39>>>0);
    if (!($40)) {
     $41 = $11;
     $42 = (_MEM_readLE16_151($41)|0);
     $43 = $42&65535;
     $44 = (($43) + 32512)|0;
     $12 = $44;
     $45 = $11;
     $46 = ((($45)) + 2|0);
     $11 = $46;
     break;
    }
    $4 = -14;
    $148 = $4;
    STACKTOP = sp;return ($148|0);
   } else {
    $47 = $10;
    $48 = ($37>>>0)>=($47>>>0);
    if (!($48)) {
     $49 = $12;
     $50 = (($49) - 128)|0;
     $51 = $50 << 8;
     $52 = $11;
     $53 = ((($52)) + 1|0);
     $11 = $53;
     $54 = HEAP8[$52>>0]|0;
     $55 = $54&255;
     $56 = (($51) + ($55))|0;
     $12 = $56;
     break;
    }
    $4 = -14;
    $148 = $4;
    STACKTOP = sp;return ($148|0);
   }
  }
 } while(0);
 $57 = $12;
 $58 = $6;
 HEAP32[$58>>2] = $57;
 $59 = $11;
 $60 = ((($59)) + 4|0);
 $61 = $10;
 $62 = ($60>>>0)>($61>>>0);
 if ($62) {
  $4 = -14;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 }
 $63 = $11;
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $65 >> 6;
 $13 = $66;
 $67 = $11;
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $69 >> 4;
 $71 = $70 & 3;
 $14 = $71;
 $72 = $11;
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 >> 2;
 $76 = $75 & 3;
 $15 = $76;
 $77 = $11;
 $78 = ((($77)) + 1|0);
 $11 = $78;
 $79 = $5;
 $80 = ((($79)) + 16|0);
 $81 = $5;
 $82 = $13;
 $83 = $11;
 $84 = $10;
 $85 = $11;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = $5;
 $90 = ((($89)) + 23652|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (_ZSTD_buildSeqTable($80,$81,$82,35,9,$83,$88,456,$91)|0);
 $16 = $92;
 $93 = $16;
 $94 = (_ERR_isError_156($93)|0);
 $95 = ($94|0)!=(0);
 if ($95) {
  $4 = -15;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 }
 $96 = $16;
 $97 = $11;
 $98 = (($97) + ($96)|0);
 $11 = $98;
 $99 = $5;
 $100 = ((($99)) + 16|0);
 $101 = ((($100)) + 2052|0);
 $102 = $5;
 $103 = ((($102)) + 8|0);
 $104 = $14;
 $105 = $11;
 $106 = $10;
 $107 = $11;
 $108 = $106;
 $109 = $107;
 $110 = (($108) - ($109))|0;
 $111 = $5;
 $112 = ((($111)) + 23652|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = (_ZSTD_buildSeqTable($101,$103,$104,28,8,$105,$110,716,$113)|0);
 $17 = $114;
 $115 = $17;
 $116 = (_ERR_isError_156($115)|0);
 $117 = ($116|0)!=(0);
 if ($117) {
  $4 = -15;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 }
 $118 = $17;
 $119 = $11;
 $120 = (($119) + ($118)|0);
 $11 = $120;
 $121 = $5;
 $122 = ((($121)) + 16|0);
 $123 = ((($122)) + 3080|0);
 $124 = $5;
 $125 = ((($124)) + 4|0);
 $126 = $15;
 $127 = $11;
 $128 = $10;
 $129 = $11;
 $130 = $128;
 $131 = $129;
 $132 = (($130) - ($131))|0;
 $133 = $5;
 $134 = ((($133)) + 23652|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = (_ZSTD_buildSeqTable($123,$125,$126,52,9,$127,$132,848,$135)|0);
 $18 = $136;
 $137 = $18;
 $138 = (_ERR_isError_156($137)|0);
 $139 = ($138|0)!=(0);
 if ($139) {
  $4 = -15;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 } else {
  $140 = $18;
  $141 = $11;
  $142 = (($141) + ($140)|0);
  $11 = $142;
  $143 = $11;
  $144 = $9;
  $145 = $143;
  $146 = $144;
  $147 = (($145) - ($146))|0;
  $4 = $147;
  $148 = $4;
  STACKTOP = sp;return ($148|0);
 }
 return (0)|0;
}
function _ZSTD_buildSeqTable($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $13 = sp + 32|0;
 $20 = sp + 4|0;
 $21 = sp + 52|0;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 HEAP32[$13>>2] = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $23 = $17;
 $19 = $23;
 $24 = $12;
 L1: do {
  switch ($24|0) {
  case 1:  {
   $25 = $16;
   $26 = ($25|0)!=(0);
   if (!($26)) {
    $9 = -14;
    break L1;
   }
   $27 = $15;
   $28 = HEAP8[$27>>0]|0;
   $29 = $28&255;
   $30 = HEAP32[$13>>2]|0;
   $31 = ($29>>>0)>($30>>>0);
   if ($31) {
    $9 = -15;
    break L1;
   } else {
    $32 = $10;
    $33 = $15;
    $34 = HEAP8[$33>>0]|0;
    (_FSE_buildDTable_rle($32,$34)|0);
    $35 = $10;
    $36 = $11;
    HEAP32[$36>>2] = $35;
    $9 = 1;
    break L1;
   }
   break;
  }
  case 0:  {
   $37 = $19;
   $38 = $11;
   HEAP32[$38>>2] = $37;
   $9 = 0;
   break;
  }
  case 3:  {
   $39 = $18;
   $40 = ($39|0)!=(0);
   if ($40) {
    $9 = 0;
    break L1;
   } else {
    $9 = -15;
    break L1;
   }
   break;
  }
  default: {
   $41 = $15;
   $42 = $16;
   $43 = (_FSE_readNCount($21,$13,$20,$41,$42)|0);
   $22 = $43;
   $44 = $22;
   $45 = (_ERR_isError_156($44)|0);
   $46 = ($45|0)!=(0);
   if ($46) {
    $9 = -15;
    break L1;
   }
   $47 = HEAP32[$20>>2]|0;
   $48 = $14;
   $49 = ($47>>>0)>($48>>>0);
   if ($49) {
    $9 = -15;
    break L1;
   } else {
    $50 = $10;
    $51 = HEAP32[$13>>2]|0;
    $52 = HEAP32[$20>>2]|0;
    (_FSE_buildDTable($50,$21,$51,$52)|0);
    $53 = $10;
    $54 = $11;
    HEAP32[$54>>2] = $53;
    $55 = $22;
    $9 = $55;
    break L1;
   }
  }
  }
 } while(0);
 $56 = $9;
 STACKTOP = sp;return ($56|0);
}
function _ZSTD_checkContinuity($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 23596|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)!=($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 23596|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 23608|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = $2;
 $16 = ((($15)) + 23596|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 23600|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $17;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = (0 - ($23))|0;
 $25 = (($14) + ($24)|0);
 $26 = $2;
 $27 = ((($26)) + 23604|0);
 HEAP32[$27>>2] = $25;
 $28 = $3;
 $29 = $2;
 $30 = ((($29)) + 23600|0);
 HEAP32[$30>>2] = $28;
 $31 = $3;
 $32 = $2;
 $33 = ((($32)) + 23596|0);
 HEAP32[$33>>2] = $31;
 STACKTOP = sp;return;
}
function _ZSTD_decompressBlock_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $11 = $13;
 $14 = $10;
 $15 = ($14>>>0)>=(131072);
 if ($15) {
  $5 = -14;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 $16 = $6;
 $17 = $9;
 $18 = $10;
 $19 = (_ZSTD_decodeLiteralsBlock($16,$17,$18)|0);
 $12 = $19;
 $20 = $12;
 $21 = (_ERR_isError_156($20)|0);
 $22 = ($21|0)!=(0);
 $23 = $12;
 if ($22) {
  $5 = $23;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 } else {
  $24 = $11;
  $25 = (($24) + ($23)|0);
  $11 = $25;
  $26 = $12;
  $27 = $10;
  $28 = (($27) - ($26))|0;
  $10 = $28;
  $29 = $6;
  $30 = $7;
  $31 = $8;
  $32 = $11;
  $33 = $10;
  $34 = (_ZSTD_decompressSequences($29,$30,$31,$32,$33)|0);
  $5 = $34;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _ZSTD_decompressSequences($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $$byval_copy = sp + 264|0;
 $22 = sp;
 $34 = sp + 148|0;
 $39 = sp + 128|0;
 $41 = sp + 56|0;
 $44 = sp + 32|0;
 $24 = $0;
 $25 = $1;
 $26 = $2;
 $27 = $3;
 $28 = $4;
 $48 = $27;
 $29 = $48;
 $49 = $29;
 $50 = $28;
 $51 = (($49) + ($50)|0);
 $30 = $51;
 $52 = $25;
 $31 = $52;
 $53 = $31;
 $54 = $26;
 $55 = (($53) + ($54)|0);
 $32 = $55;
 $56 = $31;
 $33 = $56;
 $57 = $24;
 $58 = ((($57)) + 23752|0);
 $59 = HEAP32[$58>>2]|0;
 HEAP32[$34>>2] = $59;
 $60 = HEAP32[$34>>2]|0;
 $61 = $24;
 $62 = ((($61)) + 23768|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($60) + ($63)|0);
 $35 = $64;
 $65 = $24;
 $66 = ((($65)) + 23600|0);
 $67 = HEAP32[$66>>2]|0;
 $36 = $67;
 $68 = $24;
 $69 = ((($68)) + 23604|0);
 $70 = HEAP32[$69>>2]|0;
 $37 = $70;
 $71 = $24;
 $72 = ((($71)) + 23608|0);
 $73 = HEAP32[$72>>2]|0;
 $38 = $73;
 $74 = $24;
 $75 = $29;
 $76 = $28;
 $77 = (_ZSTD_decodeSeqHeaders($74,$39,$75,$76)|0);
 $40 = $77;
 $78 = $40;
 $79 = (_ERR_isError_156($78)|0);
 $80 = ($79|0)!=(0);
 $81 = $40;
 if ($80) {
  $23 = $81;
  $380 = $23;
  STACKTOP = sp;return ($380|0);
 }
 $82 = $29;
 $83 = (($82) + ($81)|0);
 $29 = $83;
 $84 = HEAP32[$39>>2]|0;
 $85 = ($84|0)!=(0);
 L5: do {
  if ($85) {
   $86 = $24;
   $87 = ((($86)) + 23652|0);
   HEAP32[$87>>2] = 1;
   $42 = 0;
   while(1) {
    $88 = $42;
    $89 = ($88>>>0)<(3);
    if (!($89)) {
     break;
    }
    $90 = $24;
    $91 = ((($90)) + 16|0);
    $92 = ((($91)) + 23568|0);
    $93 = $42;
    $94 = (($92) + ($93<<2)|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($41)) + 44|0);
    $97 = $42;
    $98 = (($96) + ($97<<2)|0);
    HEAP32[$98>>2] = $95;
    $99 = $42;
    $100 = (($99) + 1)|0;
    $42 = $100;
   }
   $101 = $29;
   $102 = $30;
   $103 = $29;
   $104 = $102;
   $105 = $103;
   $106 = (($104) - ($105))|0;
   $107 = (_BIT_initDStream_157($41,$101,$106)|0);
   $43 = $107;
   $108 = $43;
   $109 = (_ERR_isError_156($108)|0);
   $110 = ($109|0)!=(0);
   if ($110) {
    $23 = -15;
    $380 = $23;
    STACKTOP = sp;return ($380|0);
   }
   $111 = ((($41)) + 20|0);
   $112 = $24;
   $113 = HEAP32[$112>>2]|0;
   _FSE_initDState_158($111,$41,$113);
   $114 = ((($41)) + 28|0);
   $115 = $24;
   $116 = ((($115)) + 8|0);
   $117 = HEAP32[$116>>2]|0;
   _FSE_initDState_158($114,$41,$117);
   $118 = ((($41)) + 36|0);
   $119 = $24;
   $120 = ((($119)) + 4|0);
   $121 = HEAP32[$120>>2]|0;
   _FSE_initDState_158($118,$41,$121);
   while(1) {
    $122 = (_BIT_reloadDStream_159($41)|0);
    $123 = ($122>>>0)<=(2);
    $124 = HEAP32[$39>>2]|0;
    $125 = ($124|0)!=(0);
    $126 = $123 ? $125 : 0;
    $127 = HEAP32[$39>>2]|0;
    if (!($126)) {
     break;
    }
    $128 = (($127) + -1)|0;
    HEAP32[$39>>2] = $128;
    _ZSTD_decodeSequence($44,$41);
    $129 = $33;
    $130 = $32;
    $131 = $35;
    $132 = $36;
    $133 = $37;
    $134 = $38;
    dest=$22; src=$44; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $6 = $129;
    $7 = $130;
    $8 = $34;
    $9 = $131;
    $10 = $132;
    $11 = $133;
    $12 = $134;
    $135 = $6;
    $136 = HEAP32[$22>>2]|0;
    $137 = (($135) + ($136)|0);
    $13 = $137;
    $138 = HEAP32[$22>>2]|0;
    $139 = ((($22)) + 4|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = (($138) + ($140))|0;
    $14 = $141;
    $142 = $6;
    $143 = $14;
    $144 = (($142) + ($143)|0);
    $15 = $144;
    $145 = $7;
    $146 = ((($145)) + -8|0);
    $16 = $146;
    $147 = $8;
    $148 = HEAP32[$147>>2]|0;
    $149 = HEAP32[$22>>2]|0;
    $150 = (($148) + ($149)|0);
    $17 = $150;
    $151 = $13;
    $152 = ((($22)) + 8|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (0 - ($153))|0;
    $155 = (($151) + ($154)|0);
    $18 = $155;
    $156 = $15;
    $157 = $7;
    $158 = ($156>>>0)>($157>>>0);
    L18: do {
     if ($158) {
      $5 = -13;
     } else {
      $159 = $17;
      $160 = $9;
      $161 = ($159>>>0)>($160>>>0);
      if ($161) {
       $5 = -15;
       break;
      }
      $162 = $13;
      $163 = $16;
      $164 = ($162>>>0)>($163>>>0);
      $165 = $6;
      if ($164) {
       $166 = $7;
       $167 = $8;
       $168 = $9;
       $169 = $10;
       $170 = $11;
       $171 = $12;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$22>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$22+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$22+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$22+12>>2]|0;
       $172 = (_ZSTD_execSequenceLast7($165,$166,$$byval_copy,$167,$168,$169,$170,$171)|0);
       $5 = $172;
       break;
      }
      $173 = $8;
      $174 = HEAP32[$173>>2]|0;
      _ZSTD_copy8_160($165,$174);
      $175 = HEAP32[$22>>2]|0;
      $176 = ($175>>>0)>(8);
      if ($176) {
       $177 = $6;
       $178 = ((($177)) + 8|0);
       $179 = $8;
       $180 = HEAP32[$179>>2]|0;
       $181 = ((($180)) + 8|0);
       $182 = HEAP32[$22>>2]|0;
       $183 = (($182) - 8)|0;
       _ZSTD_wildcopy_161($178,$181,$183);
      }
      $184 = $13;
      $6 = $184;
      $185 = $17;
      $186 = $8;
      HEAP32[$186>>2] = $185;
      $187 = ((($22)) + 8|0);
      $188 = HEAP32[$187>>2]|0;
      $189 = $13;
      $190 = $10;
      $191 = $189;
      $192 = $190;
      $193 = (($191) - ($192))|0;
      $194 = ($188>>>0)>($193>>>0);
      do {
       if ($194) {
        $195 = ((($22)) + 8|0);
        $196 = HEAP32[$195>>2]|0;
        $197 = $13;
        $198 = $11;
        $199 = $197;
        $200 = $198;
        $201 = (($199) - ($200))|0;
        $202 = ($196>>>0)>($201>>>0);
        if ($202) {
         $5 = -15;
         break L18;
        }
        $203 = $12;
        $204 = $18;
        $205 = $10;
        $206 = $204;
        $207 = $205;
        $208 = (($206) - ($207))|0;
        $209 = (($203) + ($208)|0);
        $18 = $209;
        $210 = $18;
        $211 = ((($22)) + 4|0);
        $212 = HEAP32[$211>>2]|0;
        $213 = (($210) + ($212)|0);
        $214 = $12;
        $215 = ($213>>>0)<=($214>>>0);
        if ($215) {
         $216 = $13;
         $217 = $18;
         $218 = ((($22)) + 4|0);
         $219 = HEAP32[$218>>2]|0;
         _memmove(($216|0),($217|0),($219|0))|0;
         $220 = $14;
         $5 = $220;
         break L18;
        }
        $221 = $12;
        $222 = $18;
        $223 = $221;
        $224 = $222;
        $225 = (($223) - ($224))|0;
        $19 = $225;
        $226 = $13;
        $227 = $18;
        $228 = $19;
        _memmove(($226|0),($227|0),($228|0))|0;
        $229 = $13;
        $230 = $19;
        $231 = (($229) + ($230)|0);
        $6 = $231;
        $232 = $19;
        $233 = ((($22)) + 4|0);
        $234 = HEAP32[$233>>2]|0;
        $235 = (($234) - ($232))|0;
        HEAP32[$233>>2] = $235;
        $236 = $10;
        $18 = $236;
        $237 = $6;
        $238 = $16;
        $239 = ($237>>>0)>($238>>>0);
        if (!($239)) {
         $240 = ((($22)) + 4|0);
         $241 = HEAP32[$240>>2]|0;
         $242 = ($241>>>0)<(3);
         if (!($242)) {
          break;
         }
        }
        $20 = 0;
        while(1) {
         $243 = $20;
         $244 = ((($22)) + 4|0);
         $245 = HEAP32[$244>>2]|0;
         $246 = ($243>>>0)<($245>>>0);
         if (!($246)) {
          break;
         }
         $247 = $18;
         $248 = $20;
         $249 = (($247) + ($248)|0);
         $250 = HEAP8[$249>>0]|0;
         $251 = $6;
         $252 = $20;
         $253 = (($251) + ($252)|0);
         HEAP8[$253>>0] = $250;
         $254 = $20;
         $255 = (($254) + 1)|0;
         $20 = $255;
        }
        $256 = $14;
        $5 = $256;
        break L18;
       }
      } while(0);
      $257 = ((($22)) + 8|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = ($258>>>0)<(8);
      if ($259) {
       $260 = ((($22)) + 8|0);
       $261 = HEAP32[$260>>2]|0;
       $262 = (1108 + ($261<<2)|0);
       $263 = HEAP32[$262>>2]|0;
       $21 = $263;
       $264 = $18;
       $265 = HEAP8[$264>>0]|0;
       $266 = $6;
       HEAP8[$266>>0] = $265;
       $267 = $18;
       $268 = ((($267)) + 1|0);
       $269 = HEAP8[$268>>0]|0;
       $270 = $6;
       $271 = ((($270)) + 1|0);
       HEAP8[$271>>0] = $269;
       $272 = $18;
       $273 = ((($272)) + 2|0);
       $274 = HEAP8[$273>>0]|0;
       $275 = $6;
       $276 = ((($275)) + 2|0);
       HEAP8[$276>>0] = $274;
       $277 = $18;
       $278 = ((($277)) + 3|0);
       $279 = HEAP8[$278>>0]|0;
       $280 = $6;
       $281 = ((($280)) + 3|0);
       HEAP8[$281>>0] = $279;
       $282 = ((($22)) + 8|0);
       $283 = HEAP32[$282>>2]|0;
       $284 = (1140 + ($283<<2)|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = $18;
       $287 = (($286) + ($285)|0);
       $18 = $287;
       $288 = $6;
       $289 = ((($288)) + 4|0);
       $290 = $18;
       _ZSTD_copy4($289,$290);
       $291 = $21;
       $292 = $18;
       $293 = (0 - ($291))|0;
       $294 = (($292) + ($293)|0);
       $18 = $294;
      } else {
       $295 = $6;
       $296 = $18;
       _ZSTD_copy8_160($295,$296);
      }
      $297 = $6;
      $298 = ((($297)) + 8|0);
      $6 = $298;
      $299 = $18;
      $300 = ((($299)) + 8|0);
      $18 = $300;
      $301 = $15;
      $302 = $7;
      $303 = ((($302)) + -13|0);
      $304 = ($301>>>0)>($303>>>0);
      $305 = $6;
      L50: do {
       if ($304) {
        $306 = $16;
        $307 = ($305>>>0)<($306>>>0);
        if ($307) {
         $308 = $6;
         $309 = $18;
         $310 = $16;
         $311 = $6;
         $312 = $310;
         $313 = $311;
         $314 = (($312) - ($313))|0;
         _ZSTD_wildcopy_161($308,$309,$314);
         $315 = $16;
         $316 = $6;
         $317 = $315;
         $318 = $316;
         $319 = (($317) - ($318))|0;
         $320 = $18;
         $321 = (($320) + ($319)|0);
         $18 = $321;
         $322 = $16;
         $6 = $322;
        }
        while(1) {
         $323 = $6;
         $324 = $15;
         $325 = ($323>>>0)<($324>>>0);
         if (!($325)) {
          break L50;
         }
         $326 = $18;
         $327 = ((($326)) + 1|0);
         $18 = $327;
         $328 = HEAP8[$326>>0]|0;
         $329 = $6;
         $330 = ((($329)) + 1|0);
         $6 = $330;
         HEAP8[$329>>0] = $328;
        }
       } else {
        $331 = $18;
        $332 = ((($22)) + 4|0);
        $333 = HEAP32[$332>>2]|0;
        $334 = (($333) - 8)|0;
        _ZSTD_wildcopy_161($305,$331,$334);
       }
      } while(0);
      $335 = $14;
      $5 = $335;
     }
    } while(0);
    $336 = $5;
    $45 = $336;
    $337 = $45;
    $338 = (_ERR_isError_156($337)|0);
    $339 = ($338|0)!=(0);
    $340 = $45;
    if ($339) {
     label = 41;
     break;
    }
    $341 = $33;
    $342 = (($341) + ($340)|0);
    $33 = $342;
   }
   if ((label|0) == 41) {
    $23 = $340;
    $380 = $23;
    STACKTOP = sp;return ($380|0);
   }
   $343 = ($127|0)!=(0);
   if ($343) {
    $23 = -15;
    $380 = $23;
    STACKTOP = sp;return ($380|0);
   }
   $46 = 0;
   while(1) {
    $344 = $46;
    $345 = ($344>>>0)<(3);
    if (!($345)) {
     break L5;
    }
    $346 = ((($41)) + 44|0);
    $347 = $46;
    $348 = (($346) + ($347<<2)|0);
    $349 = HEAP32[$348>>2]|0;
    $350 = $24;
    $351 = ((($350)) + 16|0);
    $352 = ((($351)) + 23568|0);
    $353 = $46;
    $354 = (($352) + ($353<<2)|0);
    HEAP32[$354>>2] = $349;
    $355 = $46;
    $356 = (($355) + 1)|0;
    $46 = $356;
   }
  }
 } while(0);
 $357 = $35;
 $358 = HEAP32[$34>>2]|0;
 $359 = $357;
 $360 = $358;
 $361 = (($359) - ($360))|0;
 $47 = $361;
 $362 = $47;
 $363 = $32;
 $364 = $33;
 $365 = $363;
 $366 = $364;
 $367 = (($365) - ($366))|0;
 $368 = ($362>>>0)>($367>>>0);
 if ($368) {
  $23 = -13;
  $380 = $23;
  STACKTOP = sp;return ($380|0);
 } else {
  $369 = $33;
  $370 = HEAP32[$34>>2]|0;
  $371 = $47;
  _memcpy(($369|0),($370|0),($371|0))|0;
  $372 = $47;
  $373 = $33;
  $374 = (($373) + ($372)|0);
  $33 = $374;
  $375 = $33;
  $376 = $31;
  $377 = $375;
  $378 = $376;
  $379 = (($377) - ($378))|0;
  $23 = $379;
  $380 = $23;
  STACKTOP = sp;return ($380|0);
 }
 return (0)|0;
}
function _BIT_initDStream_157($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9>>>0)<(1);
 if ($10) {
  $11 = $4;
  ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;HEAP32[$11+16>>2]=0|0;
  $3 = -14;
  $138 = $3;
  STACKTOP = sp;return ($138|0);
 }
 $12 = $5;
 $13 = $4;
 $14 = ((($13)) + 12|0);
 HEAP32[$14>>2] = $12;
 $15 = $4;
 $16 = ((($15)) + 12|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($17)) + 4|0);
 $19 = $4;
 $20 = ((($19)) + 16|0);
 HEAP32[$20>>2] = $18;
 $21 = $6;
 $22 = ($21>>>0)>=(4);
 do {
  if ($22) {
   $23 = $5;
   $24 = $6;
   $25 = (($23) + ($24)|0);
   $26 = ((($25)) + -4|0);
   $27 = $4;
   $28 = ((($27)) + 8|0);
   HEAP32[$28>>2] = $26;
   $29 = $4;
   $30 = ((($29)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (_MEM_readLEST_170($31)|0);
   $33 = $4;
   HEAP32[$33>>2] = $32;
   $34 = $5;
   $35 = $6;
   $36 = (($35) - 1)|0;
   $37 = (($34) + ($36)|0);
   $38 = HEAP8[$37>>0]|0;
   $7 = $38;
   $39 = $7;
   $40 = $39&255;
   $41 = ($40|0)!=(0);
   if ($41) {
    $42 = $7;
    $43 = $42&255;
    $44 = (_BIT_highbit32_171($43)|0);
    $45 = (8 - ($44))|0;
    $48 = $45;
   } else {
    $48 = 0;
   }
   $46 = $4;
   $47 = ((($46)) + 4|0);
   HEAP32[$47>>2] = $48;
   $49 = $7;
   $50 = $49&255;
   $51 = ($50|0)==(0);
   if ($51) {
    $3 = -1;
    $138 = $3;
    STACKTOP = sp;return ($138|0);
   }
  } else {
   $52 = $4;
   $53 = ((($52)) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $4;
   $56 = ((($55)) + 8|0);
   HEAP32[$56>>2] = $54;
   $57 = $4;
   $58 = ((($57)) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = $4;
   HEAP32[$62>>2] = $61;
   $63 = $6;
   switch ($63|0) {
   case 7:  {
    $64 = $5;
    $65 = ((($64)) + 6|0);
    $66 = HEAP8[$65>>0]|0;
    $67 = $66&255;
    $68 = $67 << 16;
    $69 = $4;
    $70 = HEAP32[$69>>2]|0;
    $71 = (($70) + ($68))|0;
    HEAP32[$69>>2] = $71;
    label = 10;
    break;
   }
   case 6:  {
    label = 10;
    break;
   }
   case 5:  {
    label = 11;
    break;
   }
   case 4:  {
    label = 12;
    break;
   }
   case 3:  {
    label = 13;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    $72 = $5;
    $73 = ((($72)) + 5|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = $75 << 8;
    $77 = $4;
    $78 = HEAP32[$77>>2]|0;
    $79 = (($78) + ($76))|0;
    HEAP32[$77>>2] = $79;
    label = 11;
   }
   if ((label|0) == 11) {
    $80 = $5;
    $81 = ((($80)) + 4|0);
    $82 = HEAP8[$81>>0]|0;
    $83 = $82&255;
    $84 = $83 << 0;
    $85 = $4;
    $86 = HEAP32[$85>>2]|0;
    $87 = (($86) + ($84))|0;
    HEAP32[$85>>2] = $87;
    label = 12;
   }
   if ((label|0) == 12) {
    $88 = $5;
    $89 = ((($88)) + 3|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $90&255;
    $92 = $91 << 24;
    $93 = $4;
    $94 = HEAP32[$93>>2]|0;
    $95 = (($94) + ($92))|0;
    HEAP32[$93>>2] = $95;
    label = 13;
   }
   if ((label|0) == 13) {
    $96 = $5;
    $97 = ((($96)) + 2|0);
    $98 = HEAP8[$97>>0]|0;
    $99 = $98&255;
    $100 = $99 << 16;
    $101 = $4;
    $102 = HEAP32[$101>>2]|0;
    $103 = (($102) + ($100))|0;
    HEAP32[$101>>2] = $103;
    label = 14;
   }
   if ((label|0) == 14) {
    $104 = $5;
    $105 = ((($104)) + 1|0);
    $106 = HEAP8[$105>>0]|0;
    $107 = $106&255;
    $108 = $107 << 8;
    $109 = $4;
    $110 = HEAP32[$109>>2]|0;
    $111 = (($110) + ($108))|0;
    HEAP32[$109>>2] = $111;
   }
   $112 = $5;
   $113 = $6;
   $114 = (($113) - 1)|0;
   $115 = (($112) + ($114)|0);
   $116 = HEAP8[$115>>0]|0;
   $8 = $116;
   $117 = $8;
   $118 = $117&255;
   $119 = ($118|0)!=(0);
   if ($119) {
    $120 = $8;
    $121 = $120&255;
    $122 = (_BIT_highbit32_171($121)|0);
    $123 = (8 - ($122))|0;
    $126 = $123;
   } else {
    $126 = 0;
   }
   $124 = $4;
   $125 = ((($124)) + 4|0);
   HEAP32[$125>>2] = $126;
   $127 = $8;
   $128 = $127&255;
   $129 = ($128|0)==(0);
   if (!($129)) {
    $130 = $6;
    $131 = (4 - ($130))|0;
    $132 = $131<<3;
    $133 = $4;
    $134 = ((($133)) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($135) + ($132))|0;
    HEAP32[$134>>2] = $136;
    break;
   }
   $3 = -1;
   $138 = $3;
   STACKTOP = sp;return ($138|0);
  }
 } while(0);
 $137 = $6;
 $3 = $137;
 $138 = $3;
 STACKTOP = sp;return ($138|0);
}
function _FSE_initDState_158($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $6 = $8;
 $9 = $6;
 $7 = $9;
 $10 = $4;
 $11 = $7;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (_BIT_readBits_166($10,$13)|0);
 $15 = $3;
 HEAP32[$15>>2] = $14;
 $16 = $4;
 (_BIT_reloadDStream_159($16)|0);
 $17 = $5;
 $18 = ((($17)) + 4|0);
 $19 = $3;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _BIT_reloadDStream_159($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(32);
 if ($8) {
  $1 = 3;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($11>>>0)>=($14>>>0);
 $16 = $2;
 if ($15) {
  $17 = ((($16)) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 >>> 3;
  $20 = $2;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (0 - ($19))|0;
  $24 = (($22) + ($23)|0);
  HEAP32[$21>>2] = $24;
  $25 = $2;
  $26 = ((($25)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & 7;
  HEAP32[$26>>2] = $28;
  $29 = $2;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (_MEM_readLEST_170($31)|0);
  $33 = $2;
  HEAP32[$33>>2] = $32;
  $1 = 0;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $34 = ((($16)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $2;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($35|0)==($38|0);
 $40 = $2;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 if (!($39)) {
  $44 = $42 >>> 3;
  $3 = $44;
  $4 = 0;
  $45 = $2;
  $46 = ((($45)) + 8|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $3;
  $49 = (0 - ($48))|0;
  $50 = (($47) + ($49)|0);
  $51 = $2;
  $52 = ((($51)) + 12|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($50>>>0)<($53>>>0);
  if ($54) {
   $55 = $2;
   $56 = ((($55)) + 8|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $2;
   $59 = ((($58)) + 12|0);
   $60 = HEAP32[$59>>2]|0;
   $61 = $57;
   $62 = $60;
   $63 = (($61) - ($62))|0;
   $3 = $63;
   $4 = 1;
  }
  $64 = $3;
  $65 = $2;
  $66 = ((($65)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (0 - ($64))|0;
  $69 = (($67) + ($68)|0);
  HEAP32[$66>>2] = $69;
  $70 = $3;
  $71 = $70<<3;
  $72 = $2;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) - ($71))|0;
  HEAP32[$73>>2] = $75;
  $76 = $2;
  $77 = ((($76)) + 8|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = (_MEM_readLEST_170($78)|0);
  $80 = $2;
  HEAP32[$80>>2] = $79;
  $81 = $4;
  $1 = $81;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 $43 = ($42>>>0)<(32);
 if ($43) {
  $1 = 1;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 } else {
  $1 = 2;
  $82 = $1;
  STACKTOP = sp;return ($82|0);
 }
 return (0)|0;
}
function _ZSTD_decodeSequence($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 40|0;
 $2 = $1;
 $13 = $2;
 $14 = ((($13)) + 20|0);
 $15 = (_FSE_peekSymbol($14)|0);
 $16 = $15&255;
 $4 = $16;
 $17 = $2;
 $18 = ((($17)) + 36|0);
 $19 = (_FSE_peekSymbol($18)|0);
 $20 = $19&255;
 $5 = $20;
 $21 = $2;
 $22 = ((($21)) + 28|0);
 $23 = (_FSE_peekSymbol($22)|0);
 $24 = $23&255;
 $6 = $24;
 $25 = $4;
 $26 = (1172 + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $7 = $27;
 $28 = $5;
 $29 = (1316 + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $8 = $30;
 $31 = $6;
 $9 = $31;
 $32 = $7;
 $33 = $8;
 $34 = (($32) + ($33))|0;
 $35 = $9;
 $36 = (($34) + ($35))|0;
 $10 = $36;
 $37 = $6;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $6;
  $40 = (1528 + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $2;
  $43 = $9;
  $44 = (_BIT_readBitsFast_164($42,$43)|0);
  $45 = (($41) + ($44))|0;
  $11 = $45;
  $46 = (_MEM_32bits_165()|0);
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $2;
   (_BIT_reloadDStream_159($48)|0);
  }
 } else {
  $11 = 0;
 }
 $49 = $6;
 $50 = ($49>>>0)<=(1);
 do {
  if ($50) {
   $51 = $4;
   $52 = ($51|0)==(0);
   $53 = $52&1;
   $54 = $11;
   $55 = (($54) + ($53))|0;
   $11 = $55;
   $56 = $11;
   $57 = ($56|0)!=(0);
   if (!($57)) {
    $92 = $2;
    $93 = ((($92)) + 44|0);
    $94 = HEAP32[$93>>2]|0;
    $11 = $94;
    break;
   }
   $58 = $11;
   $59 = ($58|0)==(3);
   $60 = $2;
   $61 = ((($60)) + 44|0);
   if ($59) {
    $62 = HEAP32[$61>>2]|0;
    $63 = (($62) - 1)|0;
    $67 = $63;
   } else {
    $64 = $11;
    $65 = (($61) + ($64<<2)|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = $66;
   }
   $12 = $67;
   $68 = $12;
   $69 = ($68|0)!=(0);
   $70 = $69 ^ 1;
   $71 = $70&1;
   $72 = $12;
   $73 = (($72) + ($71))|0;
   $12 = $73;
   $74 = $11;
   $75 = ($74|0)!=(1);
   if ($75) {
    $76 = $2;
    $77 = ((($76)) + 44|0);
    $78 = ((($77)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $2;
    $81 = ((($80)) + 44|0);
    $82 = ((($81)) + 8|0);
    HEAP32[$82>>2] = $79;
   }
   $83 = $2;
   $84 = ((($83)) + 44|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = $2;
   $87 = ((($86)) + 44|0);
   $88 = ((($87)) + 4|0);
   HEAP32[$88>>2] = $85;
   $89 = $12;
   $11 = $89;
   $90 = $2;
   $91 = ((($90)) + 44|0);
   HEAP32[$91>>2] = $89;
  } else {
   $95 = $2;
   $96 = ((($95)) + 44|0);
   $97 = ((($96)) + 4|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = $2;
   $100 = ((($99)) + 44|0);
   $101 = ((($100)) + 8|0);
   HEAP32[$101>>2] = $98;
   $102 = $2;
   $103 = ((($102)) + 44|0);
   $104 = HEAP32[$103>>2]|0;
   $105 = $2;
   $106 = ((($105)) + 44|0);
   $107 = ((($106)) + 4|0);
   HEAP32[$107>>2] = $104;
   $108 = $11;
   $109 = $2;
   $110 = ((($109)) + 44|0);
   HEAP32[$110>>2] = $108;
  }
 } while(0);
 $111 = $11;
 $112 = ((($3)) + 8|0);
 HEAP32[$112>>2] = $111;
 $113 = $5;
 $114 = (1644 + ($113<<2)|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $5;
 $117 = ($116>>>0)>(31);
 if ($117) {
  $118 = $2;
  $119 = $8;
  $120 = (_BIT_readBitsFast_164($118,$119)|0);
  $122 = $120;
 } else {
  $122 = 0;
 }
 $121 = (($115) + ($122))|0;
 $123 = ((($3)) + 4|0);
 HEAP32[$123>>2] = $121;
 $124 = (_MEM_32bits_165()|0);
 $125 = ($124|0)!=(0);
 if ($125) {
  $126 = $8;
  $127 = $7;
  $128 = (($126) + ($127))|0;
  $129 = ($128>>>0)>(24);
  if ($129) {
   $130 = $2;
   (_BIT_reloadDStream_159($130)|0);
  }
 }
 $131 = $4;
 $132 = (1856 + ($131<<2)|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = $4;
 $135 = ($134>>>0)>(15);
 if ($135) {
  $136 = $2;
  $137 = $7;
  $138 = (_BIT_readBitsFast_164($136,$137)|0);
  $140 = $138;
 } else {
  $140 = 0;
 }
 $139 = (($133) + ($140))|0;
 HEAP32[$3>>2] = $139;
 $141 = (_MEM_32bits_165()|0);
 $142 = ($141|0)!=(0);
 $143 = $10;
 $144 = ($143>>>0)>(31);
 $or$cond = $142 | $144;
 if ($or$cond) {
  $145 = $2;
  (_BIT_reloadDStream_159($145)|0);
 }
 $146 = $2;
 $147 = ((($146)) + 20|0);
 $148 = $2;
 _FSE_updateState($147,$148);
 $149 = $2;
 $150 = ((($149)) + 36|0);
 $151 = $2;
 _FSE_updateState($150,$151);
 $152 = (_MEM_32bits_165()|0);
 $153 = ($152|0)!=(0);
 if (!($153)) {
  $155 = $2;
  $156 = ((($155)) + 28|0);
  $157 = $2;
  _FSE_updateState($156,$157);
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;
  STACKTOP = sp;return;
 }
 $154 = $2;
 (_BIT_reloadDStream_159($154)|0);
 $155 = $2;
 $156 = ((($155)) + 28|0);
 $157 = $2;
 _FSE_updateState($156,$157);
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$3+12>>2]|0;
 STACKTOP = sp;return;
}
function _ZSTD_execSequenceLast7($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $23 = $9;
 $24 = HEAP32[$2>>2]|0;
 $25 = (($23) + ($24)|0);
 $16 = $25;
 $26 = HEAP32[$2>>2]|0;
 $27 = ((($2)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($26) + ($28))|0;
 $17 = $29;
 $30 = $9;
 $31 = $17;
 $32 = (($30) + ($31)|0);
 $18 = $32;
 $33 = $10;
 $34 = ((($33)) + -8|0);
 $19 = $34;
 $35 = $11;
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$2>>2]|0;
 $38 = (($36) + ($37)|0);
 $20 = $38;
 $39 = $16;
 $40 = ((($2)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (0 - ($41))|0;
 $43 = (($39) + ($42)|0);
 $21 = $43;
 $44 = $18;
 $45 = $10;
 $46 = ($44>>>0)>($45>>>0);
 if ($46) {
  $8 = -13;
  $142 = $8;
  STACKTOP = sp;return ($142|0);
 }
 $47 = $20;
 $48 = $12;
 $49 = ($47>>>0)>($48>>>0);
 if ($49) {
  $8 = -15;
  $142 = $8;
  STACKTOP = sp;return ($142|0);
 }
 $50 = $16;
 $51 = $19;
 $52 = ($50>>>0)<=($51>>>0);
 if ($52) {
  $8 = -1;
  $142 = $8;
  STACKTOP = sp;return ($142|0);
 }
 $53 = $9;
 $54 = $19;
 $55 = ($53>>>0)<($54>>>0);
 if ($55) {
  $56 = $9;
  $57 = $11;
  $58 = HEAP32[$57>>2]|0;
  $59 = $19;
  $60 = $9;
  $61 = $59;
  $62 = $60;
  $63 = (($61) - ($62))|0;
  _ZSTD_wildcopy_161($56,$58,$63);
  $64 = $19;
  $65 = $9;
  $66 = $64;
  $67 = $65;
  $68 = (($66) - ($67))|0;
  $69 = $11;
  $70 = HEAP32[$69>>2]|0;
  $71 = (($70) + ($68)|0);
  HEAP32[$69>>2] = $71;
  $72 = $19;
  $9 = $72;
 }
 while(1) {
  $73 = $9;
  $74 = $16;
  $75 = ($73>>>0)<($74>>>0);
  if (!($75)) {
   break;
  }
  $76 = $11;
  $77 = HEAP32[$76>>2]|0;
  $78 = ((($77)) + 1|0);
  HEAP32[$76>>2] = $78;
  $79 = HEAP8[$77>>0]|0;
  $80 = $9;
  $81 = ((($80)) + 1|0);
  $9 = $81;
  HEAP8[$80>>0] = $79;
 }
 $82 = ((($2)) + 8|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $16;
 $85 = $13;
 $86 = $84;
 $87 = $85;
 $88 = (($86) - ($87))|0;
 $89 = ($83>>>0)>($88>>>0);
 do {
  if ($89) {
   $90 = ((($2)) + 8|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $16;
   $93 = $14;
   $94 = $92;
   $95 = $93;
   $96 = (($94) - ($95))|0;
   $97 = ($91>>>0)>($96>>>0);
   if ($97) {
    $8 = -15;
    $142 = $8;
    STACKTOP = sp;return ($142|0);
   }
   $98 = $15;
   $99 = $13;
   $100 = $21;
   $101 = $99;
   $102 = $100;
   $103 = (($101) - ($102))|0;
   $104 = (0 - ($103))|0;
   $105 = (($98) + ($104)|0);
   $21 = $105;
   $106 = $21;
   $107 = ((($2)) + 4|0);
   $108 = HEAP32[$107>>2]|0;
   $109 = (($106) + ($108)|0);
   $110 = $15;
   $111 = ($109>>>0)<=($110>>>0);
   if (!($111)) {
    $117 = $15;
    $118 = $21;
    $119 = $117;
    $120 = $118;
    $121 = (($119) - ($120))|0;
    $22 = $121;
    $122 = $16;
    $123 = $21;
    $124 = $22;
    _memmove(($122|0),($123|0),($124|0))|0;
    $125 = $16;
    $126 = $22;
    $127 = (($125) + ($126)|0);
    $9 = $127;
    $128 = $22;
    $129 = ((($2)) + 4|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = (($130) - ($128))|0;
    HEAP32[$129>>2] = $131;
    $132 = $13;
    $21 = $132;
    break;
   }
   $112 = $16;
   $113 = $21;
   $114 = ((($2)) + 4|0);
   $115 = HEAP32[$114>>2]|0;
   _memmove(($112|0),($113|0),($115|0))|0;
   $116 = $17;
   $8 = $116;
   $142 = $8;
   STACKTOP = sp;return ($142|0);
  }
 } while(0);
 while(1) {
  $133 = $9;
  $134 = $18;
  $135 = ($133>>>0)<($134>>>0);
  if (!($135)) {
   break;
  }
  $136 = $21;
  $137 = ((($136)) + 1|0);
  $21 = $137;
  $138 = HEAP8[$136>>0]|0;
  $139 = $9;
  $140 = ((($139)) + 1|0);
  $9 = $140;
  HEAP8[$139>>0] = $138;
 }
 $141 = $17;
 $8 = $141;
 $142 = $8;
 STACKTOP = sp;return ($142|0);
}
function _ZSTD_copy8_160($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$4+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$4+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$4+7>>0]=HEAP8[$5+7>>0]|0;
 STACKTOP = sp;return;
}
function _ZSTD_wildcopy_161($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $6 = $9;
 $10 = $3;
 $7 = $10;
 $11 = $7;
 $12 = $5;
 $13 = (($11) + ($12)|0);
 $8 = $13;
 while(1) {
  $14 = $7;
  $15 = $6;
  _ZSTD_copy8_160($14,$15);
  $16 = $7;
  $17 = ((($16)) + 8|0);
  $7 = $17;
  $18 = $6;
  $19 = ((($18)) + 8|0);
  $6 = $19;
  $20 = $7;
  $21 = $8;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ZSTD_copy4($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;
 STACKTOP = sp;return;
}
function _FSE_peekSymbol($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7<<2)|0);
 ;HEAP16[$2>>1]=HEAP16[$8>>1]|0;HEAP16[$2+2>>1]=HEAP16[$8+2>>1]|0;
 $9 = ((($2)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 STACKTOP = sp;return ($10|0);
}
function _BIT_readBitsFast_164($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BIT_lookBitsFast_169($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BIT_skipBits_168($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _MEM_32bits_165() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _FSE_updateState($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + ($11<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$12>>1]|0;HEAP16[$4+2>>1]=HEAP16[$12+2>>1]|0;
 $13 = ((($4)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $5 = $15;
 $16 = $3;
 $17 = $5;
 $18 = (_BIT_readBits_166($16,$17)|0);
 $6 = $18;
 $19 = HEAP16[$4>>1]|0;
 $20 = $19&65535;
 $21 = $6;
 $22 = (($20) + ($21))|0;
 $23 = $2;
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function _BIT_readBits_166($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BIT_lookBits_167($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BIT_skipBits_168($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _BIT_lookBits_167($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $11 >>> 1;
 $13 = $3;
 $14 = (31 - ($13))|0;
 $15 = $14 & 31;
 $16 = $12 >>> $15;
 STACKTOP = sp;return ($16|0);
}
function _BIT_skipBits_168($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _BIT_lookBitsFast_169($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $3;
 $13 = (32 - ($12))|0;
 $14 = $13 & 31;
 $15 = $11 >>> $14;
 STACKTOP = sp;return ($15|0);
}
function _MEM_readLEST_170($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_32bits_165()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 if ($4) {
  $6 = (_MEM_readLE32_146($5)|0);
  $1 = $6;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = (_MEM_readLE64_152($5)|0);
  $8 = tempRet0;
  $1 = $7;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _BIT_highbit32_171($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (Math_clz32(($2|0))|0);
 $4 = (31 - ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function _ZSTD_generateNxBytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $8;
 $10 = $6;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $4 = -13;
  $18 = $4;
  STACKTOP = sp;return ($18|0);
 } else {
  $12 = $5;
  $13 = $7;
  $14 = $13&255;
  $15 = $14&255;
  $16 = $8;
  _memset(($12|0),($15|0),($16|0))|0;
  $17 = $8;
  $4 = $17;
  $18 = $4;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _ZSTD_decompress_usingDict($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $8;
 $16 = $9;
 $17 = $10;
 $18 = $11;
 $19 = $12;
 $20 = $13;
 $21 = (_ZSTD_decompressMultiFrame($14,$15,$16,$17,$18,$19,$20,0)|0);
 STACKTOP = sp;return ($21|0);
}
function _ZSTD_decompressMultiFrame($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $12 = sp + 48|0;
 $13 = sp + 44|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 HEAP32[$12>>2] = $3;
 HEAP32[$13>>2] = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $25 = $10;
 $17 = $25;
 $26 = $16;
 $27 = ($26|0)!=(0|0);
 do {
  if ($27) {
   $28 = $14;
   $29 = ($28|0)!=(0|0);
   if (!($29)) {
    $30 = $16;
    $31 = (_ZSTD_DDictDictContent($30)|0);
    $14 = $31;
    $32 = $16;
    $33 = (_ZSTD_DDictDictSize($32)|0);
    $15 = $33;
    break;
   }
   $8 = -1;
   $130 = $8;
   STACKTOP = sp;return ($130|0);
  }
 } while(0);
 while(1) {
  $34 = HEAP32[$13>>2]|0;
  $35 = ($34>>>0)>=(5);
  if (!($35)) {
   label = 28;
   break;
  }
  $36 = HEAP32[$12>>2]|0;
  $37 = HEAP32[$13>>2]|0;
  $38 = (_ZSTD_isLegacy($36,$37)|0);
  $39 = ($38|0)!=(0);
  $40 = HEAP32[$12>>2]|0;
  if ($39) {
   $41 = HEAP32[$13>>2]|0;
   $42 = (_ZSTD_findFrameCompressedSizeLegacy($40,$41)|0);
   $20 = $42;
   $43 = $20;
   $44 = (_ERR_isError_156($43)|0);
   $45 = ($44|0)!=(0);
   if ($45) {
    label = 8;
    break;
   }
   $47 = $9;
   $48 = ((($47)) + 23776|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ($49|0)!=(0);
   if ($50) {
    label = 10;
    break;
   }
   $51 = $10;
   $52 = $11;
   $53 = HEAP32[$12>>2]|0;
   $54 = $20;
   $55 = $14;
   $56 = $15;
   $57 = (_ZSTD_decompressLegacy($51,$52,$53,$54,$55,$56)|0);
   $19 = $57;
   $58 = $10;
   $59 = $19;
   $60 = (($58) + ($59)|0);
   $10 = $60;
   $61 = $19;
   $62 = $11;
   $63 = (($62) - ($61))|0;
   $11 = $63;
   $64 = HEAP32[$12>>2]|0;
   $65 = $20;
   $66 = (($64) + ($65)|0);
   HEAP32[$12>>2] = $66;
   $67 = $20;
   $68 = HEAP32[$13>>2]|0;
   $69 = (($68) - ($67))|0;
   HEAP32[$13>>2] = $69;
   continue;
  }
  $70 = (_MEM_readLE32_146($40)|0);
  $18 = $70;
  $71 = $18;
  $72 = ($71|0)!=(-47205080);
  if ($72) {
   $73 = $18;
   $74 = $73 & -16;
   $75 = ($74|0)==(407710288);
   if (!($75)) {
    label = 19;
    break;
   }
   $76 = HEAP32[$13>>2]|0;
   $77 = ($76>>>0)<(8);
   if ($77) {
    label = 15;
    break;
   }
   $78 = HEAP32[$12>>2]|0;
   $79 = ((($78)) + 4|0);
   $80 = (_MEM_readLE32_146($79)|0);
   $81 = (($80) + 8)|0;
   $21 = $81;
   $82 = HEAP32[$13>>2]|0;
   $83 = $21;
   $84 = ($82>>>0)<($83>>>0);
   if ($84) {
    label = 17;
    break;
   }
   $85 = HEAP32[$12>>2]|0;
   $86 = $21;
   $87 = (($85) + ($86)|0);
   HEAP32[$12>>2] = $87;
   $88 = $21;
   $89 = HEAP32[$13>>2]|0;
   $90 = (($89) - ($88))|0;
   HEAP32[$13>>2] = $90;
   continue;
  }
  $91 = $16;
  $92 = ($91|0)!=(0|0);
  $93 = $9;
  if ($92) {
   $94 = $16;
   $95 = (_ZSTD_decompressBegin_usingDDict($93,$94)|0);
   $22 = $95;
   $96 = $22;
   $97 = (_ERR_isError_156($96)|0);
   $98 = ($97|0)!=(0);
   if ($98) {
    label = 22;
    break;
   }
  } else {
   $100 = $14;
   $101 = $15;
   $102 = (_ZSTD_decompressBegin_usingDict($93,$100,$101)|0);
   $23 = $102;
   $103 = $23;
   $104 = (_ERR_isError_156($103)|0);
   $105 = ($104|0)!=(0);
   if ($105) {
    label = 24;
    break;
   }
  }
  $107 = $9;
  $108 = $10;
  _ZSTD_checkContinuity($107,$108);
  $109 = $9;
  $110 = $10;
  $111 = $11;
  $112 = (_ZSTD_decompressFrame($109,$110,$111,$12,$13)|0);
  $24 = $112;
  $113 = $24;
  $114 = (_ERR_isError_156($113)|0);
  $115 = ($114|0)!=(0);
  if ($115) {
   label = 26;
   break;
  }
  $117 = $10;
  $118 = $24;
  $119 = (($117) + ($118)|0);
  $10 = $119;
  $120 = $24;
  $121 = $11;
  $122 = (($121) - ($120))|0;
  $11 = $122;
 }
 if ((label|0) == 8) {
  $46 = $20;
  $8 = $46;
  $130 = $8;
  STACKTOP = sp;return ($130|0);
 }
 else if ((label|0) == 10) {
  $8 = -11;
  $130 = $8;
  STACKTOP = sp;return ($130|0);
 }
 else if ((label|0) == 15) {
  $8 = -14;
  $130 = $8;
  STACKTOP = sp;return ($130|0);
 }
 else if ((label|0) == 17) {
  $8 = -14;
  $130 = $8;
  STACKTOP = sp;return ($130|0);
 }
 else if ((label|0) == 19) {
  $8 = -2;
  $130 = $8;
  STACKTOP = sp;return ($130|0);
 }
 else if ((label|0) == 22) {
  $99 = $22;
  $8 = $99;
  $130 = $8;
  STACKTOP = sp;return ($130|0);
 }
 else if ((label|0) == 24) {
  $106 = $23;
  $8 = $106;
  $130 = $8;
  STACKTOP = sp;return ($130|0);
 }
 else if ((label|0) == 26) {
  $116 = $24;
  $8 = $116;
  $130 = $8;
  STACKTOP = sp;return ($130|0);
 }
 else if ((label|0) == 28) {
  $123 = HEAP32[$13>>2]|0;
  $124 = ($123|0)!=(0);
  if ($124) {
   $8 = -14;
   $130 = $8;
   STACKTOP = sp;return ($130|0);
  } else {
   $125 = $10;
   $126 = $17;
   $127 = $125;
   $128 = $126;
   $129 = (($127) - ($128))|0;
   $8 = $129;
   $130 = $8;
   STACKTOP = sp;return ($130|0);
  }
 }
 return (0)|0;
}
function _ZSTD_DDictDictContent($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _ZSTD_DDictDictSize($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _ZSTD_decompressLegacy($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $20 = $9;
 $21 = $10;
 $22 = (_ZSTD_isLegacy($20,$21)|0);
 $13 = $22;
 $23 = $13;
 L1: do {
  switch ($23|0) {
  case 4:  {
   $24 = $7;
   $25 = $8;
   $26 = $9;
   $27 = $10;
   $28 = (_ZSTDv04_decompress($24,$25,$26,$27)|0);
   $6 = $28;
   break;
  }
  case 5:  {
   $29 = (_ZSTDv05_createDCtx()|0);
   $15 = $29;
   $30 = $15;
   $31 = ($30|0)==(0|0);
   if ($31) {
    $6 = -11;
    break L1;
   } else {
    $32 = $15;
    $33 = $7;
    $34 = $8;
    $35 = $9;
    $36 = $10;
    $37 = $11;
    $38 = $12;
    $39 = (_ZSTDv05_decompress_usingDict($32,$33,$34,$35,$36,$37,$38)|0);
    $14 = $39;
    $40 = $15;
    (_ZSTDv05_freeDCtx($40)|0);
    $41 = $14;
    $6 = $41;
    break L1;
   }
   break;
  }
  case 6:  {
   $42 = (_ZSTDv06_createDCtx()|0);
   $17 = $42;
   $43 = $17;
   $44 = ($43|0)==(0|0);
   if ($44) {
    $6 = -11;
    break L1;
   } else {
    $45 = $17;
    $46 = $7;
    $47 = $8;
    $48 = $9;
    $49 = $10;
    $50 = $11;
    $51 = $12;
    $52 = (_ZSTDv06_decompress_usingDict($45,$46,$47,$48,$49,$50,$51)|0);
    $16 = $52;
    $53 = $17;
    (_ZSTDv06_freeDCtx($53)|0);
    $54 = $16;
    $6 = $54;
    break L1;
   }
   break;
  }
  case 7:  {
   $55 = (_ZSTDv07_createDCtx()|0);
   $19 = $55;
   $56 = $19;
   $57 = ($56|0)==(0|0);
   if ($57) {
    $6 = -11;
    break L1;
   } else {
    $58 = $19;
    $59 = $7;
    $60 = $8;
    $61 = $9;
    $62 = $10;
    $63 = $11;
    $64 = $12;
    $65 = (_ZSTDv07_decompress_usingDict($58,$59,$60,$61,$62,$63,$64)|0);
    $18 = $65;
    $66 = $19;
    (_ZSTDv07_freeDCtx($66)|0);
    $67 = $18;
    $6 = $67;
    break L1;
   }
   break;
  }
  default: {
   $6 = -2;
  }
  }
 } while(0);
 $68 = $6;
 STACKTOP = sp;return ($68|0);
}
function _ZSTD_decompressBegin_usingDDict($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = (_ZSTD_decompressBegin($6)|0);
 $5 = $7;
 $8 = $5;
 $9 = (_ERR_isError_156($8)|0);
 $10 = ($9|0)!=(0);
 if ($10) {
  $11 = $5;
  $2 = $11;
  $96 = $2;
  STACKTOP = sp;return ($96|0);
 }
 $12 = $4;
 $13 = ($12|0)!=(0|0);
 do {
  if ($13) {
   $14 = $4;
   $15 = ((($14)) + 23592|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $3;
   $18 = ((($17)) + 23748|0);
   HEAP32[$18>>2] = $16;
   $19 = $4;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $3;
   $23 = ((($22)) + 23600|0);
   HEAP32[$23>>2] = $21;
   $24 = $4;
   $25 = ((($24)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $3;
   $28 = ((($27)) + 23604|0);
   HEAP32[$28>>2] = $26;
   $29 = $4;
   $30 = ((($29)) + 4|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = $4;
   $33 = ((($32)) + 8|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (($31) + ($34)|0);
   $36 = $3;
   $37 = ((($36)) + 23608|0);
   HEAP32[$37>>2] = $35;
   $38 = $3;
   $39 = ((($38)) + 23608|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $3;
   $42 = ((($41)) + 23596|0);
   HEAP32[$42>>2] = $40;
   $43 = $4;
   $44 = ((($43)) + 23596|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ($45|0)!=(0);
   $47 = $3;
   $48 = ((($47)) + 23648|0);
   if ($46) {
    HEAP32[$48>>2] = 1;
    $49 = $3;
    $50 = ((($49)) + 23652|0);
    HEAP32[$50>>2] = 1;
    $51 = $4;
    $52 = ((($51)) + 12|0);
    $53 = $3;
    HEAP32[$53>>2] = $52;
    $54 = $4;
    $55 = ((($54)) + 12|0);
    $56 = ((($55)) + 3080|0);
    $57 = $3;
    $58 = ((($57)) + 4|0);
    HEAP32[$58>>2] = $56;
    $59 = $4;
    $60 = ((($59)) + 12|0);
    $61 = ((($60)) + 2052|0);
    $62 = $3;
    $63 = ((($62)) + 8|0);
    HEAP32[$63>>2] = $61;
    $64 = $4;
    $65 = ((($64)) + 12|0);
    $66 = ((($65)) + 5132|0);
    $67 = $3;
    $68 = ((($67)) + 12|0);
    HEAP32[$68>>2] = $66;
    $69 = $4;
    $70 = ((($69)) + 12|0);
    $71 = ((($70)) + 23568|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = $3;
    $74 = ((($73)) + 16|0);
    $75 = ((($74)) + 23568|0);
    HEAP32[$75>>2] = $72;
    $76 = $4;
    $77 = ((($76)) + 12|0);
    $78 = ((($77)) + 23568|0);
    $79 = ((($78)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $3;
    $82 = ((($81)) + 16|0);
    $83 = ((($82)) + 23568|0);
    $84 = ((($83)) + 4|0);
    HEAP32[$84>>2] = $80;
    $85 = $4;
    $86 = ((($85)) + 12|0);
    $87 = ((($86)) + 23568|0);
    $88 = ((($87)) + 8|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = $3;
    $91 = ((($90)) + 16|0);
    $92 = ((($91)) + 23568|0);
    $93 = ((($92)) + 8|0);
    HEAP32[$93>>2] = $89;
    break;
   } else {
    HEAP32[$48>>2] = 0;
    $94 = $3;
    $95 = ((($94)) + 23652|0);
    HEAP32[$95>>2] = 0;
    break;
   }
  }
 } while(0);
 $2 = 0;
 $96 = $2;
 STACKTOP = sp;return ($96|0);
}
function _ZSTD_decompressBegin_usingDict($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = (_ZSTD_decompressBegin($9)|0);
 $7 = $10;
 $11 = $7;
 $12 = (_ERR_isError_156($11)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $7;
  $3 = $14;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 $15 = $5;
 $16 = ($15|0)!=(0|0);
 $17 = $6;
 $18 = ($17|0)!=(0);
 $or$cond = $16 & $18;
 if ($or$cond) {
  $19 = $4;
  $20 = $5;
  $21 = $6;
  $22 = (_ZSTD_decompress_insertDictionary($19,$20,$21)|0);
  $8 = $22;
  $23 = $8;
  $24 = (_ERR_isError_156($23)|0);
  $25 = ($24|0)!=(0);
  if ($25) {
   $3 = -20;
   $26 = $3;
   STACKTOP = sp;return ($26|0);
  }
 }
 $3 = 0;
 $26 = $3;
 STACKTOP = sp;return ($26|0);
}
function _ZSTD_decompressFrame($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $19 = sp + 12|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $23 = $9;
 $24 = HEAP32[$23>>2]|0;
 $11 = $24;
 $25 = $7;
 $12 = $25;
 $26 = $12;
 $27 = $8;
 $28 = (($26) + ($27)|0);
 $13 = $28;
 $29 = $12;
 $14 = $29;
 $30 = $10;
 $31 = HEAP32[$30>>2]|0;
 $15 = $31;
 $32 = $15;
 $33 = ($32>>>0)<(9);
 if ($33) {
  $5 = -14;
  $157 = $5;
  STACKTOP = sp;return ($157|0);
 }
 $34 = $11;
 $35 = (_ZSTD_frameHeaderSize($34,5)|0);
 $16 = $35;
 $36 = $16;
 $37 = (_ERR_isError_156($36)|0);
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $16;
  $5 = $39;
  $157 = $5;
  STACKTOP = sp;return ($157|0);
 }
 $40 = $15;
 $41 = $16;
 $42 = (($41) + 3)|0;
 $43 = ($40>>>0)<($42>>>0);
 if ($43) {
  $5 = -14;
  $157 = $5;
  STACKTOP = sp;return ($157|0);
 }
 $44 = $6;
 $45 = $11;
 $46 = $16;
 $47 = (_ZSTD_decodeFrameHeader($44,$45,$46)|0);
 $17 = $47;
 $48 = $17;
 $49 = (_ERR_isError_156($48)|0);
 $50 = ($49|0)!=(0);
 if ($50) {
  $51 = $17;
  $5 = $51;
  $157 = $5;
  STACKTOP = sp;return ($157|0);
 }
 $52 = $16;
 $53 = $11;
 $54 = (($53) + ($52)|0);
 $11 = $54;
 $55 = $16;
 $56 = $15;
 $57 = (($56) - ($55))|0;
 $15 = $57;
 L17: while(1) {
  $58 = $11;
  $59 = $15;
  $60 = (_ZSTD_getcBlockSize($58,$59,$19)|0);
  $20 = $60;
  $61 = $20;
  $62 = (_ERR_isError_156($61)|0);
  $63 = ($62|0)!=(0);
  if ($63) {
   label = 11;
   break;
  }
  $65 = $11;
  $66 = ((($65)) + 3|0);
  $11 = $66;
  $67 = $15;
  $68 = (($67) - 3)|0;
  $15 = $68;
  $69 = $20;
  $70 = $15;
  $71 = ($69>>>0)>($70>>>0);
  if ($71) {
   label = 13;
   break;
  }
  $72 = HEAP32[$19>>2]|0;
  switch ($72|0) {
  case 2:  {
   $73 = $6;
   $74 = $14;
   $75 = $13;
   $76 = $14;
   $77 = $75;
   $78 = $76;
   $79 = (($77) - ($78))|0;
   $80 = $11;
   $81 = $20;
   $82 = (_ZSTD_decompressBlock_internal($73,$74,$79,$80,$81)|0);
   $18 = $82;
   break;
  }
  case 0:  {
   $83 = $14;
   $84 = $13;
   $85 = $14;
   $86 = $84;
   $87 = $85;
   $88 = (($86) - ($87))|0;
   $89 = $11;
   $90 = $20;
   $91 = (_ZSTD_copyRawBlock($83,$88,$89,$90)|0);
   $18 = $91;
   break;
  }
  case 1:  {
   $92 = $14;
   $93 = $13;
   $94 = $14;
   $95 = $93;
   $96 = $94;
   $97 = (($95) - ($96))|0;
   $98 = $11;
   $99 = HEAP8[$98>>0]|0;
   $100 = ((($19)) + 8|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (_ZSTD_generateNxBytes($92,$97,$99,$101)|0);
   $18 = $102;
   break;
  }
  default: {
   label = 18;
   break L17;
  }
  }
  $103 = $18;
  $104 = (_ERR_isError_156($103)|0);
  $105 = ($104|0)!=(0);
  if ($105) {
   label = 20;
   break;
  }
  $107 = $6;
  $108 = ((($107)) + 23616|0);
  $109 = ((($108)) + 16|0);
  $110 = HEAP32[$109>>2]|0;
  $111 = ($110|0)!=(0);
  if ($111) {
   $112 = $6;
   $113 = ((($112)) + 23656|0);
   $114 = $14;
   $115 = $18;
   (_ZSTD_XXH64_update($113,$114,$115)|0);
  }
  $116 = $18;
  $117 = $14;
  $118 = (($117) + ($116)|0);
  $14 = $118;
  $119 = $20;
  $120 = $11;
  $121 = (($120) + ($119)|0);
  $11 = $121;
  $122 = $20;
  $123 = $15;
  $124 = (($123) - ($122))|0;
  $15 = $124;
  $125 = ((($19)) + 4|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ($126|0)!=(0);
  if ($127) {
   label = 24;
   break;
  }
 }
 if ((label|0) == 11) {
  $64 = $20;
  $5 = $64;
  $157 = $5;
  STACKTOP = sp;return ($157|0);
 }
 else if ((label|0) == 13) {
  $5 = -14;
  $157 = $5;
  STACKTOP = sp;return ($157|0);
 }
 else if ((label|0) == 18) {
  $5 = -15;
  $157 = $5;
  STACKTOP = sp;return ($157|0);
 }
 else if ((label|0) == 20) {
  $106 = $18;
  $5 = $106;
  $157 = $5;
  STACKTOP = sp;return ($157|0);
 }
 else if ((label|0) == 24) {
  $128 = $6;
  $129 = ((($128)) + 23616|0);
  $130 = ((($129)) + 16|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($131|0)!=(0);
  do {
   if ($132) {
    $133 = $6;
    $134 = ((($133)) + 23656|0);
    $135 = (_ZSTD_XXH64_digest($134)|0);
    $136 = tempRet0;
    $21 = $135;
    $137 = $15;
    $138 = ($137>>>0)<(4);
    if ($138) {
     $5 = -16;
     $157 = $5;
     STACKTOP = sp;return ($157|0);
    }
    $139 = $11;
    $140 = (_MEM_readLE32_146($139)|0);
    $22 = $140;
    $141 = $22;
    $142 = $21;
    $143 = ($141|0)!=($142|0);
    if (!($143)) {
     $144 = $11;
     $145 = ((($144)) + 4|0);
     $11 = $145;
     $146 = $15;
     $147 = (($146) - 4)|0;
     $15 = $147;
     break;
    }
    $5 = -16;
    $157 = $5;
    STACKTOP = sp;return ($157|0);
   }
  } while(0);
  $148 = $11;
  $149 = $9;
  HEAP32[$149>>2] = $148;
  $150 = $15;
  $151 = $10;
  HEAP32[$151>>2] = $150;
  $152 = $14;
  $153 = $12;
  $154 = $152;
  $155 = $153;
  $156 = (($154) - ($155))|0;
  $5 = $156;
  $157 = $5;
  STACKTOP = sp;return ($157|0);
 }
 return (0)|0;
}
function _ZSTD_decodeFrameHeader($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 23616|0);
 $10 = $5;
 $11 = $6;
 $12 = (_ZSTD_getFrameHeader($9,$10,$11)|0);
 $7 = $12;
 $13 = $7;
 $14 = (_ERR_isError_156($13)|0);
 $15 = ($14|0)!=(0);
 $16 = $7;
 if ($15) {
  $3 = $16;
  $38 = $3;
  STACKTOP = sp;return ($38|0);
 }
 $17 = ($16>>>0)>(0);
 if ($17) {
  $3 = -14;
  $38 = $3;
  STACKTOP = sp;return ($38|0);
 }
 $18 = $4;
 $19 = ((($18)) + 23616|0);
 $20 = ((($19)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $4;
  $24 = ((($23)) + 23748|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $4;
  $27 = ((($26)) + 23616|0);
  $28 = ((($27)) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($25|0)!=($29|0);
  if ($30) {
   $3 = -21;
   $38 = $3;
   STACKTOP = sp;return ($38|0);
  }
 }
 $31 = $4;
 $32 = ((($31)) + 23616|0);
 $33 = ((($32)) + 16|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $4;
  $37 = ((($36)) + 23656|0);
  (_ZSTD_XXH64_reset($37,0,0)|0);
 }
 $3 = 0;
 $38 = $3;
 STACKTOP = sp;return ($38|0);
}
function _ZSTD_copyRawBlock($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $8;
 $10 = $6;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $4 = -13;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 } else {
  $12 = $5;
  $13 = $7;
  $14 = $8;
  _memcpy(($12|0),($13|0),($14|0))|0;
  $15 = $8;
  $4 = $15;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _ZSTD_decompress_insertDictionary($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9>>>0)<(8);
 if ($10) {
  $11 = $4;
  $12 = $5;
  $13 = $6;
  $14 = (_ZSTD_refDictContent($11,$12,$13)|0);
  $3 = $14;
  $50 = $3;
  STACKTOP = sp;return ($50|0);
 }
 $15 = $5;
 $16 = (_MEM_readLE32_146($15)|0);
 $7 = $16;
 $17 = $7;
 $18 = ($17|0)!=(-332356553);
 if ($18) {
  $19 = $4;
  $20 = $5;
  $21 = $6;
  $22 = (_ZSTD_refDictContent($19,$20,$21)|0);
  $3 = $22;
  $50 = $3;
  STACKTOP = sp;return ($50|0);
 }
 $23 = $5;
 $24 = ((($23)) + 4|0);
 $25 = (_MEM_readLE32_146($24)|0);
 $26 = $4;
 $27 = ((($26)) + 23748|0);
 HEAP32[$27>>2] = $25;
 $28 = $4;
 $29 = ((($28)) + 16|0);
 $30 = $5;
 $31 = $6;
 $32 = (_ZSTD_loadEntropy($29,$30,$31)|0);
 $8 = $32;
 $33 = $8;
 $34 = (_ERR_isError_156($33)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  $3 = -20;
  $50 = $3;
  STACKTOP = sp;return ($50|0);
 } else {
  $36 = $5;
  $37 = $8;
  $38 = (($36) + ($37)|0);
  $5 = $38;
  $39 = $8;
  $40 = $6;
  $41 = (($40) - ($39))|0;
  $6 = $41;
  $42 = $4;
  $43 = ((($42)) + 23652|0);
  HEAP32[$43>>2] = 1;
  $44 = $4;
  $45 = ((($44)) + 23648|0);
  HEAP32[$45>>2] = 1;
  $46 = $4;
  $47 = $5;
  $48 = $6;
  $49 = (_ZSTD_refDictContent($46,$47,$48)|0);
  $3 = $49;
  $50 = $3;
  STACKTOP = sp;return ($50|0);
 }
 return (0)|0;
}
function _ZSTD_refDictContent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 23596|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ((($9)) + 23608|0);
 HEAP32[$10>>2] = $8;
 $11 = $4;
 $12 = $3;
 $13 = ((($12)) + 23596|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 23600|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (0 - ($20))|0;
 $22 = (($11) + ($21)|0);
 $23 = $3;
 $24 = ((($23)) + 23604|0);
 HEAP32[$24>>2] = $22;
 $25 = $4;
 $26 = $3;
 $27 = ((($26)) + 23600|0);
 HEAP32[$27>>2] = $25;
 $28 = $4;
 $29 = $5;
 $30 = (($28) + ($29)|0);
 $31 = $3;
 $32 = ((($31)) + 23596|0);
 HEAP32[$32>>2] = $30;
 STACKTOP = sp;return 0;
}
function _ZSTD_loadEntropy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $10 = sp + 266|0;
 $11 = sp + 56|0;
 $12 = sp + 52|0;
 $15 = sp + 160|0;
 $16 = sp + 40|0;
 $17 = sp + 36|0;
 $20 = sp + 88|0;
 $21 = sp + 24|0;
 $22 = sp + 20|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $28 = $5;
 $7 = $28;
 $29 = $7;
 $30 = $6;
 $31 = (($29) + ($30)|0);
 $8 = $31;
 $32 = $6;
 $33 = ($32>>>0)<=(8);
 if ($33) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $34 = $7;
 $35 = ((($34)) + 8|0);
 $7 = $35;
 $36 = $4;
 $37 = ((($36)) + 5132|0);
 $38 = $7;
 $39 = $8;
 $40 = $7;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = $4;
 $45 = ((($44)) + 21520|0);
 $46 = (_HUF_readDTableX4_wksp($37,$38,$43,$45,2048)|0);
 $9 = $46;
 $47 = $9;
 $48 = (_ERR_isError_156($47)|0);
 $49 = ($48|0)!=(0);
 if ($49) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $50 = $9;
 $51 = $7;
 $52 = (($51) + ($50)|0);
 $7 = $52;
 HEAP32[$11>>2] = 28;
 $53 = $7;
 $54 = $8;
 $55 = $7;
 $56 = $54;
 $57 = $55;
 $58 = (($56) - ($57))|0;
 $59 = (_FSE_readNCount($10,$11,$12,$53,$58)|0);
 $13 = $59;
 $60 = $13;
 $61 = (_ERR_isError_156($60)|0);
 $62 = ($61|0)!=(0);
 if ($62) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $63 = HEAP32[$12>>2]|0;
 $64 = ($63>>>0)>(8);
 if ($64) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $65 = $4;
 $66 = ((($65)) + 2052|0);
 $67 = HEAP32[$11>>2]|0;
 $68 = HEAP32[$12>>2]|0;
 $69 = (_FSE_buildDTable($66,$10,$67,$68)|0);
 $14 = $69;
 $70 = $14;
 $71 = (_ERR_isError_156($70)|0);
 $72 = ($71|0)!=(0);
 if ($72) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $73 = $13;
 $74 = $7;
 $75 = (($74) + ($73)|0);
 $7 = $75;
 HEAP32[$16>>2] = 52;
 $76 = $7;
 $77 = $8;
 $78 = $7;
 $79 = $77;
 $80 = $78;
 $81 = (($79) - ($80))|0;
 $82 = (_FSE_readNCount($15,$16,$17,$76,$81)|0);
 $18 = $82;
 $83 = $18;
 $84 = (_ERR_isError_156($83)|0);
 $85 = ($84|0)!=(0);
 if ($85) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $86 = HEAP32[$17>>2]|0;
 $87 = ($86>>>0)>(9);
 if ($87) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $88 = $4;
 $89 = ((($88)) + 3080|0);
 $90 = HEAP32[$16>>2]|0;
 $91 = HEAP32[$17>>2]|0;
 $92 = (_FSE_buildDTable($89,$15,$90,$91)|0);
 $19 = $92;
 $93 = $19;
 $94 = (_ERR_isError_156($93)|0);
 $95 = ($94|0)!=(0);
 if ($95) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $96 = $18;
 $97 = $7;
 $98 = (($97) + ($96)|0);
 $7 = $98;
 HEAP32[$21>>2] = 35;
 $99 = $7;
 $100 = $8;
 $101 = $7;
 $102 = $100;
 $103 = $101;
 $104 = (($102) - ($103))|0;
 $105 = (_FSE_readNCount($20,$21,$22,$99,$104)|0);
 $23 = $105;
 $106 = $23;
 $107 = (_ERR_isError_156($106)|0);
 $108 = ($107|0)!=(0);
 if ($108) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $109 = HEAP32[$22>>2]|0;
 $110 = ($109>>>0)>(9);
 if ($110) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $111 = $4;
 $112 = HEAP32[$21>>2]|0;
 $113 = HEAP32[$22>>2]|0;
 $114 = (_FSE_buildDTable($111,$20,$112,$113)|0);
 $24 = $114;
 $115 = $24;
 $116 = (_ERR_isError_156($115)|0);
 $117 = ($116|0)!=(0);
 if ($117) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $118 = $23;
 $119 = $7;
 $120 = (($119) + ($118)|0);
 $7 = $120;
 $121 = $7;
 $122 = ((($121)) + 12|0);
 $123 = $8;
 $124 = ($122>>>0)>($123>>>0);
 if ($124) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 $125 = $8;
 $126 = $7;
 $127 = ((($126)) + 12|0);
 $128 = $125;
 $129 = $127;
 $130 = (($128) - ($129))|0;
 $26 = $130;
 $25 = 0;
 while(1) {
  $131 = $25;
  $132 = ($131|0)<(3);
  $133 = $7;
  if (!($132)) {
   label = 31;
   break;
  }
  $134 = (_MEM_readLE32_146($133)|0);
  $27 = $134;
  $135 = $7;
  $136 = ((($135)) + 4|0);
  $7 = $136;
  $137 = $27;
  $138 = ($137|0)==(0);
  if ($138) {
   label = 29;
   break;
  }
  $139 = $27;
  $140 = $26;
  $141 = ($139>>>0)>=($140>>>0);
  if ($141) {
   label = 29;
   break;
  }
  $142 = $27;
  $143 = $4;
  $144 = ((($143)) + 23568|0);
  $145 = $25;
  $146 = (($144) + ($145<<2)|0);
  HEAP32[$146>>2] = $142;
  $147 = $25;
  $148 = (($147) + 1)|0;
  $25 = $148;
 }
 if ((label|0) == 29) {
  $3 = -20;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 else if ((label|0) == 31) {
  $149 = $5;
  $150 = $133;
  $151 = $149;
  $152 = (($150) - ($151))|0;
  $3 = $152;
  $153 = $3;
  STACKTOP = sp;return ($153|0);
 }
 return (0)|0;
}
function _ZSTD_decompressDCtx($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = $9;
 $15 = (_ZSTD_decompress_usingDict($10,$11,$12,$13,$14,0,0)|0);
 STACKTOP = sp;return ($15|0);
}
function _ZSTD_decompress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = (_ZSTD_createDCtx()|0);
 $10 = $11;
 $12 = $10;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $4 = -11;
  $22 = $4;
  STACKTOP = sp;return ($22|0);
 } else {
  $14 = $10;
  $15 = $5;
  $16 = $6;
  $17 = $7;
  $18 = $8;
  $19 = (_ZSTD_decompressDCtx($14,$15,$16,$17,$18)|0);
  $9 = $19;
  $20 = $10;
  (_ZSTD_freeDCtx($20)|0);
  $21 = $9;
  $4 = $21;
  $22 = $4;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _ERR_isError_261($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2>>>0)>(4294967271);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _ZSTDv04_decompressDCtx($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = $9;
 $15 = (_ZSTD_decompress_usingDict_264($10,$11,$12,$13,$14,0,0)|0);
 STACKTOP = sp;return ($15|0);
}
function _ZSTD_decompress_usingDict_264($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $21 = sp + 16|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $25 = $11;
 $15 = $25;
 $26 = $15;
 $27 = $12;
 $28 = (($26) + ($27)|0);
 $16 = $28;
 $29 = $9;
 $17 = $29;
 $30 = $17;
 $18 = $30;
 $31 = $17;
 $32 = $10;
 $33 = (($31) + ($32)|0);
 $19 = $33;
 $34 = $12;
 $20 = $34;
 $35 = $8;
 (_ZSTD_resetDCtx($35)|0);
 $36 = $13;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = $8;
  $39 = $13;
  $40 = $14;
  _ZSTD_decompress_insertDictionary_265($38,$39,$40);
  $41 = $8;
  $42 = ((($41)) + 10252|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = $8;
  $45 = ((($44)) + 10264|0);
  HEAP32[$45>>2] = $43;
  $46 = $9;
  $47 = $8;
  $48 = ((($47)) + 10252|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $8;
  $51 = ((($50)) + 10256|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = $49;
  $54 = $52;
  $55 = (($53) - ($54))|0;
  $56 = (0 - ($55))|0;
  $57 = (($46) + ($56)|0);
  $58 = $8;
  $59 = ((($58)) + 10260|0);
  HEAP32[$59>>2] = $57;
  $60 = $9;
  $61 = $8;
  $62 = ((($61)) + 10256|0);
  HEAP32[$62>>2] = $60;
 } else {
  $63 = $9;
  $64 = $8;
  $65 = ((($64)) + 10264|0);
  HEAP32[$65>>2] = $63;
  $66 = $8;
  $67 = ((($66)) + 10256|0);
  HEAP32[$67>>2] = $63;
  $68 = $8;
  $69 = ((($68)) + 10260|0);
  HEAP32[$69>>2] = $63;
 }
 $70 = $12;
 $71 = ($70>>>0)<(8);
 if ($71) {
  $7 = -14;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 $72 = $8;
 $73 = $11;
 $74 = (_ZSTD_decodeFrameHeader_Part1($72,$73,5)|0);
 $22 = $74;
 $75 = $22;
 $76 = (_ZSTD_isError_266($75)|0);
 $77 = ($76|0)!=(0);
 if ($77) {
  $78 = $22;
  $7 = $78;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 $79 = $12;
 $80 = $22;
 $81 = (($80) + 3)|0;
 $82 = ($79>>>0)<($81>>>0);
 if ($82) {
  $7 = -14;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 $83 = $22;
 $84 = $15;
 $85 = (($84) + ($83)|0);
 $15 = $85;
 $86 = $22;
 $87 = $20;
 $88 = (($87) - ($86))|0;
 $20 = $88;
 $89 = $8;
 $90 = $11;
 $91 = $22;
 $92 = (_ZSTD_decodeFrameHeader_Part2($89,$90,$91)|0);
 $22 = $92;
 $93 = $22;
 $94 = (_ZSTD_isError_266($93)|0);
 $95 = ($94|0)!=(0);
 if ($95) {
  $96 = $22;
  $7 = $96;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 L20: while(1) {
  $23 = 0;
  $97 = $15;
  $98 = $16;
  $99 = $15;
  $100 = $98;
  $101 = $99;
  $102 = (($100) - ($101))|0;
  $103 = (_ZSTD_getcBlockSize_267($97,$102,$21)|0);
  $24 = $103;
  $104 = $24;
  $105 = (_ZSTD_isError_266($104)|0);
  $106 = ($105|0)!=(0);
  if ($106) {
   label = 13;
   break;
  }
  $108 = $15;
  $109 = ((($108)) + 3|0);
  $15 = $109;
  $110 = $20;
  $111 = (($110) - 3)|0;
  $20 = $111;
  $112 = $24;
  $113 = $20;
  $114 = ($112>>>0)>($113>>>0);
  if ($114) {
   label = 15;
   break;
  }
  $115 = HEAP32[$21>>2]|0;
  switch ($115|0) {
  case 2:  {
   label = 19;
   break L20;
   break;
  }
  case 0:  {
   $116 = $8;
   $117 = $18;
   $118 = $19;
   $119 = $18;
   $120 = $118;
   $121 = $119;
   $122 = (($120) - ($121))|0;
   $123 = $15;
   $124 = $24;
   $125 = (_ZSTD_decompressBlock_internal_268($116,$117,$122,$123,$124)|0);
   $23 = $125;
   break;
  }
  case 1:  {
   $126 = $18;
   $127 = $19;
   $128 = $18;
   $129 = $127;
   $130 = $128;
   $131 = (($129) - ($130))|0;
   $132 = $15;
   $133 = $24;
   $134 = (_ZSTD_copyRawBlock_269($126,$131,$132,$133)|0);
   $23 = $134;
   break;
  }
  case 3:  {
   $135 = $20;
   $136 = ($135|0)!=(0);
   if ($136) {
    label = 21;
    break L20;
   }
   break;
  }
  default: {
   label = 22;
   break L20;
  }
  }
  $137 = $24;
  $138 = ($137|0)==(0);
  if ($138) {
   label = 27;
   break;
  }
  $139 = $23;
  $140 = (_ZSTD_isError_266($139)|0);
  $141 = ($140|0)!=(0);
  $142 = $23;
  if ($141) {
   label = 25;
   break;
  }
  $143 = $18;
  $144 = (($143) + ($142)|0);
  $18 = $144;
  $145 = $24;
  $146 = $15;
  $147 = (($146) + ($145)|0);
  $15 = $147;
  $148 = $24;
  $149 = $20;
  $150 = (($149) - ($148))|0;
  $20 = $150;
 }
 if ((label|0) == 13) {
  $107 = $24;
  $7 = $107;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 else if ((label|0) == 15) {
  $7 = -14;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 else if ((label|0) == 19) {
  $7 = -1;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 else if ((label|0) == 21) {
  $7 = -14;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 else if ((label|0) == 22) {
  $7 = -1;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 else if ((label|0) == 25) {
  $7 = $142;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 else if ((label|0) == 27) {
  $151 = $18;
  $152 = $17;
  $153 = $151;
  $154 = $152;
  $155 = (($153) - ($154))|0;
  $7 = $155;
  $156 = $7;
  STACKTOP = sp;return ($156|0);
 }
 return (0)|0;
}
function _ZSTD_resetDCtx($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 10268|0);
 HEAP32[$3>>2] = 5;
 $4 = $1;
 $5 = ((($4)) + 10316|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 10252|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 10256|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 10260|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 10264|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return 0;
}
function _ZSTD_decompress_insertDictionary_265($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 10252|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ((($9)) + 10264|0);
 HEAP32[$10>>2] = $8;
 $11 = $4;
 $12 = $3;
 $13 = ((($12)) + 10252|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 10256|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (0 - ($20))|0;
 $22 = (($11) + ($21)|0);
 $23 = $3;
 $24 = ((($23)) + 10260|0);
 HEAP32[$24>>2] = $22;
 $25 = $4;
 $26 = $3;
 $27 = ((($26)) + 10256|0);
 HEAP32[$27>>2] = $25;
 $28 = $4;
 $29 = $5;
 $30 = (($28) + ($29)|0);
 $31 = $3;
 $32 = ((($31)) + 10252|0);
 HEAP32[$32>>2] = $30;
 STACKTOP = sp;return;
}
function _ZSTD_decodeFrameHeader_Part1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8|0)!=(5);
 do {
  if ($9) {
   $3 = -14;
  } else {
   $10 = $5;
   $11 = (_MEM_readLE32_289($10)|0);
   $7 = $11;
   $12 = $7;
   $13 = ($12|0)!=(-47205084);
   if ($13) {
    $3 = -2;
    break;
   } else {
    $14 = $4;
    $15 = ((($14)) + 10272|0);
    HEAP32[$15>>2] = 5;
    $16 = $4;
    $17 = ((($16)) + 10272|0);
    $18 = HEAP32[$17>>2]|0;
    $3 = $18;
    break;
   }
  }
 } while(0);
 $19 = $3;
 STACKTOP = sp;return ($19|0);
}
function _ZSTD_isError_266($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_261($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ZSTD_decodeFrameHeader_Part2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = $4;
 $10 = ((($9)) + 10272|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)!=($11|0);
 if ($12) {
  $3 = -14;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 $13 = $4;
 $14 = ((($13)) + 10280|0);
 $15 = $5;
 $16 = $6;
 $17 = (_ZSTD_getFrameParams($14,$15,$16)|0);
 $7 = $17;
 $18 = (_MEM_32bits_284()|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $4;
  $21 = ((($20)) + 10280|0);
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23>>>0)>(25);
  if ($24) {
   $3 = -6;
   $26 = $3;
   STACKTOP = sp;return ($26|0);
  }
 }
 $25 = $7;
 $3 = $25;
 $26 = $3;
 STACKTOP = sp;return ($26|0);
}
function _ZSTD_getcBlockSize_267($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $7 = $10;
 $11 = $5;
 $12 = ($11>>>0)<(3);
 if ($12) {
  $3 = -14;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 $13 = $7;
 $14 = HEAP8[$13>>0]|0;
 $8 = $14;
 $15 = $7;
 $16 = ((($15)) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $7;
 $20 = ((($19)) + 1|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 8;
 $24 = (($18) + ($23))|0;
 $25 = $7;
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 & 7;
 $29 = $28 << 16;
 $30 = (($24) + ($29))|0;
 $9 = $30;
 $31 = $8;
 $32 = $31&255;
 $33 = $32 >> 6;
 $34 = $6;
 HEAP32[$34>>2] = $33;
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(2);
 $38 = $9;
 $39 = $37 ? $38 : 0;
 $40 = $6;
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = $39;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(3);
 if ($44) {
  $3 = 0;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 $45 = $6;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(2);
 if ($47) {
  $3 = 1;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 } else {
  $48 = $9;
  $3 = $48;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _ZSTD_decompressBlock_internal_268($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $11 = $13;
 $14 = $6;
 $15 = $9;
 $16 = $10;
 $17 = (_ZSTD_decodeLiteralsBlock_270($14,$15,$16)|0);
 $12 = $17;
 $18 = $12;
 $19 = (_ZSTD_isError_266($18)|0);
 $20 = ($19|0)!=(0);
 $21 = $12;
 if ($20) {
  $5 = $21;
  $33 = $5;
  STACKTOP = sp;return ($33|0);
 } else {
  $22 = $11;
  $23 = (($22) + ($21)|0);
  $11 = $23;
  $24 = $12;
  $25 = $10;
  $26 = (($25) - ($24))|0;
  $10 = $26;
  $27 = $6;
  $28 = $7;
  $29 = $8;
  $30 = $11;
  $31 = $10;
  $32 = (_ZSTD_decompressSequences_271($27,$28,$29,$30,$31)|0);
  $5 = $32;
  $33 = $5;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _ZSTD_copyRawBlock_269($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $8;
 $10 = $6;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $4 = -13;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 } else {
  $12 = $5;
  $13 = $7;
  $14 = $8;
  _memcpy(($12|0),($13|0),($14|0))|0;
  $15 = $8;
  $4 = $15;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _ZSTD_decodeLiteralsBlock_270($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 12|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $12 = $5;
 $7 = $12;
 $13 = $6;
 $14 = ($13>>>0)<(11);
 if ($14) {
  $3 = -15;
  $100 = $3;
  STACKTOP = sp;return ($100|0);
 }
 $15 = $7;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = $17 & 3;
 switch ($18|0) {
 case 0:  {
  HEAP32[$8>>2] = 131072;
  $19 = $4;
  $20 = ((($19)) + 10328|0);
  $21 = $5;
  $22 = $6;
  $23 = (_ZSTD_decompressLiterals($20,$8,$21,$22)|0);
  $9 = $23;
  $24 = $4;
  $25 = ((($24)) + 10328|0);
  $26 = $4;
  $27 = ((($26)) + 10320|0);
  HEAP32[$27>>2] = $25;
  $28 = HEAP32[$8>>2]|0;
  $29 = $4;
  $30 = ((($29)) + 10324|0);
  HEAP32[$30>>2] = $28;
  $31 = $4;
  $32 = ((($31)) + 10328|0);
  $33 = $4;
  $34 = ((($33)) + 10324|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = (($32) + ($35)|0);
  ;HEAP8[$36>>0]=0|0;HEAP8[$36+1>>0]=0|0;HEAP8[$36+2>>0]=0|0;HEAP8[$36+3>>0]=0|0;HEAP8[$36+4>>0]=0|0;HEAP8[$36+5>>0]=0|0;HEAP8[$36+6>>0]=0|0;HEAP8[$36+7>>0]=0|0;
  $37 = $9;
  $3 = $37;
  $100 = $3;
  STACKTOP = sp;return ($100|0);
  break;
 }
 case 1:  {
  $38 = $7;
  $39 = (_MEM_readLE32_289($38)|0);
  $40 = $39 & 16777215;
  $41 = $40 >>> 2;
  $10 = $41;
  $42 = $10;
  $43 = $6;
  $44 = (($43) - 11)|0;
  $45 = ($42>>>0)>($44>>>0);
  if (!($45)) {
   $69 = $7;
   $70 = ((($69)) + 3|0);
   $71 = $4;
   $72 = ((($71)) + 10320|0);
   HEAP32[$72>>2] = $70;
   $73 = $10;
   $74 = $4;
   $75 = ((($74)) + 10324|0);
   HEAP32[$75>>2] = $73;
   $76 = $10;
   $77 = (($76) + 3)|0;
   $3 = $77;
   $100 = $3;
   STACKTOP = sp;return ($100|0);
  }
  $46 = $10;
  $47 = $6;
  $48 = (($47) - 3)|0;
  $49 = ($46>>>0)>($48>>>0);
  if ($49) {
   $3 = -15;
   $100 = $3;
   STACKTOP = sp;return ($100|0);
  } else {
   $50 = $4;
   $51 = ((($50)) + 10328|0);
   $52 = $7;
   $53 = $10;
   _memcpy(($51|0),($52|0),($53|0))|0;
   $54 = $4;
   $55 = ((($54)) + 10328|0);
   $56 = $4;
   $57 = ((($56)) + 10320|0);
   HEAP32[$57>>2] = $55;
   $58 = $10;
   $59 = $4;
   $60 = ((($59)) + 10324|0);
   HEAP32[$60>>2] = $58;
   $61 = $4;
   $62 = ((($61)) + 10328|0);
   $63 = $4;
   $64 = ((($63)) + 10324|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (($62) + ($65)|0);
   ;HEAP8[$66>>0]=0|0;HEAP8[$66+1>>0]=0|0;HEAP8[$66+2>>0]=0|0;HEAP8[$66+3>>0]=0|0;HEAP8[$66+4>>0]=0|0;HEAP8[$66+5>>0]=0|0;HEAP8[$66+6>>0]=0|0;HEAP8[$66+7>>0]=0|0;
   $67 = $10;
   $68 = (($67) + 3)|0;
   $3 = $68;
   $100 = $3;
   STACKTOP = sp;return ($100|0);
  }
  break;
 }
 case 2:  {
  $78 = $7;
  $79 = (_MEM_readLE32_289($78)|0);
  $80 = $79 & 16777215;
  $81 = $80 >>> 2;
  $11 = $81;
  $82 = $11;
  $83 = ($82>>>0)>(131072);
  if ($83) {
   $3 = -15;
   $100 = $3;
   STACKTOP = sp;return ($100|0);
  } else {
   $84 = $4;
   $85 = ((($84)) + 10328|0);
   $86 = $7;
   $87 = ((($86)) + 3|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $89&255;
   $91 = $11;
   $92 = (($91) + 8)|0;
   _memset(($85|0),($90|0),($92|0))|0;
   $93 = $4;
   $94 = ((($93)) + 10328|0);
   $95 = $4;
   $96 = ((($95)) + 10320|0);
   HEAP32[$96>>2] = $94;
   $97 = $11;
   $98 = $4;
   $99 = ((($98)) + 10324|0);
   HEAP32[$99>>2] = $97;
   $3 = 4;
   $100 = $3;
   STACKTOP = sp;return ($100|0);
  }
  break;
 }
 default: {
  $3 = -15;
  $100 = $3;
  STACKTOP = sp;return ($100|0);
 }
 }
 return (0)|0;
}
function _ZSTD_decompressSequences_271($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 164|0;
 $17 = sp + 112|0;
 $18 = sp + 108|0;
 $20 = sp + 100|0;
 $21 = sp + 96|0;
 $28 = sp + 60|0;
 $29 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $32 = $9;
 $11 = $32;
 $33 = $11;
 $34 = $10;
 $35 = (($33) + ($34)|0);
 $12 = $35;
 $36 = $7;
 $13 = $36;
 $37 = $13;
 $14 = $37;
 $38 = $13;
 $39 = $8;
 $40 = (($38) + ($39)|0);
 $15 = $40;
 $41 = $6;
 $42 = ((($41)) + 10320|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$18>>2] = $43;
 $44 = HEAP32[$18>>2]|0;
 $45 = $6;
 $46 = ((($45)) + 10324|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($44) + ($47)|0);
 $19 = $48;
 $49 = $6;
 $22 = $49;
 $50 = $6;
 $51 = ((($50)) + 6152|0);
 $23 = $51;
 $52 = $6;
 $53 = ((($52)) + 4100|0);
 $24 = $53;
 $54 = $6;
 $55 = ((($54)) + 10256|0);
 $56 = HEAP32[$55>>2]|0;
 $25 = $56;
 $57 = $6;
 $58 = ((($57)) + 10260|0);
 $59 = HEAP32[$58>>2]|0;
 $26 = $59;
 $60 = $6;
 $61 = ((($60)) + 10264|0);
 $62 = HEAP32[$61>>2]|0;
 $27 = $62;
 $63 = $22;
 $64 = $23;
 $65 = $24;
 $66 = $11;
 $67 = $12;
 $68 = $11;
 $69 = $67;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $72 = (_ZSTD_decodeSeqHeaders_272($20,$21,$17,$63,$64,$65,$66,$71)|0);
 $16 = $72;
 $73 = $16;
 $74 = (_ZSTD_isError_266($73)|0);
 $75 = ($74|0)!=(0);
 $76 = $16;
 if ($75) {
  $5 = $76;
  $152 = $5;
  STACKTOP = sp;return ($152|0);
 }
 $77 = $11;
 $78 = (($77) + ($76)|0);
 $11 = $78;
 ;HEAP32[$28>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;
 $79 = ((($28)) + 4|0);
 HEAP32[$79>>2] = 4;
 $80 = HEAP32[$21>>2]|0;
 $81 = ((($29)) + 44|0);
 HEAP32[$81>>2] = $80;
 $82 = HEAP32[$21>>2]|0;
 $83 = HEAP32[$17>>2]|0;
 $84 = (($82) + ($83)|0);
 $85 = ((($29)) + 48|0);
 HEAP32[$85>>2] = $84;
 $86 = ((($29)) + 40|0);
 HEAP32[$86>>2] = 4;
 $87 = $11;
 $88 = $12;
 $89 = $11;
 $90 = $88;
 $91 = $89;
 $92 = (($90) - ($91))|0;
 $93 = (_BIT_initDStream_273($29,$87,$92)|0);
 $16 = $93;
 $94 = $16;
 $95 = (_ERR_isError_261($94)|0);
 $96 = ($95|0)!=(0);
 if ($96) {
  $5 = -15;
  $152 = $5;
  STACKTOP = sp;return ($152|0);
 }
 $97 = ((($29)) + 16|0);
 $98 = $22;
 _FSE_initDState_274($97,$29,$98);
 $99 = ((($29)) + 24|0);
 $100 = $24;
 _FSE_initDState_274($99,$29,$100);
 $101 = ((($29)) + 32|0);
 $102 = $23;
 _FSE_initDState_274($101,$29,$102);
 while(1) {
  $103 = (_BIT_reloadDStream_275($29)|0);
  $104 = ($103>>>0)<=(2);
  $105 = HEAP32[$20>>2]|0;
  $106 = ($105|0)!=(0);
  $107 = $104 ? $106 : 0;
  if (!($107)) {
   break;
  }
  $108 = HEAP32[$20>>2]|0;
  $109 = (($108) + -1)|0;
  HEAP32[$20>>2] = $109;
  _ZSTD_decodeSequence_276($28,$29);
  $110 = $14;
  $111 = $15;
  $112 = $19;
  $113 = $25;
  $114 = $26;
  $115 = $27;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$28+8>>2]|0;
  $116 = (_ZSTD_execSequence($110,$111,$$byval_copy,$18,$112,$113,$114,$115)|0);
  $30 = $116;
  $117 = $30;
  $118 = (_ZSTD_isError_266($117)|0);
  $119 = ($118|0)!=(0);
  $120 = $30;
  if ($119) {
   label = 8;
   break;
  }
  $121 = $14;
  $122 = (($121) + ($120)|0);
  $14 = $122;
 }
 if ((label|0) == 8) {
  $5 = $120;
  $152 = $5;
  STACKTOP = sp;return ($152|0);
 }
 $123 = (_BIT_endOfDStream_277($29)|0);
 $124 = ($123|0)!=(0);
 if (!($124)) {
  $5 = -15;
  $152 = $5;
  STACKTOP = sp;return ($152|0);
 }
 $125 = $19;
 $126 = HEAP32[$18>>2]|0;
 $127 = $125;
 $128 = $126;
 $129 = (($127) - ($128))|0;
 $31 = $129;
 $130 = HEAP32[$18>>2]|0;
 $131 = $19;
 $132 = ($130>>>0)>($131>>>0);
 if ($132) {
  $5 = -15;
  $152 = $5;
  STACKTOP = sp;return ($152|0);
 }
 $133 = $14;
 $134 = $31;
 $135 = (($133) + ($134)|0);
 $136 = $15;
 $137 = ($135>>>0)>($136>>>0);
 if ($137) {
  $5 = -13;
  $152 = $5;
  STACKTOP = sp;return ($152|0);
 }
 $138 = $14;
 $139 = HEAP32[$18>>2]|0;
 $140 = ($138|0)!=($139|0);
 if ($140) {
  $141 = $14;
  $142 = HEAP32[$18>>2]|0;
  $143 = $31;
  _memcpy(($141|0),($142|0),($143|0))|0;
 }
 $144 = $31;
 $145 = $14;
 $146 = (($145) + ($144)|0);
 $14 = $146;
 $147 = $14;
 $148 = $13;
 $149 = $147;
 $150 = $148;
 $151 = (($149) - ($150))|0;
 $5 = $151;
 $152 = $5;
 STACKTOP = sp;return ($152|0);
}
function _ZSTD_decodeSeqHeaders_272($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $23 = sp + 28|0;
 $24 = sp + 24|0;
 $25 = sp + 20|0;
 $27 = sp + 96|0;
 $29 = sp + 8|0;
 $30 = sp + 4|0;
 $31 = sp;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $32 = $15;
 $17 = $32;
 $33 = $17;
 $18 = $33;
 $34 = $17;
 $35 = $16;
 $36 = (($34) + ($35)|0);
 $19 = $36;
 $37 = $16;
 $38 = ($37>>>0)<(5);
 if ($38) {
  $8 = -14;
  $188 = $8;
  STACKTOP = sp;return ($188|0);
 }
 $39 = $18;
 $40 = (_MEM_readLE16_296($39)|0);
 $41 = $40&65535;
 $42 = $9;
 HEAP32[$42>>2] = $41;
 $43 = $18;
 $44 = ((($43)) + 2|0);
 $18 = $44;
 $45 = $18;
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $47 >> 6;
 $20 = $48;
 $49 = $18;
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 >> 4;
 $53 = $52 & 3;
 $21 = $53;
 $54 = $18;
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 >> 2;
 $58 = $57 & 3;
 $22 = $58;
 $59 = $18;
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = $61 & 2;
 $63 = ($62|0)!=(0);
 $64 = $18;
 if ($63) {
  $65 = ((($64)) + 2|0);
  $66 = HEAP8[$65>>0]|0;
  $67 = $66&255;
  $26 = $67;
  $68 = $18;
  $69 = ((($68)) + 1|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71 << 8;
  $73 = $26;
  $74 = (($73) + ($72))|0;
  $26 = $74;
  $75 = $18;
  $76 = ((($75)) + 3|0);
  $18 = $76;
 } else {
  $77 = ((($64)) + 1|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $26 = $79;
  $80 = $18;
  $81 = HEAP8[$80>>0]|0;
  $82 = $81&255;
  $83 = $82 & 1;
  $84 = $83 << 8;
  $85 = $26;
  $86 = (($85) + ($84))|0;
  $26 = $86;
  $87 = $18;
  $88 = ((($87)) + 2|0);
  $18 = $88;
 }
 $89 = $18;
 $90 = $10;
 HEAP32[$90>>2] = $89;
 $91 = $26;
 $92 = $18;
 $93 = (($92) + ($91)|0);
 $18 = $93;
 $94 = $26;
 $95 = $11;
 HEAP32[$95>>2] = $94;
 $96 = $18;
 $97 = $19;
 $98 = ((($97)) + -3|0);
 $99 = ($96>>>0)>($98>>>0);
 if ($99) {
  $8 = -14;
  $188 = $8;
  STACKTOP = sp;return ($188|0);
 }
 $100 = $20;
 L13: do {
  switch ($100|0) {
  case 2:  {
   HEAP32[$23>>2] = 0;
   $101 = $12;
   $102 = $18;
   $103 = ((($102)) + 1|0);
   $18 = $103;
   $104 = HEAP8[$102>>0]|0;
   (_FSE_buildDTable_rle_297($101,$104)|0);
   break;
  }
  case 1:  {
   HEAP32[$23>>2] = 6;
   $105 = $12;
   (_FSE_buildDTable_raw_298($105,6)|0);
   break;
  }
  default: {
   HEAP32[$29>>2] = 63;
   $106 = $18;
   $107 = $19;
   $108 = $18;
   $109 = $107;
   $110 = $108;
   $111 = (($109) - ($110))|0;
   $112 = (_FSE_readNCount_299($27,$29,$23,$106,$111)|0);
   $28 = $112;
   $113 = $28;
   $114 = (_FSE_isError_300($113)|0);
   $115 = ($114|0)!=(0);
   if ($115) {
    $8 = -1;
    $188 = $8;
    STACKTOP = sp;return ($188|0);
   }
   $116 = HEAP32[$23>>2]|0;
   $117 = ($116>>>0)>(10);
   if (!($117)) {
    $118 = $28;
    $119 = $18;
    $120 = (($119) + ($118)|0);
    $18 = $120;
    $121 = $12;
    $122 = HEAP32[$29>>2]|0;
    $123 = HEAP32[$23>>2]|0;
    (_FSE_buildDTable_301($121,$27,$122,$123)|0);
    break L13;
   }
   $8 = -15;
   $188 = $8;
   STACKTOP = sp;return ($188|0);
  }
  }
 } while(0);
 $124 = $21;
 L26: do {
  switch ($124|0) {
  case 2:  {
   HEAP32[$24>>2] = 0;
   $125 = $18;
   $126 = $19;
   $127 = ((($126)) + -2|0);
   $128 = ($125>>>0)>($127>>>0);
   if (!($128)) {
    $129 = $14;
    $130 = $18;
    $131 = ((($130)) + 1|0);
    $18 = $131;
    $132 = HEAP8[$130>>0]|0;
    $133 = $132&255;
    $134 = $133 & 31;
    $135 = $134&255;
    (_FSE_buildDTable_rle_297($129,$135)|0);
    break L26;
   }
   $8 = -14;
   $188 = $8;
   STACKTOP = sp;return ($188|0);
   break;
  }
  case 1:  {
   HEAP32[$24>>2] = 5;
   $136 = $14;
   (_FSE_buildDTable_raw_298($136,5)|0);
   break;
  }
  default: {
   HEAP32[$30>>2] = 31;
   $137 = $18;
   $138 = $19;
   $139 = $18;
   $140 = $138;
   $141 = $139;
   $142 = (($140) - ($141))|0;
   $143 = (_FSE_readNCount_299($27,$30,$24,$137,$142)|0);
   $28 = $143;
   $144 = $28;
   $145 = (_FSE_isError_300($144)|0);
   $146 = ($145|0)!=(0);
   if ($146) {
    $8 = -1;
    $188 = $8;
    STACKTOP = sp;return ($188|0);
   }
   $147 = HEAP32[$24>>2]|0;
   $148 = ($147>>>0)>(9);
   if (!($148)) {
    $149 = $28;
    $150 = $18;
    $151 = (($150) + ($149)|0);
    $18 = $151;
    $152 = $14;
    $153 = HEAP32[$30>>2]|0;
    $154 = HEAP32[$24>>2]|0;
    (_FSE_buildDTable_301($152,$27,$153,$154)|0);
    break L26;
   }
   $8 = -15;
   $188 = $8;
   STACKTOP = sp;return ($188|0);
  }
  }
 } while(0);
 $155 = $22;
 L43: do {
  switch ($155|0) {
  case 2:  {
   HEAP32[$25>>2] = 0;
   $156 = $18;
   $157 = $19;
   $158 = ((($157)) + -2|0);
   $159 = ($156>>>0)>($158>>>0);
   if (!($159)) {
    $160 = $13;
    $161 = $18;
    $162 = ((($161)) + 1|0);
    $18 = $162;
    $163 = HEAP8[$161>>0]|0;
    (_FSE_buildDTable_rle_297($160,$163)|0);
    break L43;
   }
   $8 = -14;
   $188 = $8;
   STACKTOP = sp;return ($188|0);
   break;
  }
  case 1:  {
   HEAP32[$25>>2] = 7;
   $164 = $13;
   (_FSE_buildDTable_raw_298($164,7)|0);
   break;
  }
  default: {
   HEAP32[$31>>2] = 127;
   $165 = $18;
   $166 = $19;
   $167 = $18;
   $168 = $166;
   $169 = $167;
   $170 = (($168) - ($169))|0;
   $171 = (_FSE_readNCount_299($27,$31,$25,$165,$170)|0);
   $28 = $171;
   $172 = $28;
   $173 = (_FSE_isError_300($172)|0);
   $174 = ($173|0)!=(0);
   if ($174) {
    $8 = -1;
    $188 = $8;
    STACKTOP = sp;return ($188|0);
   }
   $175 = HEAP32[$25>>2]|0;
   $176 = ($175>>>0)>(10);
   if (!($176)) {
    $177 = $28;
    $178 = $18;
    $179 = (($178) + ($177)|0);
    $18 = $179;
    $180 = $13;
    $181 = HEAP32[$31>>2]|0;
    $182 = HEAP32[$25>>2]|0;
    (_FSE_buildDTable_301($180,$27,$181,$182)|0);
    break L43;
   }
   $8 = -15;
   $188 = $8;
   STACKTOP = sp;return ($188|0);
  }
  }
 } while(0);
 $183 = $18;
 $184 = $17;
 $185 = $183;
 $186 = $184;
 $187 = (($185) - ($186))|0;
 $8 = $187;
 $188 = $8;
 STACKTOP = sp;return ($188|0);
}
function _BIT_initDStream_273($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9>>>0)<(1);
 if ($10) {
  $11 = $4;
  ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;
  $3 = -14;
  $134 = $3;
  STACKTOP = sp;return ($134|0);
 }
 $12 = $6;
 $13 = ($12>>>0)>=(4);
 $14 = $5;
 $15 = $4;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = $14;
 do {
  if ($13) {
   $17 = $5;
   $18 = $6;
   $19 = (($17) + ($18)|0);
   $20 = ((($19)) + -4|0);
   $21 = $4;
   $22 = ((($21)) + 8|0);
   HEAP32[$22>>2] = $20;
   $23 = $4;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_MEM_readLEST_288($25)|0);
   $27 = $4;
   HEAP32[$27>>2] = $26;
   $28 = $5;
   $29 = $6;
   $30 = (($29) - 1)|0;
   $31 = (($28) + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $7 = $33;
   $34 = $7;
   $35 = ($34|0)==(0);
   if (!($35)) {
    $36 = $7;
    $37 = (_BIT_highbit32_295($36)|0);
    $38 = (8 - ($37))|0;
    $39 = $4;
    $40 = ((($39)) + 4|0);
    HEAP32[$40>>2] = $38;
    break;
   }
   $3 = -1;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  } else {
   $41 = $4;
   $42 = ((($41)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $4;
   $45 = ((($44)) + 8|0);
   HEAP32[$45>>2] = $43;
   $46 = $4;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = $4;
   HEAP32[$51>>2] = $50;
   $52 = $6;
   switch ($52|0) {
   case 7:  {
    $53 = $4;
    $54 = ((($53)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 6|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = $58 << 16;
    $60 = $4;
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + ($59))|0;
    HEAP32[$60>>2] = $62;
    label = 9;
    break;
   }
   case 6:  {
    label = 9;
    break;
   }
   case 5:  {
    label = 10;
    break;
   }
   case 4:  {
    label = 11;
    break;
   }
   case 3:  {
    label = 12;
    break;
   }
   case 2:  {
    label = 13;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 9) {
    $63 = $4;
    $64 = ((($63)) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ((($65)) + 5|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 << 8;
    $70 = $4;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($69))|0;
    HEAP32[$70>>2] = $72;
    label = 10;
   }
   if ((label|0) == 10) {
    $73 = $4;
    $74 = ((($73)) + 12|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($75)) + 4|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = $78 << 0;
    $80 = $4;
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + ($79))|0;
    HEAP32[$80>>2] = $82;
    label = 11;
   }
   if ((label|0) == 11) {
    $83 = $4;
    $84 = ((($83)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ((($85)) + 3|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&255;
    $89 = $88 << 24;
    $90 = $4;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + ($89))|0;
    HEAP32[$90>>2] = $92;
    label = 12;
   }
   if ((label|0) == 12) {
    $93 = $4;
    $94 = ((($93)) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($95)) + 2|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = $98 << 16;
    $100 = $4;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + ($99))|0;
    HEAP32[$100>>2] = $102;
    label = 13;
   }
   if ((label|0) == 13) {
    $103 = $4;
    $104 = ((($103)) + 12|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($105)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107&255;
    $109 = $108 << 8;
    $110 = $4;
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + ($109))|0;
    HEAP32[$110>>2] = $112;
   }
   $113 = $5;
   $114 = $6;
   $115 = (($114) - 1)|0;
   $116 = (($113) + ($115)|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $8 = $118;
   $119 = $8;
   $120 = ($119|0)==(0);
   if (!($120)) {
    $121 = $8;
    $122 = (_BIT_highbit32_295($121)|0);
    $123 = (8 - ($122))|0;
    $124 = $4;
    $125 = ((($124)) + 4|0);
    HEAP32[$125>>2] = $123;
    $126 = $6;
    $127 = (4 - ($126))|0;
    $128 = $127<<3;
    $129 = $4;
    $130 = ((($129)) + 4|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + ($128))|0;
    HEAP32[$130>>2] = $132;
    break;
   }
   $3 = -1;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  }
 } while(0);
 $133 = $6;
 $3 = $133;
 $134 = $3;
 STACKTOP = sp;return ($134|0);
}
function _FSE_initDState_274($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $6 = sp + 12|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = $5;
 ;HEAP16[$6>>1]=HEAP16[$7>>1]|0;HEAP16[$6+2>>1]=HEAP16[$7+2>>1]|0;
 $8 = $4;
 $9 = HEAP16[$6>>1]|0;
 $10 = $9&65535;
 $11 = (_BIT_readBits_285($8,$10)|0);
 $12 = $3;
 HEAP32[$12>>2] = $11;
 $13 = $4;
 (_BIT_reloadDStream_275($13)|0);
 $14 = $5;
 $15 = ((($14)) + 4|0);
 $16 = $3;
 $17 = ((($16)) + 4|0);
 HEAP32[$17>>2] = $15;
 STACKTOP = sp;return;
}
function _BIT_reloadDStream_275($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(32);
 if ($8) {
  $1 = 3;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ($11>>>0)>=($15>>>0);
 $17 = $2;
 if ($16) {
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 >>> 3;
  $21 = $2;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (0 - ($20))|0;
  $25 = (($23) + ($24)|0);
  HEAP32[$22>>2] = $25;
  $26 = $2;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 7;
  HEAP32[$27>>2] = $29;
  $30 = $2;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_MEM_readLEST_288($32)|0);
  $34 = $2;
  HEAP32[$34>>2] = $33;
  $1 = 0;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $35 = ((($17)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $2;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($36|0)==($39|0);
 $41 = $2;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 if (!($40)) {
  $45 = $43 >>> 3;
  $3 = $45;
  $4 = 0;
  $46 = $2;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $3;
  $50 = (0 - ($49))|0;
  $51 = (($48) + ($50)|0);
  $52 = $2;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($51>>>0)<($54>>>0);
  if ($55) {
   $56 = $2;
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $2;
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $58;
   $63 = $61;
   $64 = (($62) - ($63))|0;
   $3 = $64;
   $4 = 1;
  }
  $65 = $3;
  $66 = $2;
  $67 = ((($66)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (0 - ($65))|0;
  $70 = (($68) + ($69)|0);
  HEAP32[$67>>2] = $70;
  $71 = $3;
  $72 = $71<<3;
  $73 = $2;
  $74 = ((($73)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) - ($72))|0;
  HEAP32[$74>>2] = $76;
  $77 = $2;
  $78 = ((($77)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_MEM_readLEST_288($79)|0);
  $81 = $2;
  HEAP32[$81>>2] = $80;
  $82 = $4;
  $1 = $82;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $44 = ($43>>>0)<(32);
 if ($44) {
  $1 = 1;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 } else {
  $1 = 2;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 return (0)|0;
}
function _ZSTD_decodeSequence_276($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $14 = $3;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $8 = $16;
 $17 = $3;
 $18 = ((($17)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $9 = $19;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = $3;
 $23 = (_FSE_decodeSymbol_283($21,$22)|0);
 $24 = $23&255;
 $4 = $24;
 $25 = $4;
 $26 = ($25|0)!=(0);
 $27 = $3;
 $28 = ((($27)) + 40|0);
 $29 = $2;
 $30 = ((($29)) + 4|0);
 $$sink = $26 ? $30 : $28;
 $31 = HEAP32[$$sink>>2]|0;
 $5 = $31;
 $32 = $4;
 $33 = ($32|0)==(63);
 if ($33) {
  $34 = $8;
  $35 = ((($34)) + 1|0);
  $8 = $35;
  $36 = HEAP8[$34>>0]|0;
  $37 = $36&255;
  $10 = $37;
  $38 = $10;
  $39 = ($38>>>0)<(255);
  if ($39) {
   $40 = $10;
   $41 = $4;
   $42 = (($41) + ($40))|0;
   $4 = $42;
  } else {
   $43 = $8;
   $44 = HEAP8[$43>>0]|0;
   $45 = $44&255;
   $46 = $8;
   $47 = ((($46)) + 1|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = $48&255;
   $50 = $49 << 8;
   $51 = (($45) + ($50))|0;
   $52 = $8;
   $53 = ((($52)) + 2|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 << 16;
   $57 = (($51) + ($56))|0;
   $4 = $57;
   $58 = $8;
   $59 = ((($58)) + 3|0);
   $8 = $59;
  }
  $60 = $8;
  $61 = $9;
  $62 = ($60>>>0)>($61>>>0);
  if ($62) {
   $4 = 318;
  }
  $63 = $8;
  $64 = $9;
  $65 = ($63>>>0)>=($64>>>0);
  if ($65) {
   $66 = $9;
   $67 = ((($66)) + -1|0);
   $8 = $67;
  }
 }
 $68 = $3;
 $69 = ((($68)) + 24|0);
 $70 = $3;
 $71 = (_FSE_decodeSymbol_283($69,$70)|0);
 $72 = $71&255;
 $11 = $72;
 $73 = (_MEM_32bits_284()|0);
 $74 = ($73|0)!=(0);
 if ($74) {
  $75 = $3;
  (_BIT_reloadDStream_275($75)|0);
 }
 $76 = $11;
 $77 = (($76) - 1)|0;
 $12 = $77;
 $78 = $11;
 $79 = ($78|0)==(0);
 $$ = $79 ? 0 : $77;
 $12 = $$;
 $80 = $11;
 $81 = (2064 + ($80<<2)|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $3;
 $84 = $12;
 $85 = (_BIT_readBits_285($83,$84)|0);
 $86 = (($82) + ($85))|0;
 $6 = $86;
 $87 = (_MEM_32bits_284()|0);
 $88 = ($87|0)!=(0);
 if ($88) {
  $89 = $3;
  (_BIT_reloadDStream_275($89)|0);
 }
 $90 = $11;
 $91 = ($90|0)==(0);
 if ($91) {
  $92 = $5;
  $6 = $92;
 }
 $93 = $11;
 $94 = $4;
 $95 = ($94|0)!=(0);
 $96 = $95 ^ 1;
 $97 = $96&1;
 $98 = $93 | $97;
 $99 = ($98|0)!=(0);
 if ($99) {
  $100 = $2;
  $101 = ((($100)) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = $3;
  $104 = ((($103)) + 40|0);
  HEAP32[$104>>2] = $102;
 }
 $105 = $3;
 $106 = ((($105)) + 32|0);
 $107 = $3;
 $108 = (_FSE_decodeSymbol_283($106,$107)|0);
 $109 = $108&255;
 $7 = $109;
 $110 = $7;
 $111 = ($110|0)==(127);
 if ($111) {
  $112 = $8;
  $113 = ((($112)) + 1|0);
  $8 = $113;
  $114 = HEAP8[$112>>0]|0;
  $115 = $114&255;
  $13 = $115;
  $116 = $13;
  $117 = ($116>>>0)<(255);
  if ($117) {
   $118 = $13;
   $119 = $7;
   $120 = (($119) + ($118))|0;
   $7 = $120;
  } else {
   $121 = $8;
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   $124 = $8;
   $125 = ((($124)) + 1|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = $127 << 8;
   $129 = (($123) + ($128))|0;
   $130 = $8;
   $131 = ((($130)) + 2|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = $133 << 16;
   $135 = (($129) + ($134))|0;
   $7 = $135;
   $136 = $8;
   $137 = ((($136)) + 3|0);
   $8 = $137;
  }
  $138 = $8;
  $139 = $9;
  $140 = ($138>>>0)>($139>>>0);
  if ($140) {
   $7 = 382;
  }
  $141 = $8;
  $142 = $9;
  $143 = ($141>>>0)>=($142>>>0);
  if ($143) {
   $144 = $9;
   $145 = ((($144)) + -1|0);
   $8 = $145;
  }
 }
 $146 = $7;
 $147 = (($146) + 4)|0;
 $7 = $147;
 $148 = $4;
 $149 = $2;
 HEAP32[$149>>2] = $148;
 $150 = $6;
 $151 = $2;
 $152 = ((($151)) + 4|0);
 HEAP32[$152>>2] = $150;
 $153 = $7;
 $154 = $2;
 $155 = ((($154)) + 8|0);
 HEAP32[$155>>2] = $153;
 $156 = $8;
 $157 = $3;
 $158 = ((($157)) + 44|0);
 HEAP32[$158>>2] = $156;
 STACKTOP = sp;return;
}
function _ZSTD_execSequence($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $24 = $9;
 $25 = HEAP32[$2>>2]|0;
 $26 = (($24) + ($25)|0);
 $16 = $26;
 $27 = HEAP32[$2>>2]|0;
 $28 = ((($2)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + ($29))|0;
 $17 = $30;
 $31 = $9;
 $32 = $17;
 $33 = (($31) + ($32)|0);
 $18 = $33;
 $34 = $10;
 $35 = ((($34)) + -8|0);
 $19 = $35;
 $36 = $11;
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$2>>2]|0;
 $39 = (($37) + ($38)|0);
 $20 = $39;
 $40 = $16;
 $41 = ((($2)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (0 - ($42))|0;
 $44 = (($40) + ($43)|0);
 $21 = $44;
 $45 = $16;
 $46 = $19;
 $47 = ($45>>>0)>($46>>>0);
 if ($47) {
  $8 = -13;
  $206 = $8;
  STACKTOP = sp;return ($206|0);
 }
 $48 = $18;
 $49 = $10;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  $8 = -13;
  $206 = $8;
  STACKTOP = sp;return ($206|0);
 }
 $51 = $20;
 $52 = $12;
 $53 = ($51>>>0)>($52>>>0);
 if ($53) {
  $8 = -15;
  $206 = $8;
  STACKTOP = sp;return ($206|0);
 }
 $54 = $9;
 $55 = $11;
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$2>>2]|0;
 _ZSTD_wildcopy_278($54,$56,$57);
 $58 = $16;
 $9 = $58;
 $59 = $20;
 $60 = $11;
 HEAP32[$60>>2] = $59;
 $61 = ((($2)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $16;
 $64 = $13;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = ($62>>>0)>($67>>>0);
 do {
  if ($68) {
   $69 = ((($2)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $16;
   $72 = $14;
   $73 = $71;
   $74 = $72;
   $75 = (($73) - ($74))|0;
   $76 = ($70>>>0)>($75>>>0);
   if ($76) {
    $8 = -15;
    $206 = $8;
    STACKTOP = sp;return ($206|0);
   }
   $77 = $15;
   $78 = $13;
   $79 = $21;
   $80 = $78;
   $81 = $79;
   $82 = (($80) - ($81))|0;
   $83 = (0 - ($82))|0;
   $84 = (($77) + ($83)|0);
   $21 = $84;
   $85 = $21;
   $86 = ((($2)) + 8|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($85) + ($87)|0);
   $89 = $15;
   $90 = ($88>>>0)<=($89>>>0);
   if ($90) {
    $91 = $16;
    $92 = $21;
    $93 = ((($2)) + 8|0);
    $94 = HEAP32[$93>>2]|0;
    _memmove(($91|0),($92|0),($94|0))|0;
    $95 = $17;
    $8 = $95;
    $206 = $8;
    STACKTOP = sp;return ($206|0);
   }
   $96 = $15;
   $97 = $21;
   $98 = $96;
   $99 = $97;
   $100 = (($98) - ($99))|0;
   $22 = $100;
   $101 = $16;
   $102 = $21;
   $103 = $22;
   _memmove(($101|0),($102|0),($103|0))|0;
   $104 = $16;
   $105 = $22;
   $106 = (($104) + ($105)|0);
   $9 = $106;
   $107 = $22;
   $108 = ((($2)) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) - ($107))|0;
   HEAP32[$108>>2] = $110;
   $111 = $13;
   $21 = $111;
   $112 = $9;
   $113 = $19;
   $114 = ($112>>>0)>($113>>>0);
   if (!($114)) {
    $115 = ((($2)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116>>>0)<(4);
    if (!($117)) {
     break;
    }
   }
   while(1) {
    $118 = $9;
    $119 = $18;
    $120 = ($118>>>0)<($119>>>0);
    if (!($120)) {
     break;
    }
    $121 = $21;
    $122 = ((($121)) + 1|0);
    $21 = $122;
    $123 = HEAP8[$121>>0]|0;
    $124 = $9;
    $125 = ((($124)) + 1|0);
    $9 = $125;
    HEAP8[$124>>0] = $123;
   }
   $126 = $17;
   $8 = $126;
   $206 = $8;
   STACKTOP = sp;return ($206|0);
  }
 } while(0);
 $127 = ((($2)) + 4|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ($128>>>0)<(8);
 if ($129) {
  $130 = ((($2)) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (2000 + ($131<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  $23 = $133;
  $134 = $21;
  $135 = HEAP8[$134>>0]|0;
  $136 = $9;
  HEAP8[$136>>0] = $135;
  $137 = $21;
  $138 = ((($137)) + 1|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $9;
  $141 = ((($140)) + 1|0);
  HEAP8[$141>>0] = $139;
  $142 = $21;
  $143 = ((($142)) + 2|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $9;
  $146 = ((($145)) + 2|0);
  HEAP8[$146>>0] = $144;
  $147 = $21;
  $148 = ((($147)) + 3|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $9;
  $151 = ((($150)) + 3|0);
  HEAP8[$151>>0] = $149;
  $152 = ((($2)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (2032 + ($153<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $21;
  $157 = (($156) + ($155)|0);
  $21 = $157;
  $158 = $9;
  $159 = ((($158)) + 4|0);
  $160 = $21;
  _ZSTD_copy4_281($159,$160);
  $161 = $23;
  $162 = $21;
  $163 = (0 - ($161))|0;
  $164 = (($162) + ($163)|0);
  $21 = $164;
 } else {
  $165 = $9;
  $166 = $21;
  _ZSTD_copy8_282($165,$166);
 }
 $167 = $9;
 $168 = ((($167)) + 8|0);
 $9 = $168;
 $169 = $21;
 $170 = ((($169)) + 8|0);
 $21 = $170;
 $171 = $18;
 $172 = $10;
 $173 = ((($172)) + -12|0);
 $174 = ($171>>>0)>($173>>>0);
 $175 = $9;
 L35: do {
  if ($174) {
   $176 = $19;
   $177 = ($175>>>0)<($176>>>0);
   if ($177) {
    $178 = $9;
    $179 = $21;
    $180 = $19;
    $181 = $9;
    $182 = $180;
    $183 = $181;
    $184 = (($182) - ($183))|0;
    _ZSTD_wildcopy_278($178,$179,$184);
    $185 = $19;
    $186 = $9;
    $187 = $185;
    $188 = $186;
    $189 = (($187) - ($188))|0;
    $190 = $21;
    $191 = (($190) + ($189)|0);
    $21 = $191;
    $192 = $19;
    $9 = $192;
   }
   while(1) {
    $193 = $9;
    $194 = $18;
    $195 = ($193>>>0)<($194>>>0);
    if (!($195)) {
     break L35;
    }
    $196 = $21;
    $197 = ((($196)) + 1|0);
    $21 = $197;
    $198 = HEAP8[$196>>0]|0;
    $199 = $9;
    $200 = ((($199)) + 1|0);
    $9 = $200;
    HEAP8[$199>>0] = $198;
   }
  } else {
   $201 = $21;
   $202 = ((($2)) + 8|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($203) - 8)|0;
   _ZSTD_wildcopy_278($175,$201,$204);
  }
 } while(0);
 $205 = $17;
 $8 = $205;
 $206 = $8;
 STACKTOP = sp;return ($206|0);
}
function _BIT_endOfDStream_277($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  $14 = 0;
  $13 = $14&1;
  STACKTOP = sp;return ($13|0);
 }
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(32);
 $14 = $12;
 $13 = $14&1;
 STACKTOP = sp;return ($13|0);
}
function _ZSTD_wildcopy_278($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $6 = $9;
 $10 = $3;
 $7 = $10;
 $11 = $7;
 $12 = $5;
 $13 = (($11) + ($12)|0);
 $8 = $13;
 while(1) {
  $14 = $7;
  $15 = $6;
  _ZSTD_copy8_282($14,$15);
  $16 = $7;
  $17 = ((($16)) + 8|0);
  $7 = $17;
  $18 = $6;
  $19 = ((($18)) + 8|0);
  $6 = $19;
  $20 = $7;
  $21 = $8;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ZSTD_copy4_281($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;
 STACKTOP = sp;return;
}
function _ZSTD_copy8_282($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$4+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$4+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$4+7>>0]=HEAP8[$5+7>>0]|0;
 STACKTOP = sp;return;
}
function _FSE_decodeSymbol_283($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$13>>1]|0;HEAP16[$4+2>>1]=HEAP16[$13+2>>1]|0;
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $5 = $16;
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $3;
 $20 = $5;
 $21 = (_BIT_readBits_285($19,$20)|0);
 $7 = $21;
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = $7;
 $25 = (($23) + ($24))|0;
 $26 = $2;
 HEAP32[$26>>2] = $25;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _MEM_32bits_284() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _BIT_readBits_285($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BIT_lookBits_286($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BIT_skipBits_287($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _BIT_lookBits_286($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $11 >>> 1;
 $13 = $3;
 $14 = (31 - ($13))|0;
 $15 = $14 & 31;
 $16 = $12 >>> $15;
 STACKTOP = sp;return ($16|0);
}
function _BIT_skipBits_287($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _MEM_readLEST_288($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_32bits_284()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 if ($4) {
  $6 = (_MEM_readLE32_289($5)|0);
  $1 = $6;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = (_MEM_readLE64_290($5)|0);
  $8 = tempRet0;
  $1 = $7;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _MEM_readLE32_289($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_MEM_isLittleEndian_291()|0);
 $5 = ($4|0)!=(0);
 $6 = $2;
 if ($5) {
  $7 = (_MEM_read32_294($6)|0);
  $1 = $7;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 } else {
  $3 = $6;
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $3;
  $12 = ((($11)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = (($10) + ($15))|0;
  $17 = $3;
  $18 = ((($17)) + 2|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $20 << 16;
  $22 = (($16) + ($21))|0;
  $23 = $3;
  $24 = ((($23)) + 3|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26 << 24;
  $28 = (($22) + ($27))|0;
  $1 = $28;
  $29 = $1;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _MEM_readLE64_290($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = $0;
 $4 = (_MEM_isLittleEndian_291()|0);
 $5 = ($4|0)!=(0);
 $6 = $2;
 if ($5) {
  $7 = (_MEM_read64_292($6)|0);
  $8 = tempRet0;
  $9 = $1;
  $10 = $9;
  HEAP32[$10>>2] = $7;
  $11 = (($9) + 4)|0;
  $12 = $11;
  HEAP32[$12>>2] = $8;
  $74 = $1;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = (($74) + 4)|0;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  tempRet0 = ($79);
  STACKTOP = sp;return ($76|0);
 } else {
  $3 = $6;
  $13 = $3;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = $3;
  $17 = ((($16)) + 1|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (_bitshift64Shl(($19|0),0,8)|0);
  $21 = tempRet0;
  $22 = (_i64Add(($15|0),0,($20|0),($21|0))|0);
  $23 = tempRet0;
  $24 = $3;
  $25 = ((($24)) + 2|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  $28 = (_bitshift64Shl(($27|0),0,16)|0);
  $29 = tempRet0;
  $30 = (_i64Add(($22|0),($23|0),($28|0),($29|0))|0);
  $31 = tempRet0;
  $32 = $3;
  $33 = ((($32)) + 3|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = (_bitshift64Shl(($35|0),0,24)|0);
  $37 = tempRet0;
  $38 = (_i64Add(($30|0),($31|0),($36|0),($37|0))|0);
  $39 = tempRet0;
  $40 = $3;
  $41 = ((($40)) + 4|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = (_i64Add(($38|0),($39|0),0,($43|0))|0);
  $45 = tempRet0;
  $46 = $3;
  $47 = ((($46)) + 5|0);
  $48 = HEAP8[$47>>0]|0;
  $49 = $48&255;
  $50 = (_bitshift64Shl(($49|0),0,40)|0);
  $51 = tempRet0;
  $52 = (_i64Add(($44|0),($45|0),($50|0),($51|0))|0);
  $53 = tempRet0;
  $54 = $3;
  $55 = ((($54)) + 6|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56&255;
  $58 = (_bitshift64Shl(($57|0),0,48)|0);
  $59 = tempRet0;
  $60 = (_i64Add(($52|0),($53|0),($58|0),($59|0))|0);
  $61 = tempRet0;
  $62 = $3;
  $63 = ((($62)) + 7|0);
  $64 = HEAP8[$63>>0]|0;
  $65 = $64&255;
  $66 = (_bitshift64Shl(($65|0),0,56)|0);
  $67 = tempRet0;
  $68 = (_i64Add(($60|0),($61|0),($66|0),($67|0))|0);
  $69 = tempRet0;
  $70 = $1;
  $71 = $70;
  HEAP32[$71>>2] = $68;
  $72 = (($70) + 4)|0;
  $73 = $72;
  HEAP32[$73>>2] = $69;
  $74 = $1;
  $75 = $74;
  $76 = HEAP32[$75>>2]|0;
  $77 = (($74) + 4)|0;
  $78 = $77;
  $79 = HEAP32[$78>>2]|0;
  tempRet0 = ($79);
  STACKTOP = sp;return ($76|0);
 }
 return (0)|0;
}
function _MEM_isLittleEndian_291() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2192]|0;
 $1 = $0&255;
 return ($1|0);
}
function _MEM_read64_292($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$2+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$2+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$2+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$2+7>>0]=HEAP8[$3+7>>0]|0;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 tempRet0 = ($9);
 STACKTOP = sp;return ($6|0);
}
function _MEM_read32_294($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$3+3>>0]|0;
 $4 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _BIT_highbit32_295($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (Math_clz32(($2|0))|0);
 $4 = (31 - ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function _MEM_readLE16_296($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_MEM_isLittleEndian_291()|0);
 $5 = ($4|0)!=(0);
 $6 = $2;
 if ($5) {
  $7 = (_MEM_read16_302($6)|0);
  $1 = $7;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $3 = $6;
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $3;
  $12 = ((($11)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = (($10) + ($15))|0;
  $17 = $16&65535;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _FSE_buildDTable_rle_297($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $4 = $8;
 $9 = $4;
 $5 = $9;
 $10 = $2;
 $11 = ((($10)) + 4|0);
 $6 = $11;
 $12 = $6;
 $7 = $12;
 $13 = $5;
 HEAP16[$13>>1] = 0;
 $14 = $5;
 $15 = ((($14)) + 2|0);
 HEAP16[$15>>1] = 0;
 $16 = $7;
 HEAP16[$16>>1] = 0;
 $17 = $3;
 $18 = $7;
 $19 = ((($18)) + 2|0);
 HEAP8[$19>>0] = $17;
 $20 = $7;
 $21 = ((($20)) + 3|0);
 HEAP8[$21>>0] = 0;
 STACKTOP = sp;return 0;
}
function _FSE_buildDTable_raw_298($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $13 = $3;
 $5 = $13;
 $14 = $5;
 $6 = $14;
 $15 = $3;
 $16 = ((($15)) + 4|0);
 $7 = $16;
 $17 = $7;
 $8 = $17;
 $18 = $4;
 $19 = 1 << $18;
 $9 = $19;
 $20 = $9;
 $21 = (($20) - 1)|0;
 $10 = $21;
 $22 = $10;
 $11 = $22;
 $23 = $4;
 $24 = ($23>>>0)<(1);
 if ($24) {
  $2 = -1;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 $25 = $4;
 $26 = $25&65535;
 $27 = $6;
 HEAP16[$27>>1] = $26;
 $28 = $6;
 $29 = ((($28)) + 2|0);
 HEAP16[$29>>1] = 1;
 $12 = 0;
 while(1) {
  $30 = $12;
  $31 = $11;
  $32 = ($30>>>0)<=($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = $8;
  $34 = $12;
  $35 = (($33) + ($34<<2)|0);
  HEAP16[$35>>1] = 0;
  $36 = $12;
  $37 = $36&255;
  $38 = $8;
  $39 = $12;
  $40 = (($38) + ($39<<2)|0);
  $41 = ((($40)) + 2|0);
  HEAP8[$41>>0] = $37;
  $42 = $4;
  $43 = $42&255;
  $44 = $8;
  $45 = $12;
  $46 = (($44) + ($45<<2)|0);
  $47 = ((($46)) + 3|0);
  HEAP8[$47>>0] = $43;
  $48 = $12;
  $49 = (($48) + 1)|0;
  $12 = $49;
 }
 $2 = 0;
 $50 = $2;
 STACKTOP = sp;return ($50|0);
}
function _FSE_readNCount_299($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $24 = $9;
 $11 = $24;
 $25 = $11;
 $26 = $10;
 $27 = (($25) + ($26)|0);
 $12 = $27;
 $28 = $11;
 $13 = $28;
 $19 = 0;
 $20 = 0;
 $29 = $10;
 $30 = ($29>>>0)<(4);
 if ($30) {
  $5 = -14;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $31 = $13;
 $32 = (_MEM_readLE32_289($31)|0);
 $17 = $32;
 $33 = $17;
 $34 = $33 & 15;
 $35 = (($34) + 5)|0;
 $14 = $35;
 $36 = $14;
 $37 = ($36|0)>(15);
 if ($37) {
  $5 = -17;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $38 = $17;
 $39 = $38 >>> 4;
 $17 = $39;
 $18 = 4;
 $40 = $14;
 $41 = $8;
 HEAP32[$41>>2] = $40;
 $42 = $14;
 $43 = 1 << $42;
 $44 = (($43) + 1)|0;
 $15 = $44;
 $45 = $14;
 $46 = 1 << $45;
 $16 = $46;
 $47 = $14;
 $48 = (($47) + 1)|0;
 $14 = $48;
 L9: while(1) {
  $49 = $15;
  $50 = ($49|0)>(1);
  if (!($50)) {
   break;
  }
  $51 = $19;
  $52 = $7;
  $53 = HEAP32[$52>>2]|0;
  $54 = ($51>>>0)<=($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = $20;
  $56 = ($55|0)!=(0);
  do {
   if ($56) {
    $57 = $19;
    $21 = $57;
    while(1) {
     $58 = $17;
     $59 = $58 & 65535;
     $60 = ($59|0)==(65535);
     if (!($60)) {
      break;
     }
     $61 = $21;
     $62 = (($61) + 24)|0;
     $21 = $62;
     $63 = $13;
     $64 = $12;
     $65 = ((($64)) + -5|0);
     $66 = ($63>>>0)<($65>>>0);
     if ($66) {
      $67 = $13;
      $68 = ((($67)) + 2|0);
      $13 = $68;
      $69 = $13;
      $70 = (_MEM_readLE32_289($69)|0);
      $71 = $18;
      $72 = $70 >>> $71;
      $17 = $72;
      continue;
     } else {
      $73 = $17;
      $74 = $73 >>> 16;
      $17 = $74;
      $75 = $18;
      $76 = (($75) + 16)|0;
      $18 = $76;
      continue;
     }
    }
    while(1) {
     $77 = $17;
     $78 = $77 & 3;
     $79 = ($78|0)==(3);
     if (!($79)) {
      break;
     }
     $80 = $21;
     $81 = (($80) + 3)|0;
     $21 = $81;
     $82 = $17;
     $83 = $82 >>> 2;
     $17 = $83;
     $84 = $18;
     $85 = (($84) + 2)|0;
     $18 = $85;
    }
    $86 = $17;
    $87 = $86 & 3;
    $88 = $21;
    $89 = (($88) + ($87))|0;
    $21 = $89;
    $90 = $18;
    $91 = (($90) + 2)|0;
    $18 = $91;
    $92 = $21;
    $93 = $7;
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92>>>0)>($94>>>0);
    if ($95) {
     label = 17;
     break L9;
    }
    while(1) {
     $96 = $19;
     $97 = $21;
     $98 = ($96>>>0)<($97>>>0);
     if (!($98)) {
      break;
     }
     $99 = $6;
     $100 = $19;
     $101 = (($100) + 1)|0;
     $19 = $101;
     $102 = (($99) + ($100<<1)|0);
     HEAP16[$102>>1] = 0;
    }
    $103 = $13;
    $104 = $12;
    $105 = ((($104)) + -7|0);
    $106 = ($103>>>0)<=($105>>>0);
    if (!($106)) {
     $107 = $13;
     $108 = $18;
     $109 = $108 >> 3;
     $110 = (($107) + ($109)|0);
     $111 = $12;
     $112 = ((($111)) + -4|0);
     $113 = ($110>>>0)<=($112>>>0);
     if (!($113)) {
      $124 = $17;
      $125 = $124 >>> 2;
      $17 = $125;
      break;
     }
    }
    $114 = $18;
    $115 = $114 >> 3;
    $116 = $13;
    $117 = (($116) + ($115)|0);
    $13 = $117;
    $118 = $18;
    $119 = $118 & 7;
    $18 = $119;
    $120 = $13;
    $121 = (_MEM_readLE32_289($120)|0);
    $122 = $18;
    $123 = $121 >>> $122;
    $17 = $123;
   }
  } while(0);
  $126 = $16;
  $127 = $126<<1;
  $128 = (($127) - 1)|0;
  $129 = $15;
  $130 = (($128) - ($129))|0;
  $131 = $130&65535;
  $22 = $131;
  $132 = $17;
  $133 = $16;
  $134 = (($133) - 1)|0;
  $135 = $132 & $134;
  $136 = $22;
  $137 = $136 << 16 >> 16;
  $138 = ($135>>>0)<($137>>>0);
  $139 = $17;
  $140 = $16;
  if ($138) {
   $141 = (($140) - 1)|0;
   $142 = $139 & $141;
   $143 = $142&65535;
   $23 = $143;
   $144 = $14;
   $145 = (($144) - 1)|0;
   $146 = $18;
   $147 = (($146) + ($145))|0;
   $18 = $147;
  } else {
   $148 = $140<<1;
   $149 = (($148) - 1)|0;
   $150 = $139 & $149;
   $151 = $150&65535;
   $23 = $151;
   $152 = $23;
   $153 = $152 << 16 >> 16;
   $154 = $16;
   $155 = ($153|0)>=($154|0);
   if ($155) {
    $156 = $22;
    $157 = $156 << 16 >> 16;
    $158 = $23;
    $159 = $158 << 16 >> 16;
    $160 = (($159) - ($157))|0;
    $161 = $160&65535;
    $23 = $161;
   }
   $162 = $14;
   $163 = $18;
   $164 = (($163) + ($162))|0;
   $18 = $164;
  }
  $165 = $23;
  $166 = (($165) + -1)<<16>>16;
  $23 = $166;
  $167 = $23;
  $168 = (_FSE_abs($167)|0);
  $169 = $168 << 16 >> 16;
  $170 = $15;
  $171 = (($170) - ($169))|0;
  $15 = $171;
  $172 = $23;
  $173 = $6;
  $174 = $19;
  $175 = (($174) + 1)|0;
  $19 = $175;
  $176 = (($173) + ($174<<1)|0);
  HEAP16[$176>>1] = $172;
  $177 = $23;
  $178 = ($177<<16>>16)!=(0);
  $179 = $178 ^ 1;
  $180 = $179&1;
  $20 = $180;
  while(1) {
   $181 = $15;
   $182 = $16;
   $183 = ($181|0)<($182|0);
   if (!($183)) {
    break;
   }
   $184 = $14;
   $185 = (($184) + -1)|0;
   $14 = $185;
   $186 = $16;
   $187 = $186 >> 1;
   $16 = $187;
  }
  $188 = $13;
  $189 = $12;
  $190 = ((($189)) + -7|0);
  $191 = ($188>>>0)<=($190>>>0);
  if ($191) {
   label = 34;
  } else {
   $192 = $13;
   $193 = $18;
   $194 = $193 >> 3;
   $195 = (($192) + ($194)|0);
   $196 = $12;
   $197 = ((($196)) + -4|0);
   $198 = ($195>>>0)<=($197>>>0);
   if ($198) {
    label = 34;
   } else {
    $205 = $12;
    $206 = ((($205)) + -4|0);
    $207 = $13;
    $208 = $206;
    $209 = $207;
    $210 = (($208) - ($209))|0;
    $211 = $210<<3;
    $212 = $18;
    $213 = (($212) - ($211))|0;
    $18 = $213;
    $214 = $12;
    $215 = ((($214)) + -4|0);
    $13 = $215;
   }
  }
  if ((label|0) == 34) {
   label = 0;
   $199 = $18;
   $200 = $199 >> 3;
   $201 = $13;
   $202 = (($201) + ($200)|0);
   $13 = $202;
   $203 = $18;
   $204 = $203 & 7;
   $18 = $204;
  }
  $216 = $13;
  $217 = (_MEM_readLE32_289($216)|0);
  $218 = $18;
  $219 = $218 & 31;
  $220 = $217 >>> $219;
  $17 = $220;
 }
 if ((label|0) == 17) {
  $5 = -19;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $221 = $15;
 $222 = ($221|0)!=(1);
 if ($222) {
  $5 = -1;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $223 = $19;
 $224 = (($223) - 1)|0;
 $225 = $7;
 HEAP32[$225>>2] = $224;
 $226 = $18;
 $227 = (($226) + 7)|0;
 $228 = $227 >> 3;
 $229 = $13;
 $230 = (($229) + ($228)|0);
 $13 = $230;
 $231 = $13;
 $232 = $11;
 $233 = $231;
 $234 = $232;
 $235 = (($233) - ($234))|0;
 $236 = $10;
 $237 = ($235>>>0)>($236>>>0);
 if ($237) {
  $5 = -14;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 } else {
  $238 = $13;
  $239 = $11;
  $240 = $238;
  $241 = $239;
  $242 = (($240) - ($241))|0;
  $5 = $242;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 return (0)|0;
}
function _FSE_isError_300($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_261($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _FSE_buildDTable_301($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $9 = sp + 584|0;
 $15 = sp + 72|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $25 = $5;
 $26 = ((($25)) + 4|0);
 $10 = $26;
 $27 = $10;
 $11 = $27;
 $28 = $8;
 $29 = 1 << $28;
 $12 = $29;
 $30 = $12;
 $31 = (($30) - 1)|0;
 $13 = $31;
 $32 = $12;
 $33 = (_FSE_tableStep($32)|0);
 $14 = $33;
 $16 = 0;
 $34 = $12;
 $35 = (($34) - 1)|0;
 $17 = $35;
 $36 = $8;
 $37 = (($36) - 1)|0;
 $38 = 1 << $37;
 $39 = $38&65535;
 $18 = $39;
 $19 = 1;
 $40 = $7;
 $41 = ($40>>>0)>(255);
 if ($41) {
  $4 = -18;
  $157 = $4;
  STACKTOP = sp;return ($157|0);
 }
 $42 = $8;
 $43 = ($42>>>0)>(12);
 if ($43) {
  $4 = -17;
  $157 = $4;
  STACKTOP = sp;return ($157|0);
 }
 $44 = $8;
 $45 = $44&65535;
 HEAP16[$9>>1] = $45;
 $20 = 0;
 while(1) {
  $46 = $20;
  $47 = $7;
  $48 = ($46>>>0)<=($47>>>0);
  if (!($48)) {
   break;
  }
  $49 = $6;
  $50 = $20;
  $51 = (($49) + ($50<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = ($53|0)==(-1);
  if ($54) {
   $55 = $20;
   $56 = $55&255;
   $57 = $11;
   $58 = $17;
   $59 = (($58) + -1)|0;
   $17 = $59;
   $60 = (($57) + ($58<<2)|0);
   $61 = ((($60)) + 2|0);
   HEAP8[$61>>0] = $56;
   $62 = $20;
   $$sink = 1;$$sink2 = $62;
  } else {
   $63 = $6;
   $64 = $20;
   $65 = (($63) + ($64<<1)|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = $66 << 16 >> 16;
   $68 = $18;
   $69 = $68 << 16 >> 16;
   $70 = ($67|0)>=($69|0);
   if ($70) {
    $19 = 0;
   }
   $71 = $6;
   $72 = $20;
   $73 = (($71) + ($72<<1)|0);
   $74 = HEAP16[$73>>1]|0;
   $75 = $20;
   $$sink = $74;$$sink2 = $75;
  }
  $76 = (($15) + ($$sink2<<1)|0);
  HEAP16[$76>>1] = $$sink;
  $77 = $20;
  $78 = (($77) + 1)|0;
  $20 = $78;
 }
 $20 = 0;
 while(1) {
  $79 = $20;
  $80 = $7;
  $81 = ($79>>>0)<=($80>>>0);
  if (!($81)) {
   break;
  }
  $21 = 0;
  while(1) {
   $82 = $21;
   $83 = $6;
   $84 = $20;
   $85 = (($83) + ($84<<1)|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = $86 << 16 >> 16;
   $88 = ($82|0)<($87|0);
   $89 = $20;
   if (!($88)) {
    break;
   }
   $90 = $89&255;
   $91 = $11;
   $92 = $16;
   $93 = (($91) + ($92<<2)|0);
   $94 = ((($93)) + 2|0);
   HEAP8[$94>>0] = $90;
   $95 = $16;
   $96 = $14;
   $97 = (($95) + ($96))|0;
   $98 = $13;
   $99 = $97 & $98;
   $16 = $99;
   while(1) {
    $100 = $16;
    $101 = $17;
    $102 = ($100>>>0)>($101>>>0);
    if (!($102)) {
     break;
    }
    $103 = $16;
    $104 = $14;
    $105 = (($103) + ($104))|0;
    $106 = $13;
    $107 = $105 & $106;
    $16 = $107;
   }
   $108 = $21;
   $109 = (($108) + 1)|0;
   $21 = $109;
  }
  $110 = (($89) + 1)|0;
  $20 = $110;
 }
 $111 = $16;
 $112 = ($111|0)!=(0);
 if ($112) {
  $4 = -1;
  $157 = $4;
  STACKTOP = sp;return ($157|0);
 }
 $22 = 0;
 while(1) {
  $113 = $22;
  $114 = $12;
  $115 = ($113>>>0)<($114>>>0);
  if (!($115)) {
   break;
  }
  $116 = $11;
  $117 = $22;
  $118 = (($116) + ($117<<2)|0);
  $119 = ((($118)) + 2|0);
  $120 = HEAP8[$119>>0]|0;
  $23 = $120;
  $121 = $23;
  $122 = $121&255;
  $123 = (($15) + ($122<<1)|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = (($124) + 1)<<16>>16;
  HEAP16[$123>>1] = $125;
  $24 = $124;
  $126 = $8;
  $127 = $24;
  $128 = $127&65535;
  $129 = (_BIT_highbit32_295($128)|0);
  $130 = (($126) - ($129))|0;
  $131 = $130&255;
  $132 = $11;
  $133 = $22;
  $134 = (($132) + ($133<<2)|0);
  $135 = ((($134)) + 3|0);
  HEAP8[$135>>0] = $131;
  $136 = $24;
  $137 = $136&65535;
  $138 = $11;
  $139 = $22;
  $140 = (($138) + ($139<<2)|0);
  $141 = ((($140)) + 3|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  $144 = $137 << $143;
  $145 = $12;
  $146 = (($144) - ($145))|0;
  $147 = $146&65535;
  $148 = $11;
  $149 = $22;
  $150 = (($148) + ($149<<2)|0);
  HEAP16[$150>>1] = $147;
  $151 = $22;
  $152 = (($151) + 1)|0;
  $22 = $152;
 }
 $153 = $19;
 $154 = $153&65535;
 $155 = ((($9)) + 2|0);
 HEAP16[$155>>1] = $154;
 $156 = $5;
 ;HEAP16[$156>>1]=HEAP16[$9>>1]|0;HEAP16[$156+2>>1]=HEAP16[$9+2>>1]|0;
 $4 = 0;
 $157 = $4;
 STACKTOP = sp;return ($157|0);
}
function _FSE_tableStep($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 >>> 1;
 $4 = $1;
 $5 = $4 >>> 3;
 $6 = (($3) + ($5))|0;
 $7 = (($6) + 3)|0;
 STACKTOP = sp;return ($7|0);
}
function _FSE_abs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)<(0);
 $5 = $1;
 $6 = $5 << 16 >> 16;
 $7 = (0 - ($6))|0;
 $8 = $4 ? $7 : $6;
 $9 = $8&65535;
 STACKTOP = sp;return ($9|0);
}
function _MEM_read16_302($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;
 $4 = HEAP16[$2>>1]|0;
 STACKTOP = sp;return ($4|0);
}
function _ZSTD_decompressLiterals($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $12 = $7;
 $9 = $12;
 $13 = $7;
 $14 = (_MEM_readLE32_289($13)|0);
 $15 = $14 & 2097151;
 $16 = $15 >>> 2;
 $10 = $16;
 $17 = $9;
 $18 = ((($17)) + 2|0);
 $19 = (_MEM_readLE32_289($18)|0);
 $20 = $19 & 16777215;
 $21 = $20 >>> 5;
 $11 = $21;
 $22 = $10;
 $23 = $6;
 $24 = HEAP32[$23>>2]|0;
 $25 = ($22>>>0)>($24>>>0);
 if ($25) {
  $4 = -15;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 }
 $26 = $11;
 $27 = (($26) + 5)|0;
 $28 = $8;
 $29 = ($27>>>0)>($28>>>0);
 if ($29) {
  $4 = -15;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 }
 $30 = $5;
 $31 = $10;
 $32 = $9;
 $33 = ((($32)) + 5|0);
 $34 = $11;
 $35 = (_HUF_decompress_303($30,$31,$33,$34)|0);
 $36 = (_HUF_isError_304($35)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $4 = -15;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 } else {
  $38 = $10;
  $39 = $6;
  HEAP32[$39>>2] = $38;
  $40 = $11;
  $41 = (($40) + 5)|0;
  $4 = $41;
  $42 = $4;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _HUF_decompress_303($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $15 = $14 >>> 8;
 $10 = $15;
 $12 = 0;
 $16 = $6;
 $17 = ($16|0)==(0);
 if ($17) {
  $4 = -13;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 $18 = $8;
 $19 = $6;
 $20 = ($18>>>0)>($19>>>0);
 if ($20) {
  $4 = -15;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 $21 = $8;
 $22 = $6;
 $23 = ($21|0)==($22|0);
 if ($23) {
  $24 = $5;
  $25 = $7;
  $26 = $6;
  _memcpy(($24|0),($25|0),($26|0))|0;
  $27 = $6;
  $4 = $27;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 $28 = $8;
 $29 = ($28|0)==(1);
 if ($29) {
  $30 = $5;
  $31 = $7;
  $32 = HEAP8[$31>>0]|0;
  $33 = $32&255;
  $34 = $33&255;
  $35 = $6;
  _memset(($30|0),($34|0),($35|0))|0;
  $36 = $6;
  $4 = $36;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 $37 = $8;
 $38 = $37<<4;
 $39 = $6;
 $40 = (($38>>>0) / ($39>>>0))&-1;
 $9 = $40;
 $13 = 0;
 while(1) {
  $41 = $13;
  $42 = ($41|0)<(3);
  if (!($42)) {
   break;
  }
  $43 = $9;
  $44 = (2196 + (($43*24)|0)|0);
  $45 = $13;
  $46 = (($44) + ($45<<3)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $9;
  $49 = (2196 + (($48*24)|0)|0);
  $50 = $13;
  $51 = (($49) + ($50<<3)|0);
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $10;
  $55 = Math_imul($53, $54)|0;
  $56 = (($47) + ($55))|0;
  $57 = $13;
  $58 = (($11) + ($57<<2)|0);
  HEAP32[$58>>2] = $56;
  $59 = $13;
  $60 = (($59) + 1)|0;
  $13 = $60;
 }
 $61 = ((($11)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 >>> 4;
 $64 = ((($11)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + ($63))|0;
 HEAP32[$64>>2] = $66;
 $67 = ((($11)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $68 >>> 3;
 $70 = ((($11)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + ($69))|0;
 HEAP32[$70>>2] = $72;
 $73 = ((($11)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$11>>2]|0;
 $76 = ($74>>>0)<($75>>>0);
 if ($76) {
  $12 = 1;
 }
 $77 = $12;
 $78 = (2580 + ($77<<2)|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $5;
 $81 = $6;
 $82 = $7;
 $83 = $8;
 $84 = (FUNCTION_TABLE_iiiii[$79 & 7]($80,$81,$82,$83)|0);
 $4 = $84;
 $85 = $4;
 STACKTOP = sp;return ($85|0);
}
function _HUF_isError_304($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_261($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _HUF_decompress4X2_307($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $9 = sp + 28|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 _memset(($9|0),0,8194)|0;
 HEAP16[$9>>1] = 12;
 $12 = $7;
 $10 = $12;
 $13 = $7;
 $14 = $8;
 $15 = (_HUF_readDTableX2_324($9,$13,$14)|0);
 $11 = $15;
 $16 = $11;
 $17 = (_HUF_isError_304($16)|0);
 $18 = ($17|0)!=(0);
 $19 = $11;
 if ($18) {
  $4 = $19;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $20 = $8;
 $21 = ($19>>>0)>=($20>>>0);
 if ($21) {
  $4 = -14;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 } else {
  $22 = $11;
  $23 = $10;
  $24 = (($23) + ($22)|0);
  $10 = $24;
  $25 = $11;
  $26 = $8;
  $27 = (($26) - ($25))|0;
  $8 = $27;
  $28 = $5;
  $29 = $6;
  $30 = $10;
  $31 = $8;
  $32 = (_HUF_decompress4X2_usingDTable_325($28,$29,$30,$31,$9)|0);
  $4 = $32;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _HUF_decompress4X4_308($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16416|0);
 $9 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 _memset(($9|0),0,16388)|0;
 HEAP32[$9>>2] = 12;
 $12 = $7;
 $10 = $12;
 $13 = $7;
 $14 = $8;
 $15 = (_HUF_readDTableX4_309($9,$13,$14)|0);
 $11 = $15;
 $16 = $11;
 $17 = (_HUF_isError_304($16)|0);
 $18 = ($17|0)!=(0);
 $19 = $11;
 if ($18) {
  $4 = $19;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $20 = $8;
 $21 = ($19>>>0)>=($20>>>0);
 if ($21) {
  $4 = -14;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 } else {
  $22 = $11;
  $23 = $10;
  $24 = (($23) + ($22)|0);
  $10 = $24;
  $25 = $11;
  $26 = $8;
  $27 = (($26) - ($25))|0;
  $8 = $27;
  $28 = $5;
  $29 = $6;
  $30 = $10;
  $31 = $8;
  $32 = (_HUF_decompress4X4_usingDTable_310($28,$29,$30,$31,$9)|0);
  $4 = $32;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _HUF_readDTableX4_309($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2112|0);
 $7 = sp + 1856|0;
 $8 = sp + 1344|0;
 $9 = sp + 1256|0;
 $10 = sp + 1184|0;
 $12 = sp + 88|0;
 $13 = sp + 84|0;
 $16 = sp + 72|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 dest=$9; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$10; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $35 = ((($10)) + 4|0);
 $11 = $35;
 $36 = $4;
 $37 = HEAP32[$36>>2]|0;
 $17 = $37;
 $38 = $4;
 $19 = $38;
 $39 = $19;
 $40 = ((($39)) + 4|0);
 $20 = $40;
 $41 = $17;
 $42 = ($41>>>0)>(16);
 if ($42) {
  $3 = -17;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $43 = $5;
 $44 = $6;
 $45 = (_HUF_readStats_315($7,256,$9,$16,$13,$43,$44)|0);
 $18 = $45;
 $46 = $18;
 $47 = (_HUF_isError_304($46)|0);
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $18;
  $3 = $49;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $50 = HEAP32[$13>>2]|0;
 $51 = $17;
 $52 = ($50>>>0)>($51>>>0);
 if ($52) {
  $3 = -17;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $53 = HEAP32[$13>>2]|0;
 $14 = $53;
 while(1) {
  $54 = $14;
  $55 = (($9) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(0);
  if (!($57)) {
   break;
  }
  $58 = $14;
  $59 = ($58|0)!=(0);
  if (!($59)) {
   label = 10;
   break;
  }
  $60 = $14;
  $61 = (($60) + -1)|0;
  $14 = $61;
 }
 if ((label|0) == 10) {
  $3 = -1;
  $161 = $3;
  STACKTOP = sp;return ($161|0);
 }
 $22 = 0;
 $21 = 1;
 while(1) {
  $62 = $21;
  $63 = $14;
  $64 = ($62>>>0)<=($63>>>0);
  $65 = $22;
  if (!($64)) {
   break;
  }
  $23 = $65;
  $66 = $21;
  $67 = (($9) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $22;
  $70 = (($69) + ($68))|0;
  $22 = $70;
  $71 = $23;
  $72 = $11;
  $73 = $21;
  $74 = (($72) + ($73<<2)|0);
  HEAP32[$74>>2] = $71;
  $75 = $21;
  $76 = (($75) + 1)|0;
  $21 = $76;
 }
 $77 = $11;
 HEAP32[$77>>2] = $65;
 $78 = $22;
 $15 = $78;
 $24 = 0;
 while(1) {
  $79 = $24;
  $80 = HEAP32[$16>>2]|0;
  $81 = ($79>>>0)<($80>>>0);
  if (!($81)) {
   break;
  }
  $82 = $24;
  $83 = (($7) + ($82)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $25 = $85;
  $86 = $11;
  $87 = $25;
  $88 = (($86) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + 1)|0;
  HEAP32[$88>>2] = $90;
  $26 = $89;
  $91 = $24;
  $92 = $91&255;
  $93 = $26;
  $94 = (($8) + ($93<<1)|0);
  HEAP8[$94>>0] = $92;
  $95 = $25;
  $96 = $95&255;
  $97 = $26;
  $98 = (($8) + ($97<<1)|0);
  $99 = ((($98)) + 1|0);
  HEAP8[$99>>0] = $96;
  $100 = $24;
  $101 = (($100) + 1)|0;
  $24 = $101;
 }
 $102 = $11;
 HEAP32[$102>>2] = 0;
 $103 = HEAP32[$13>>2]|0;
 $104 = (($103) + 1)|0;
 $105 = $14;
 $106 = (($104) - ($105))|0;
 $27 = $106;
 $28 = 0;
 $107 = $17;
 $108 = HEAP32[$13>>2]|0;
 $109 = (($107) - ($108))|0;
 $110 = (($109) - 1)|0;
 $31 = $110;
 $32 = $12;
 $29 = 1;
 while(1) {
  $111 = $29;
  $112 = $14;
  $113 = ($111>>>0)<=($112>>>0);
  if (!($113)) {
   break;
  }
  $114 = $28;
  $33 = $114;
  $115 = $29;
  $116 = (($9) + ($115<<2)|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $29;
  $119 = $31;
  $120 = (($118) + ($119))|0;
  $121 = $117 << $120;
  $122 = $28;
  $123 = (($122) + ($121))|0;
  $28 = $123;
  $124 = $33;
  $125 = $32;
  $126 = $29;
  $127 = (($125) + ($126<<2)|0);
  HEAP32[$127>>2] = $124;
  $128 = $29;
  $129 = (($128) + 1)|0;
  $29 = $129;
 }
 $130 = $27;
 $30 = $130;
 while(1) {
  $131 = $30;
  $132 = $17;
  $133 = $27;
  $134 = (($132) - ($133))|0;
  $135 = ($131>>>0)<=($134>>>0);
  if (!($135)) {
   break;
  }
  $136 = $30;
  $137 = (($12) + (($136*68)|0)|0);
  $34 = $137;
  $29 = 1;
  while(1) {
   $138 = $29;
   $139 = $14;
   $140 = ($138>>>0)<=($139>>>0);
   if (!($140)) {
    break;
   }
   $141 = $32;
   $142 = $29;
   $143 = (($141) + ($142<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = $30;
   $146 = $144 >>> $145;
   $147 = $34;
   $148 = $29;
   $149 = (($147) + ($148<<2)|0);
   HEAP32[$149>>2] = $146;
   $150 = $29;
   $151 = (($150) + 1)|0;
   $29 = $151;
  }
  $152 = $30;
  $153 = (($152) + 1)|0;
  $30 = $153;
 }
 $154 = $20;
 $155 = $17;
 $156 = $15;
 $157 = $14;
 $158 = HEAP32[$13>>2]|0;
 $159 = (($158) + 1)|0;
 _HUF_fillDTableX4_316($154,$155,$8,$156,$10,$12,$157,$159);
 $160 = $18;
 $3 = $160;
 $161 = $3;
 STACKTOP = sp;return ($161|0);
}
function _HUF_decompress4X4_usingDTable_310($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $18 = sp + 120|0;
 $19 = sp + 104|0;
 $20 = sp + 88|0;
 $21 = sp + 72|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $39 = $9;
 $40 = ($39>>>0)<(10);
 if ($40) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $41 = $8;
 $11 = $41;
 $42 = $6;
 $12 = $42;
 $43 = $12;
 $44 = $7;
 $45 = (($43) + ($44)|0);
 $13 = $45;
 $46 = $10;
 $14 = $46;
 $47 = $14;
 $48 = ((($47)) + 4|0);
 $15 = $48;
 $49 = $10;
 $50 = HEAP32[$49>>2]|0;
 $16 = $50;
 $51 = $11;
 $52 = (_MEM_readLE16_296($51)|0);
 $53 = $52&65535;
 $22 = $53;
 $54 = $11;
 $55 = ((($54)) + 2|0);
 $56 = (_MEM_readLE16_296($55)|0);
 $57 = $56&65535;
 $23 = $57;
 $58 = $11;
 $59 = ((($58)) + 4|0);
 $60 = (_MEM_readLE16_296($59)|0);
 $61 = $60&65535;
 $24 = $61;
 $62 = $11;
 $63 = ((($62)) + 6|0);
 $26 = $63;
 $64 = $26;
 $65 = $22;
 $66 = (($64) + ($65)|0);
 $27 = $66;
 $67 = $27;
 $68 = $23;
 $69 = (($67) + ($68)|0);
 $28 = $69;
 $70 = $28;
 $71 = $24;
 $72 = (($70) + ($71)|0);
 $29 = $72;
 $73 = $7;
 $74 = (($73) + 3)|0;
 $75 = (($74>>>0) / 4)&-1;
 $30 = $75;
 $76 = $12;
 $77 = $30;
 $78 = (($76) + ($77)|0);
 $31 = $78;
 $79 = $31;
 $80 = $30;
 $81 = (($79) + ($80)|0);
 $32 = $81;
 $82 = $32;
 $83 = $30;
 $84 = (($82) + ($83)|0);
 $33 = $84;
 $85 = $12;
 $34 = $85;
 $86 = $31;
 $35 = $86;
 $87 = $32;
 $36 = $87;
 $88 = $33;
 $37 = $88;
 $89 = $9;
 $90 = $22;
 $91 = $23;
 $92 = (($90) + ($91))|0;
 $93 = $24;
 $94 = (($92) + ($93))|0;
 $95 = (($94) + 6)|0;
 $96 = (($89) - ($95))|0;
 $25 = $96;
 $97 = $25;
 $98 = $9;
 $99 = ($97>>>0)>($98>>>0);
 if ($99) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $100 = $26;
 $101 = $22;
 $102 = (_BIT_initDStream_273($18,$100,$101)|0);
 $17 = $102;
 $103 = $17;
 $104 = (_HUF_isError_304($103)|0);
 $105 = ($104|0)!=(0);
 if ($105) {
  $106 = $17;
  $5 = $106;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $107 = $27;
 $108 = $23;
 $109 = (_BIT_initDStream_273($19,$107,$108)|0);
 $17 = $109;
 $110 = $17;
 $111 = (_HUF_isError_304($110)|0);
 $112 = ($111|0)!=(0);
 if ($112) {
  $113 = $17;
  $5 = $113;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $114 = $28;
 $115 = $24;
 $116 = (_BIT_initDStream_273($20,$114,$115)|0);
 $17 = $116;
 $117 = $17;
 $118 = (_HUF_isError_304($117)|0);
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = $17;
  $5 = $120;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $121 = $29;
 $122 = $25;
 $123 = (_BIT_initDStream_273($21,$121,$122)|0);
 $17 = $123;
 $124 = $17;
 $125 = (_HUF_isError_304($124)|0);
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $17;
  $5 = $127;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $128 = (_BIT_reloadDStream_275($18)|0);
 $129 = (_BIT_reloadDStream_275($19)|0);
 $130 = $128 | $129;
 $131 = (_BIT_reloadDStream_275($20)|0);
 $132 = $130 | $131;
 $133 = (_BIT_reloadDStream_275($21)|0);
 $134 = $132 | $133;
 $38 = $134;
 while(1) {
  $135 = $38;
  $136 = ($135|0)==(0);
  if (!($136)) {
   break;
  }
  $137 = $37;
  $138 = $13;
  $139 = ((($138)) + -7|0);
  $140 = ($137>>>0)<($139>>>0);
  if (!($140)) {
   break;
  }
  $141 = (_MEM_64bits_311()|0);
  $142 = ($141|0)!=(0);
  if ($142) {
   $143 = $34;
   $144 = $15;
   $145 = $16;
   $146 = (_HUF_decodeSymbolX4_312($143,$18,$144,$145)|0);
   $147 = $34;
   $148 = (($147) + ($146)|0);
   $34 = $148;
  }
  $149 = (_MEM_64bits_311()|0);
  $150 = ($149|0)!=(0);
  if ($150) {
   $151 = $35;
   $152 = $15;
   $153 = $16;
   $154 = (_HUF_decodeSymbolX4_312($151,$19,$152,$153)|0);
   $155 = $35;
   $156 = (($155) + ($154)|0);
   $35 = $156;
  }
  $157 = (_MEM_64bits_311()|0);
  $158 = ($157|0)!=(0);
  if ($158) {
   $159 = $36;
   $160 = $15;
   $161 = $16;
   $162 = (_HUF_decodeSymbolX4_312($159,$20,$160,$161)|0);
   $163 = $36;
   $164 = (($163) + ($162)|0);
   $36 = $164;
  }
  $165 = (_MEM_64bits_311()|0);
  $166 = ($165|0)!=(0);
  if ($166) {
   $167 = $37;
   $168 = $15;
   $169 = $16;
   $170 = (_HUF_decodeSymbolX4_312($167,$21,$168,$169)|0);
   $171 = $37;
   $172 = (($171) + ($170)|0);
   $37 = $172;
  }
  (_MEM_64bits_311()|0);
  $173 = $34;
  $174 = $15;
  $175 = $16;
  $176 = (_HUF_decodeSymbolX4_312($173,$18,$174,$175)|0);
  $177 = $34;
  $178 = (($177) + ($176)|0);
  $34 = $178;
  (_MEM_64bits_311()|0);
  $179 = $35;
  $180 = $15;
  $181 = $16;
  $182 = (_HUF_decodeSymbolX4_312($179,$19,$180,$181)|0);
  $183 = $35;
  $184 = (($183) + ($182)|0);
  $35 = $184;
  (_MEM_64bits_311()|0);
  $185 = $36;
  $186 = $15;
  $187 = $16;
  $188 = (_HUF_decodeSymbolX4_312($185,$20,$186,$187)|0);
  $189 = $36;
  $190 = (($189) + ($188)|0);
  $36 = $190;
  (_MEM_64bits_311()|0);
  $191 = $37;
  $192 = $15;
  $193 = $16;
  $194 = (_HUF_decodeSymbolX4_312($191,$21,$192,$193)|0);
  $195 = $37;
  $196 = (($195) + ($194)|0);
  $37 = $196;
  $197 = (_MEM_64bits_311()|0);
  $198 = ($197|0)!=(0);
  if ($198) {
   $199 = $34;
   $200 = $15;
   $201 = $16;
   $202 = (_HUF_decodeSymbolX4_312($199,$18,$200,$201)|0);
   $203 = $34;
   $204 = (($203) + ($202)|0);
   $34 = $204;
  }
  $205 = (_MEM_64bits_311()|0);
  $206 = ($205|0)!=(0);
  if ($206) {
   $207 = $35;
   $208 = $15;
   $209 = $16;
   $210 = (_HUF_decodeSymbolX4_312($207,$19,$208,$209)|0);
   $211 = $35;
   $212 = (($211) + ($210)|0);
   $35 = $212;
  }
  $213 = (_MEM_64bits_311()|0);
  $214 = ($213|0)!=(0);
  if ($214) {
   $215 = $36;
   $216 = $15;
   $217 = $16;
   $218 = (_HUF_decodeSymbolX4_312($215,$20,$216,$217)|0);
   $219 = $36;
   $220 = (($219) + ($218)|0);
   $36 = $220;
  }
  $221 = (_MEM_64bits_311()|0);
  $222 = ($221|0)!=(0);
  if ($222) {
   $223 = $37;
   $224 = $15;
   $225 = $16;
   $226 = (_HUF_decodeSymbolX4_312($223,$21,$224,$225)|0);
   $227 = $37;
   $228 = (($227) + ($226)|0);
   $37 = $228;
  }
  $229 = $34;
  $230 = $15;
  $231 = $16;
  $232 = (_HUF_decodeSymbolX4_312($229,$18,$230,$231)|0);
  $233 = $34;
  $234 = (($233) + ($232)|0);
  $34 = $234;
  $235 = $35;
  $236 = $15;
  $237 = $16;
  $238 = (_HUF_decodeSymbolX4_312($235,$19,$236,$237)|0);
  $239 = $35;
  $240 = (($239) + ($238)|0);
  $35 = $240;
  $241 = $36;
  $242 = $15;
  $243 = $16;
  $244 = (_HUF_decodeSymbolX4_312($241,$20,$242,$243)|0);
  $245 = $36;
  $246 = (($245) + ($244)|0);
  $36 = $246;
  $247 = $37;
  $248 = $15;
  $249 = $16;
  $250 = (_HUF_decodeSymbolX4_312($247,$21,$248,$249)|0);
  $251 = $37;
  $252 = (($251) + ($250)|0);
  $37 = $252;
  $253 = (_BIT_reloadDStream_275($18)|0);
  $254 = (_BIT_reloadDStream_275($19)|0);
  $255 = $253 | $254;
  $256 = (_BIT_reloadDStream_275($20)|0);
  $257 = $255 | $256;
  $258 = (_BIT_reloadDStream_275($21)|0);
  $259 = $257 | $258;
  $38 = $259;
 }
 $260 = $34;
 $261 = $31;
 $262 = ($260>>>0)>($261>>>0);
 if ($262) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $263 = $35;
 $264 = $32;
 $265 = ($263>>>0)>($264>>>0);
 if ($265) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $266 = $36;
 $267 = $33;
 $268 = ($266>>>0)>($267>>>0);
 if ($268) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $269 = $34;
 $270 = $31;
 $271 = $15;
 $272 = $16;
 (_HUF_decodeStreamX4($269,$18,$270,$271,$272)|0);
 $273 = $35;
 $274 = $32;
 $275 = $15;
 $276 = $16;
 (_HUF_decodeStreamX4($273,$19,$274,$275,$276)|0);
 $277 = $36;
 $278 = $33;
 $279 = $15;
 $280 = $16;
 (_HUF_decodeStreamX4($277,$20,$278,$279,$280)|0);
 $281 = $37;
 $282 = $13;
 $283 = $15;
 $284 = $16;
 (_HUF_decodeStreamX4($281,$21,$282,$283,$284)|0);
 $285 = (_BIT_endOfDStream_277($18)|0);
 $286 = (_BIT_endOfDStream_277($19)|0);
 $287 = $285 & $286;
 $288 = (_BIT_endOfDStream_277($20)|0);
 $289 = $287 & $288;
 $290 = (_BIT_endOfDStream_277($21)|0);
 $291 = $289 & $290;
 $38 = $291;
 $292 = $38;
 $293 = ($292|0)!=(0);
 if ($293) {
  $294 = $7;
  $5 = $294;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 } else {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 return (0)|0;
}
function _MEM_64bits_311() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _HUF_decodeSymbolX4_312($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (_BIT_lookBitsFast_314($9,$10)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;HEAP8[$12+1>>0]=HEAP8[$15+1>>0]|0;
 $16 = $5;
 $17 = $6;
 $18 = $8;
 $19 = (($17) + ($18<<2)|0);
 $20 = ((($19)) + 2|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 _BIT_skipBits_287($16,$22);
 $23 = $6;
 $24 = $8;
 $25 = (($23) + ($24<<2)|0);
 $26 = ((($25)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 STACKTOP = sp;return ($28|0);
}
function _HUF_decodeStreamX4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $10 = $11;
 while(1) {
  $12 = $6;
  $13 = (_BIT_reloadDStream_275($12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $7;
  $17 = ((($16)) + -7|0);
  $18 = ($15>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = (_MEM_64bits_311()|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $5;
   $22 = $6;
   $23 = $8;
   $24 = $9;
   $25 = (_HUF_decodeSymbolX4_312($21,$22,$23,$24)|0);
   $26 = $5;
   $27 = (($26) + ($25)|0);
   $5 = $27;
  }
  (_MEM_64bits_311()|0);
  $28 = $5;
  $29 = $6;
  $30 = $8;
  $31 = $9;
  $32 = (_HUF_decodeSymbolX4_312($28,$29,$30,$31)|0);
  $33 = $5;
  $34 = (($33) + ($32)|0);
  $5 = $34;
  $35 = (_MEM_64bits_311()|0);
  $36 = ($35|0)!=(0);
  if ($36) {
   $37 = $5;
   $38 = $6;
   $39 = $8;
   $40 = $9;
   $41 = (_HUF_decodeSymbolX4_312($37,$38,$39,$40)|0);
   $42 = $5;
   $43 = (($42) + ($41)|0);
   $5 = $43;
  }
  $44 = $5;
  $45 = $6;
  $46 = $8;
  $47 = $9;
  $48 = (_HUF_decodeSymbolX4_312($44,$45,$46,$47)|0);
  $49 = $5;
  $50 = (($49) + ($48)|0);
  $5 = $50;
 }
 while(1) {
  $51 = $6;
  $52 = (_BIT_reloadDStream_275($51)|0);
  $53 = ($52|0)==(0);
  if (!($53)) {
   break;
  }
  $54 = $5;
  $55 = $7;
  $56 = ((($55)) + -2|0);
  $57 = ($54>>>0)<=($56>>>0);
  if (!($57)) {
   break;
  }
  $58 = $5;
  $59 = $6;
  $60 = $8;
  $61 = $9;
  $62 = (_HUF_decodeSymbolX4_312($58,$59,$60,$61)|0);
  $63 = $5;
  $64 = (($63) + ($62)|0);
  $5 = $64;
 }
 while(1) {
  $65 = $5;
  $66 = $7;
  $67 = ((($66)) + -2|0);
  $68 = ($65>>>0)<=($67>>>0);
  $69 = $5;
  if (!($68)) {
   break;
  }
  $70 = $6;
  $71 = $8;
  $72 = $9;
  $73 = (_HUF_decodeSymbolX4_312($69,$70,$71,$72)|0);
  $74 = $5;
  $75 = (($74) + ($73)|0);
  $5 = $75;
 }
 $76 = $7;
 $77 = ($69>>>0)<($76>>>0);
 if (!($77)) {
  $85 = $5;
  $86 = $10;
  $87 = $85;
  $88 = $86;
  $89 = (($87) - ($88))|0;
  STACKTOP = sp;return ($89|0);
 }
 $78 = $5;
 $79 = $6;
 $80 = $8;
 $81 = $9;
 $82 = (_HUF_decodeLastSymbolX4_313($78,$79,$80,$81)|0);
 $83 = $5;
 $84 = (($83) + ($82)|0);
 $5 = $84;
 $85 = $5;
 $86 = $10;
 $87 = $85;
 $88 = $86;
 $89 = (($87) - ($88))|0;
 STACKTOP = sp;return ($89|0);
}
function _HUF_decodeLastSymbolX4_313($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (_BIT_lookBitsFast_314($9,$10)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
 $16 = $6;
 $17 = $8;
 $18 = (($16) + ($17<<2)|0);
 $19 = ((($18)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(1);
 $23 = $5;
 if ($22) {
  $24 = $6;
  $25 = $8;
  $26 = (($24) + ($25<<2)|0);
  $27 = ((($26)) + 2|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  _BIT_skipBits_287($23,$29);
  STACKTOP = sp;return 1;
 }
 $30 = ((($23)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31>>>0)<(32);
 if (!($32)) {
  STACKTOP = sp;return 1;
 }
 $33 = $5;
 $34 = $6;
 $35 = $8;
 $36 = (($34) + ($35<<2)|0);
 $37 = ((($36)) + 2|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 _BIT_skipBits_287($33,$39);
 $40 = $5;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42>>>0)>(32);
 if (!($43)) {
  STACKTOP = sp;return 1;
 }
 $44 = $5;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = 32;
 STACKTOP = sp;return 1;
}
function _BIT_lookBitsFast_314($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $3;
 $13 = (32 - ($12))|0;
 $14 = $13 & 31;
 $15 = $11 >>> $14;
 STACKTOP = sp;return ($15|0);
}
function _HUF_readStats_315($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $25 = $13;
 $17 = $25;
 $26 = $14;
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $7 = -14;
  $173 = $7;
  STACKTOP = sp;return ($173|0);
 }
 $28 = $17;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $18 = $30;
 $31 = $18;
 $32 = ($31>>>0)>=(128);
 $33 = $18;
 L5: do {
  if ($32) {
   $34 = ($33>>>0)>=(242);
   $35 = $18;
   if ($34) {
    $36 = (($35) - 242)|0;
    $37 = (2592 + ($36<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $19 = $38;
    $39 = $8;
    $40 = $9;
    _memset(($39|0),1,($40|0))|0;
    $18 = 0;
    break;
   }
   $41 = (($35) - 127)|0;
   $19 = $41;
   $42 = $19;
   $43 = (($42) + 1)|0;
   $44 = (($43>>>0) / 2)&-1;
   $18 = $44;
   $45 = $18;
   $46 = (($45) + 1)|0;
   $47 = $14;
   $48 = ($46>>>0)>($47>>>0);
   if ($48) {
    $7 = -14;
    $173 = $7;
    STACKTOP = sp;return ($173|0);
   }
   $49 = $19;
   $50 = $9;
   $51 = ($49>>>0)>=($50>>>0);
   if ($51) {
    $7 = -15;
    $173 = $7;
    STACKTOP = sp;return ($173|0);
   }
   $52 = $17;
   $53 = ((($52)) + 1|0);
   $17 = $53;
   $20 = 0;
   while(1) {
    $54 = $20;
    $55 = $19;
    $56 = ($54>>>0)<($55>>>0);
    if (!($56)) {
     break L5;
    }
    $57 = $17;
    $58 = $20;
    $59 = (($58>>>0) / 2)&-1;
    $60 = (($57) + ($59)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = $62 >> 4;
    $64 = $63&255;
    $65 = $8;
    $66 = $20;
    $67 = (($65) + ($66)|0);
    HEAP8[$67>>0] = $64;
    $68 = $17;
    $69 = $20;
    $70 = (($69>>>0) / 2)&-1;
    $71 = (($68) + ($70)|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    $74 = $73 & 15;
    $75 = $74&255;
    $76 = $8;
    $77 = $20;
    $78 = (($77) + 1)|0;
    $79 = (($76) + ($78)|0);
    HEAP8[$79>>0] = $75;
    $80 = $20;
    $81 = (($80) + 2)|0;
    $20 = $81;
   }
  } else {
   $82 = (($33) + 1)|0;
   $83 = $14;
   $84 = ($82>>>0)>($83>>>0);
   if ($84) {
    $7 = -14;
    $173 = $7;
    STACKTOP = sp;return ($173|0);
   }
   $85 = $8;
   $86 = $9;
   $87 = (($86) - 1)|0;
   $88 = $17;
   $89 = ((($88)) + 1|0);
   $90 = $18;
   $91 = (_FSE_decompress_320($85,$87,$89,$90)|0);
   $19 = $91;
   $92 = $19;
   $93 = (_FSE_isError_300($92)|0);
   $94 = ($93|0)!=(0);
   if ($94) {
    $95 = $19;
    $7 = $95;
    $173 = $7;
    STACKTOP = sp;return ($173|0);
   }
  }
 } while(0);
 $96 = $10;
 dest=$96; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = 0;
 $20 = 0;
 while(1) {
  $97 = $20;
  $98 = $19;
  $99 = ($97>>>0)<($98>>>0);
  if (!($99)) {
   break;
  }
  $100 = $8;
  $101 = $20;
  $102 = (($100) + ($101)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = ($104|0)>=(16);
  if ($105) {
   label = 20;
   break;
  }
  $106 = $10;
  $107 = $8;
  $108 = $20;
  $109 = (($107) + ($108)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = (($106) + ($111<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + 1)|0;
  HEAP32[$112>>2] = $114;
  $115 = $8;
  $116 = $20;
  $117 = (($115) + ($116)|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $120 = 1 << $119;
  $121 = $120 >> 1;
  $122 = $15;
  $123 = (($122) + ($121))|0;
  $15 = $123;
  $124 = $20;
  $125 = (($124) + 1)|0;
  $20 = $125;
 }
 if ((label|0) == 20) {
  $7 = -15;
  $173 = $7;
  STACKTOP = sp;return ($173|0);
 }
 $126 = $15;
 $127 = ($126|0)==(0);
 if ($127) {
  $7 = -15;
  $173 = $7;
  STACKTOP = sp;return ($173|0);
 }
 $128 = $15;
 $129 = (_BIT_highbit32_295($128)|0);
 $130 = (($129) + 1)|0;
 $16 = $130;
 $131 = $16;
 $132 = ($131>>>0)>(16);
 if ($132) {
  $7 = -15;
  $173 = $7;
  STACKTOP = sp;return ($173|0);
 }
 $133 = $16;
 $134 = 1 << $133;
 $21 = $134;
 $135 = $21;
 $136 = $15;
 $137 = (($135) - ($136))|0;
 $22 = $137;
 $138 = $22;
 $139 = (_BIT_highbit32_295($138)|0);
 $140 = 1 << $139;
 $23 = $140;
 $141 = $22;
 $142 = (_BIT_highbit32_295($141)|0);
 $143 = (($142) + 1)|0;
 $24 = $143;
 $144 = $23;
 $145 = $22;
 $146 = ($144|0)!=($145|0);
 if ($146) {
  $7 = -15;
  $173 = $7;
  STACKTOP = sp;return ($173|0);
 }
 $147 = $24;
 $148 = $147&255;
 $149 = $8;
 $150 = $19;
 $151 = (($149) + ($150)|0);
 HEAP8[$151>>0] = $148;
 $152 = $10;
 $153 = $24;
 $154 = (($152) + ($153<<2)|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = (($155) + 1)|0;
 HEAP32[$154>>2] = $156;
 $157 = $10;
 $158 = ((($157)) + 4|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ($159>>>0)<(2);
 if (!($160)) {
  $161 = $10;
  $162 = ((($161)) + 4|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $163 & 1;
  $165 = ($164|0)!=(0);
  if (!($165)) {
   $166 = $19;
   $167 = (($166) + 1)|0;
   $168 = $11;
   HEAP32[$168>>2] = $167;
   $169 = $16;
   $170 = $12;
   HEAP32[$170>>2] = $169;
   $171 = $18;
   $172 = (($171) + 1)|0;
   $7 = $172;
   $173 = $7;
   STACKTOP = sp;return ($173|0);
  }
 }
 $7 = -15;
 $173 = $7;
 STACKTOP = sp;return ($173|0);
}
function _HUF_fillDTableX4_316($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $16 = sp + 44|0;
 $29 = sp + 144|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $30 = $15;
 $31 = $9;
 $32 = (($30) - ($31))|0;
 $17 = $32;
 $33 = $15;
 $34 = $14;
 $35 = (($33) - ($34))|0;
 $18 = $35;
 $36 = $13;
 dest=$16; src=$36; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $19 = 0;
 while(1) {
  $37 = $19;
  $38 = $11;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $40 = $10;
  $41 = $19;
  $42 = (($40) + ($41<<1)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $20 = $44;
  $45 = $10;
  $46 = $19;
  $47 = (($45) + ($46<<1)|0);
  $48 = ((($47)) + 1|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $21 = $50;
  $51 = $15;
  $52 = $21;
  $53 = (($51) - ($52))|0;
  $22 = $53;
  $54 = $21;
  $55 = (($16) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $23 = $56;
  $57 = $9;
  $58 = $22;
  $59 = (($57) - ($58))|0;
  $60 = 1 << $59;
  $24 = $60;
  $61 = $9;
  $62 = $22;
  $63 = (($61) - ($62))|0;
  $64 = $18;
  $65 = ($63>>>0)>=($64>>>0);
  L4: do {
   if ($65) {
    $66 = $22;
    $67 = $17;
    $68 = (($66) + ($67))|0;
    $26 = $68;
    $69 = $26;
    $70 = ($69|0)<(1);
    $$ = $70 ? 1 : $68;
    $26 = $$;
    $71 = $12;
    $72 = $26;
    $73 = (($71) + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $25 = $74;
    $75 = $8;
    $76 = $23;
    $77 = (($75) + ($76<<2)|0);
    $78 = $9;
    $79 = $22;
    $80 = (($78) - ($79))|0;
    $81 = $22;
    $82 = $13;
    $83 = $22;
    $84 = (($82) + (($83*68)|0)|0);
    $85 = $26;
    $86 = $10;
    $87 = $25;
    $88 = (($86) + ($87<<1)|0);
    $89 = $11;
    $90 = $25;
    $91 = (($89) - ($90))|0;
    $92 = $15;
    $93 = $20;
    _HUF_fillDTableX4Level2_317($77,$80,$81,$84,$85,$88,$91,$92,$93);
   } else {
    $94 = $23;
    $95 = $24;
    $96 = (($94) + ($95))|0;
    $28 = $96;
    $97 = $20;
    _MEM_writeLE16_318($29,$97);
    $98 = $22;
    $99 = $98&255;
    $100 = ((($29)) + 2|0);
    HEAP8[$100>>0] = $99;
    $101 = ((($29)) + 3|0);
    HEAP8[$101>>0] = 1;
    $102 = $23;
    $27 = $102;
    while(1) {
     $103 = $27;
     $104 = $28;
     $105 = ($103>>>0)<($104>>>0);
     if (!($105)) {
      break L4;
     }
     $106 = $8;
     $107 = $27;
     $108 = (($106) + ($107<<2)|0);
     ;HEAP16[$108>>1]=HEAP16[$29>>1]|0;HEAP16[$108+2>>1]=HEAP16[$29+2>>1]|0;
     $109 = $27;
     $110 = (($109) + 1)|0;
     $27 = $110;
    }
   }
  } while(0);
  $111 = $24;
  $112 = $21;
  $113 = (($16) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + ($111))|0;
  HEAP32[$113>>2] = $115;
  $116 = $19;
  $117 = (($116) + 1)|0;
  $19 = $117;
 }
 STACKTOP = sp;return;
}
function _HUF_fillDTableX4Level2_317($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $18 = sp + 140|0;
 $19 = sp + 40|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $30 = $12;
 dest=$19; src=$30; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $31 = $13;
 $32 = ($31|0)>(1);
 L1: do {
  if ($32) {
   $33 = $13;
   $34 = (($19) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $22 = $35;
   $36 = $17;
   _MEM_writeLE16_318($18,$36);
   $37 = $11;
   $38 = $37&255;
   $39 = ((($18)) + 2|0);
   HEAP8[$39>>0] = $38;
   $40 = ((($18)) + 3|0);
   HEAP8[$40>>0] = 1;
   $21 = 0;
   while(1) {
    $41 = $21;
    $42 = $22;
    $43 = ($41>>>0)<($42>>>0);
    if (!($43)) {
     break L1;
    }
    $44 = $9;
    $45 = $21;
    $46 = (($44) + ($45<<2)|0);
    ;HEAP16[$46>>1]=HEAP16[$18>>1]|0;HEAP16[$46+2>>1]=HEAP16[$18+2>>1]|0;
    $47 = $21;
    $48 = (($47) + 1)|0;
    $21 = $48;
   }
  }
 } while(0);
 $20 = 0;
 while(1) {
  $49 = $20;
  $50 = $15;
  $51 = ($49>>>0)<($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $14;
  $53 = $20;
  $54 = (($52) + ($53<<1)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $23 = $56;
  $57 = $14;
  $58 = $20;
  $59 = (($57) + ($58<<1)|0);
  $60 = ((($59)) + 1|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $24 = $62;
  $63 = $16;
  $64 = $24;
  $65 = (($63) - ($64))|0;
  $25 = $65;
  $66 = $10;
  $67 = $25;
  $68 = (($66) - ($67))|0;
  $69 = 1 << $68;
  $26 = $69;
  $70 = $24;
  $71 = (($19) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $27 = $72;
  $73 = $27;
  $28 = $73;
  $74 = $27;
  $75 = $26;
  $76 = (($74) + ($75))|0;
  $29 = $76;
  $77 = $17;
  $78 = $77&65535;
  $79 = $23;
  $80 = $79 << 8;
  $81 = (($78) + ($80))|0;
  $82 = $81&65535;
  _MEM_writeLE16_318($18,$82);
  $83 = $25;
  $84 = $11;
  $85 = (($83) + ($84))|0;
  $86 = $85&255;
  $87 = ((($18)) + 2|0);
  HEAP8[$87>>0] = $86;
  $88 = ((($18)) + 3|0);
  HEAP8[$88>>0] = 2;
  while(1) {
   $89 = $9;
   $90 = $28;
   $91 = (($90) + 1)|0;
   $28 = $91;
   $92 = (($89) + ($90<<2)|0);
   ;HEAP16[$92>>1]=HEAP16[$18>>1]|0;HEAP16[$92+2>>1]=HEAP16[$18+2>>1]|0;
   $93 = $28;
   $94 = $29;
   $95 = ($93>>>0)<($94>>>0);
   if (!($95)) {
    break;
   }
  }
  $96 = $26;
  $97 = $24;
  $98 = (($19) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + ($96))|0;
  HEAP32[$98>>2] = $100;
  $101 = $20;
  $102 = (($101) + 1)|0;
  $20 = $102;
 }
 STACKTOP = sp;return;
}
function _MEM_writeLE16_318($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_MEM_isLittleEndian_291()|0);
 $6 = ($5|0)!=(0);
 $7 = $2;
 if ($6) {
  $8 = $3;
  _MEM_write16_319($7,$8);
  STACKTOP = sp;return;
 } else {
  $4 = $7;
  $9 = $3;
  $10 = $9&255;
  $11 = $4;
  HEAP8[$11>>0] = $10;
  $12 = $3;
  $13 = $12&65535;
  $14 = $13 >> 8;
  $15 = $14&255;
  $16 = $4;
  $17 = ((($16)) + 1|0);
  HEAP8[$17>>0] = $15;
  STACKTOP = sp;return;
 }
}
function _MEM_write16_319($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $0;
 HEAP16[$3>>1] = $1;
 $4 = $2;
 ;HEAP8[$4>>0]=HEAP8[$3>>0]|0;HEAP8[$4+1>>0]=HEAP8[$3+1>>0]|0;
 STACKTOP = sp;return;
}
function _FSE_decompress_320($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16944|0);
 $11 = sp + 16432|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = $7;
 $9 = $16;
 $17 = $9;
 $10 = $17;
 HEAP32[$14>>2] = 255;
 $18 = $8;
 $19 = ($18>>>0)<(2);
 if ($19) {
  $4 = -14;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 }
 $20 = $9;
 $21 = $8;
 $22 = (_FSE_readNCount_299($11,$14,$13,$20,$21)|0);
 $15 = $22;
 $23 = $15;
 $24 = (_FSE_isError_300($23)|0);
 $25 = ($24|0)!=(0);
 $26 = $15;
 if ($25) {
  $4 = $26;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 }
 $27 = $8;
 $28 = ($26>>>0)>=($27>>>0);
 if ($28) {
  $4 = -14;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 }
 $29 = $15;
 $30 = $10;
 $31 = (($30) + ($29)|0);
 $10 = $31;
 $32 = $15;
 $33 = $8;
 $34 = (($33) - ($32))|0;
 $8 = $34;
 $35 = HEAP32[$14>>2]|0;
 $36 = HEAP32[$13>>2]|0;
 $37 = (_FSE_buildDTable_301($12,$11,$35,$36)|0);
 $15 = $37;
 $38 = $15;
 $39 = (_FSE_isError_300($38)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $15;
  $4 = $41;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 } else {
  $42 = $5;
  $43 = $6;
  $44 = $10;
  $45 = $8;
  $46 = (_FSE_decompress_usingDTable_321($42,$43,$44,$45,$12)|0);
  $4 = $46;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _FSE_decompress_usingDTable_321($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink1 = 0, $$sink10 = 0, $$sink11 = 0, $$sink12 = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $$sink5 = 0, $$sink7 = 0, $$sink8 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $16 = sp + 128|0;
 $17 = sp + 120|0;
 $18 = sp + 112|0;
 $31 = sp + 48|0;
 $32 = sp + 40|0;
 $33 = sp + 32|0;
 $41 = sp + 188|0;
 $36 = $0;
 $37 = $1;
 $38 = $2;
 $39 = $3;
 $40 = $4;
 $43 = $40;
 ;HEAP16[$41>>1]=HEAP16[$43>>1]|0;HEAP16[$41+2>>1]=HEAP16[$43+2>>1]|0;
 $44 = ((($41)) + 2|0);
 $45 = HEAP16[$44>>1]|0;
 $46 = $45&65535;
 $42 = $46;
 $47 = $42;
 $48 = ($47|0)!=(0);
 $49 = $36;
 $50 = $37;
 $51 = $38;
 $52 = $39;
 $53 = $40;
 if ($48) {
  $21 = $49;
  $22 = $50;
  $23 = $51;
  $24 = $52;
  $25 = $53;
  $26 = 1;
  $54 = $21;
  $27 = $54;
  $55 = $27;
  $28 = $55;
  $56 = $28;
  $57 = $22;
  $58 = (($56) + ($57)|0);
  $29 = $58;
  $59 = $29;
  $60 = ((($59)) + -3|0);
  $30 = $60;
  $61 = $23;
  $62 = $24;
  $63 = (_BIT_initDStream_273($31,$61,$62)|0);
  $34 = $63;
  $64 = $34;
  $65 = (_FSE_isError_300($64)|0);
  $66 = ($65|0)!=(0);
  do {
   if ($66) {
    $67 = $34;
    $20 = $67;
   } else {
    $68 = $25;
    _FSE_initDState_274($32,$31,$68);
    $69 = $25;
    _FSE_initDState_274($33,$31,$69);
    while(1) {
     $70 = (_BIT_reloadDStream_275($31)|0);
     $71 = ($70|0)==(0);
     if (!($71)) {
      break;
     }
     $72 = $28;
     $73 = $30;
     $74 = ($72>>>0)<($73>>>0);
     if (!($74)) {
      break;
     }
     $75 = $26;
     $76 = ($75|0)!=(0);
     if ($76) {
      $77 = (_FSE_decodeSymbolFast_322($32,$31)|0);
      $$sink = $77;
     } else {
      $78 = (_FSE_decodeSymbol_283($32,$31)|0);
      $$sink = $78;
     }
     $79 = $$sink&255;
     $80 = $79&255;
     $81 = $28;
     HEAP8[$81>>0] = $80;
     $82 = $26;
     $83 = ($82|0)!=(0);
     if ($83) {
      $84 = (_FSE_decodeSymbolFast_322($33,$31)|0);
      $$sink1 = $84;
     } else {
      $85 = (_FSE_decodeSymbol_283($33,$31)|0);
      $$sink1 = $85;
     }
     $86 = $$sink1&255;
     $87 = $86&255;
     $88 = $28;
     $89 = ((($88)) + 1|0);
     HEAP8[$89>>0] = $87;
     $90 = (_BIT_reloadDStream_275($31)|0);
     $91 = ($90>>>0)>(0);
     if ($91) {
      label = 14;
      break;
     }
     $94 = $26;
     $95 = ($94|0)!=(0);
     if ($95) {
      $96 = (_FSE_decodeSymbolFast_322($32,$31)|0);
      $$sink2 = $96;
     } else {
      $97 = (_FSE_decodeSymbol_283($32,$31)|0);
      $$sink2 = $97;
     }
     $98 = $$sink2&255;
     $99 = $98&255;
     $100 = $28;
     $101 = ((($100)) + 2|0);
     HEAP8[$101>>0] = $99;
     $102 = $26;
     $103 = ($102|0)!=(0);
     if ($103) {
      $104 = (_FSE_decodeSymbolFast_322($33,$31)|0);
      $$sink3 = $104;
     } else {
      $105 = (_FSE_decodeSymbol_283($33,$31)|0);
      $$sink3 = $105;
     }
     $106 = $$sink3&255;
     $107 = $106&255;
     $108 = $28;
     $109 = ((($108)) + 3|0);
     HEAP8[$109>>0] = $107;
     $110 = $28;
     $111 = ((($110)) + 4|0);
     $28 = $111;
    }
    if ((label|0) == 14) {
     $92 = $28;
     $93 = ((($92)) + 2|0);
     $28 = $93;
    }
    while(1) {
     $112 = (_BIT_reloadDStream_275($31)|0);
     $113 = ($112>>>0)>(2);
     if ($113) {
      break;
     }
     $114 = $28;
     $115 = $29;
     $116 = ($114|0)==($115|0);
     if ($116) {
      break;
     }
     $117 = (_BIT_endOfDStream_277($31)|0);
     $118 = ($117|0)!=(0);
     if ($118) {
      $119 = $26;
      $120 = ($119|0)!=(0);
      if ($120) {
       break;
      }
      $121 = (_FSE_endOfDState($32)|0);
      $122 = ($121|0)!=(0);
      if ($122) {
       break;
      }
     }
     $123 = $26;
     $124 = ($123|0)!=(0);
     if ($124) {
      $125 = (_FSE_decodeSymbolFast_322($32,$31)|0);
      $$sink4 = $125;
     } else {
      $126 = (_FSE_decodeSymbol_283($32,$31)|0);
      $$sink4 = $126;
     }
     $127 = $$sink4&255;
     $128 = $127&255;
     $129 = $28;
     $130 = ((($129)) + 1|0);
     $28 = $130;
     HEAP8[$129>>0] = $128;
     $131 = (_BIT_reloadDStream_275($31)|0);
     $132 = ($131>>>0)>(2);
     if ($132) {
      break;
     }
     $133 = $28;
     $134 = $29;
     $135 = ($133|0)==($134|0);
     if ($135) {
      break;
     }
     $136 = (_BIT_endOfDStream_277($31)|0);
     $137 = ($136|0)!=(0);
     if ($137) {
      $138 = $26;
      $139 = ($138|0)!=(0);
      if ($139) {
       break;
      }
      $140 = (_FSE_endOfDState($33)|0);
      $141 = ($140|0)!=(0);
      if ($141) {
       break;
      }
     }
     $142 = $26;
     $143 = ($142|0)!=(0);
     if ($143) {
      $144 = (_FSE_decodeSymbolFast_322($33,$31)|0);
      $$sink5 = $144;
     } else {
      $145 = (_FSE_decodeSymbol_283($33,$31)|0);
      $$sink5 = $145;
     }
     $146 = $$sink5&255;
     $147 = $146&255;
     $148 = $28;
     $149 = ((($148)) + 1|0);
     $28 = $149;
     HEAP8[$148>>0] = $147;
    }
    $150 = (_BIT_endOfDStream_277($31)|0);
    $151 = ($150|0)!=(0);
    if ($151) {
     $152 = (_FSE_endOfDState($32)|0);
     $153 = ($152|0)!=(0);
     if ($153) {
      $154 = (_FSE_endOfDState($33)|0);
      $155 = ($154|0)!=(0);
      if ($155) {
       $156 = $28;
       $157 = $27;
       $158 = $156;
       $159 = $157;
       $160 = (($158) - ($159))|0;
       $20 = $160;
       break;
      }
     }
    }
    $161 = $28;
    $162 = $29;
    $163 = ($161|0)==($162|0);
    if ($163) {
     $20 = -13;
     break;
    } else {
     $20 = -15;
     break;
    }
   }
  } while(0);
  $164 = $20;
  $35 = $164;
  $276 = $35;
  STACKTOP = sp;return ($276|0);
 } else {
  $6 = $49;
  $7 = $50;
  $8 = $51;
  $9 = $52;
  $10 = $53;
  $11 = 0;
  $165 = $6;
  $12 = $165;
  $166 = $12;
  $13 = $166;
  $167 = $13;
  $168 = $7;
  $169 = (($167) + ($168)|0);
  $14 = $169;
  $170 = $14;
  $171 = ((($170)) + -3|0);
  $15 = $171;
  $172 = $8;
  $173 = $9;
  $174 = (_BIT_initDStream_273($16,$172,$173)|0);
  $19 = $174;
  $175 = $19;
  $176 = (_FSE_isError_300($175)|0);
  $177 = ($176|0)!=(0);
  do {
   if ($177) {
    $178 = $19;
    $5 = $178;
   } else {
    $179 = $10;
    _FSE_initDState_274($17,$16,$179);
    $180 = $10;
    _FSE_initDState_274($18,$16,$180);
    while(1) {
     $181 = (_BIT_reloadDStream_275($16)|0);
     $182 = ($181|0)==(0);
     if (!($182)) {
      break;
     }
     $183 = $13;
     $184 = $15;
     $185 = ($183>>>0)<($184>>>0);
     if (!($185)) {
      break;
     }
     $186 = $11;
     $187 = ($186|0)!=(0);
     if ($187) {
      $188 = (_FSE_decodeSymbolFast_322($17,$16)|0);
      $$sink7 = $188;
     } else {
      $189 = (_FSE_decodeSymbol_283($17,$16)|0);
      $$sink7 = $189;
     }
     $190 = $$sink7&255;
     $191 = $190&255;
     $192 = $13;
     HEAP8[$192>>0] = $191;
     $193 = $11;
     $194 = ($193|0)!=(0);
     if ($194) {
      $195 = (_FSE_decodeSymbolFast_322($18,$16)|0);
      $$sink8 = $195;
     } else {
      $196 = (_FSE_decodeSymbol_283($18,$16)|0);
      $$sink8 = $196;
     }
     $197 = $$sink8&255;
     $198 = $197&255;
     $199 = $13;
     $200 = ((($199)) + 1|0);
     HEAP8[$200>>0] = $198;
     $201 = (_BIT_reloadDStream_275($16)|0);
     $202 = ($201>>>0)>(0);
     if ($202) {
      label = 59;
      break;
     }
     $205 = $11;
     $206 = ($205|0)!=(0);
     if ($206) {
      $207 = (_FSE_decodeSymbolFast_322($17,$16)|0);
      $$sink9 = $207;
     } else {
      $208 = (_FSE_decodeSymbol_283($17,$16)|0);
      $$sink9 = $208;
     }
     $209 = $$sink9&255;
     $210 = $209&255;
     $211 = $13;
     $212 = ((($211)) + 2|0);
     HEAP8[$212>>0] = $210;
     $213 = $11;
     $214 = ($213|0)!=(0);
     if ($214) {
      $215 = (_FSE_decodeSymbolFast_322($18,$16)|0);
      $$sink10 = $215;
     } else {
      $216 = (_FSE_decodeSymbol_283($18,$16)|0);
      $$sink10 = $216;
     }
     $217 = $$sink10&255;
     $218 = $217&255;
     $219 = $13;
     $220 = ((($219)) + 3|0);
     HEAP8[$220>>0] = $218;
     $221 = $13;
     $222 = ((($221)) + 4|0);
     $13 = $222;
    }
    if ((label|0) == 59) {
     $203 = $13;
     $204 = ((($203)) + 2|0);
     $13 = $204;
    }
    while(1) {
     $223 = (_BIT_reloadDStream_275($16)|0);
     $224 = ($223>>>0)>(2);
     if ($224) {
      break;
     }
     $225 = $13;
     $226 = $14;
     $227 = ($225|0)==($226|0);
     if ($227) {
      break;
     }
     $228 = (_BIT_endOfDStream_277($16)|0);
     $229 = ($228|0)!=(0);
     if ($229) {
      $230 = $11;
      $231 = ($230|0)!=(0);
      if ($231) {
       break;
      }
      $232 = (_FSE_endOfDState($17)|0);
      $233 = ($232|0)!=(0);
      if ($233) {
       break;
      }
     }
     $234 = $11;
     $235 = ($234|0)!=(0);
     if ($235) {
      $236 = (_FSE_decodeSymbolFast_322($17,$16)|0);
      $$sink11 = $236;
     } else {
      $237 = (_FSE_decodeSymbol_283($17,$16)|0);
      $$sink11 = $237;
     }
     $238 = $$sink11&255;
     $239 = $238&255;
     $240 = $13;
     $241 = ((($240)) + 1|0);
     $13 = $241;
     HEAP8[$240>>0] = $239;
     $242 = (_BIT_reloadDStream_275($16)|0);
     $243 = ($242>>>0)>(2);
     if ($243) {
      break;
     }
     $244 = $13;
     $245 = $14;
     $246 = ($244|0)==($245|0);
     if ($246) {
      break;
     }
     $247 = (_BIT_endOfDStream_277($16)|0);
     $248 = ($247|0)!=(0);
     if ($248) {
      $249 = $11;
      $250 = ($249|0)!=(0);
      if ($250) {
       break;
      }
      $251 = (_FSE_endOfDState($18)|0);
      $252 = ($251|0)!=(0);
      if ($252) {
       break;
      }
     }
     $253 = $11;
     $254 = ($253|0)!=(0);
     if ($254) {
      $255 = (_FSE_decodeSymbolFast_322($18,$16)|0);
      $$sink12 = $255;
     } else {
      $256 = (_FSE_decodeSymbol_283($18,$16)|0);
      $$sink12 = $256;
     }
     $257 = $$sink12&255;
     $258 = $257&255;
     $259 = $13;
     $260 = ((($259)) + 1|0);
     $13 = $260;
     HEAP8[$259>>0] = $258;
    }
    $261 = (_BIT_endOfDStream_277($16)|0);
    $262 = ($261|0)!=(0);
    if ($262) {
     $263 = (_FSE_endOfDState($17)|0);
     $264 = ($263|0)!=(0);
     if ($264) {
      $265 = (_FSE_endOfDState($18)|0);
      $266 = ($265|0)!=(0);
      if ($266) {
       $267 = $13;
       $268 = $12;
       $269 = $267;
       $270 = $268;
       $271 = (($269) - ($270))|0;
       $5 = $271;
       break;
      }
     }
    }
    $272 = $13;
    $273 = $14;
    $274 = ($272|0)==($273|0);
    if ($274) {
     $5 = -13;
     break;
    } else {
     $5 = -15;
     break;
    }
   }
  } while(0);
  $275 = $5;
  $35 = $275;
  $276 = $35;
  STACKTOP = sp;return ($276|0);
 }
 return (0)|0;
}
function _FSE_decodeSymbolFast_322($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$13>>1]|0;HEAP16[$4+2>>1]=HEAP16[$13+2>>1]|0;
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $5 = $16;
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $3;
 $20 = $5;
 $21 = (_BIT_readBitsFast_323($19,$20)|0);
 $7 = $21;
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = $7;
 $25 = (($23) + ($24))|0;
 $26 = $2;
 HEAP32[$26>>2] = $25;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _FSE_endOfDState($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _BIT_readBitsFast_323($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BIT_lookBitsFast_314($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BIT_skipBits_287($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _HUF_readDTableX2_324($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $7 = sp + 136|0;
 $8 = sp + 44|0;
 $9 = sp + 40|0;
 $11 = sp + 32|0;
 $20 = sp + 128|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$9>>2] = 0;
 HEAP32[$11>>2] = 0;
 $21 = $4;
 $22 = ((($21)) + 2|0);
 $14 = $22;
 $23 = $14;
 $15 = $23;
 $24 = $5;
 $25 = $6;
 $26 = (_HUF_readStats_315($7,256,$8,$11,$9,$24,$25)|0);
 $10 = $26;
 $27 = $10;
 $28 = (_HUF_isError_304($27)|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $10;
  $3 = $30;
  $97 = $3;
  STACKTOP = sp;return ($97|0);
 }
 $31 = HEAP32[$9>>2]|0;
 $32 = $4;
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = ($31>>>0)>($34>>>0);
 if ($35) {
  $3 = -17;
  $97 = $3;
  STACKTOP = sp;return ($97|0);
 }
 $36 = HEAP32[$9>>2]|0;
 $37 = $36&65535;
 $38 = $4;
 HEAP16[$38>>1] = $37;
 $13 = 0;
 $12 = 1;
 while(1) {
  $39 = $12;
  $40 = HEAP32[$9>>2]|0;
  $41 = ($39>>>0)<=($40>>>0);
  if (!($41)) {
   break;
  }
  $42 = $13;
  $16 = $42;
  $43 = $12;
  $44 = (($8) + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $12;
  $47 = (($46) - 1)|0;
  $48 = $45 << $47;
  $49 = $13;
  $50 = (($49) + ($48))|0;
  $13 = $50;
  $51 = $16;
  $52 = $12;
  $53 = (($8) + ($52<<2)|0);
  HEAP32[$53>>2] = $51;
  $54 = $12;
  $55 = (($54) + 1)|0;
  $12 = $55;
 }
 $12 = 0;
 while(1) {
  $56 = $12;
  $57 = HEAP32[$11>>2]|0;
  $58 = ($56>>>0)<($57>>>0);
  if (!($58)) {
   break;
  }
  $59 = $12;
  $60 = (($7) + ($59)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $17 = $62;
  $63 = $17;
  $64 = 1 << $63;
  $65 = $64 >> 1;
  $18 = $65;
  $66 = $12;
  $67 = $66&255;
  HEAP8[$20>>0] = $67;
  $68 = HEAP32[$9>>2]|0;
  $69 = (($68) + 1)|0;
  $70 = $17;
  $71 = (($69) - ($70))|0;
  $72 = $71&255;
  $73 = ((($20)) + 1|0);
  HEAP8[$73>>0] = $72;
  $74 = $17;
  $75 = (($8) + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $19 = $76;
  while(1) {
   $77 = $19;
   $78 = $17;
   $79 = (($8) + ($78<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $18;
   $82 = (($80) + ($81))|0;
   $83 = ($77>>>0)<($82>>>0);
   if (!($83)) {
    break;
   }
   $84 = $15;
   $85 = $19;
   $86 = (($84) + ($85<<1)|0);
   ;HEAP8[$86>>0]=HEAP8[$20>>0]|0;HEAP8[$86+1>>0]=HEAP8[$20+1>>0]|0;
   $87 = $19;
   $88 = (($87) + 1)|0;
   $19 = $88;
  }
  $89 = $18;
  $90 = $17;
  $91 = (($8) + ($90<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + ($89))|0;
  HEAP32[$91>>2] = $93;
  $94 = $12;
  $95 = (($94) + 1)|0;
  $12 = $95;
 }
 $96 = $10;
 $3 = $96;
 $97 = $3;
 STACKTOP = sp;return ($97|0);
}
function _HUF_decompress4X2_usingDTable_325($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $18 = sp + 120|0;
 $19 = sp + 104|0;
 $20 = sp + 88|0;
 $21 = sp + 72|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $39 = $9;
 $40 = ($39>>>0)<(10);
 if ($40) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $41 = $8;
 $11 = $41;
 $42 = $6;
 $12 = $42;
 $43 = $12;
 $44 = $7;
 $45 = (($43) + ($44)|0);
 $13 = $45;
 $46 = $10;
 $14 = $46;
 $47 = $14;
 $48 = ((($47)) + 2|0);
 $15 = $48;
 $49 = $10;
 $50 = HEAP16[$49>>1]|0;
 $51 = $50&65535;
 $16 = $51;
 $52 = $11;
 $53 = (_MEM_readLE16_296($52)|0);
 $54 = $53&65535;
 $22 = $54;
 $55 = $11;
 $56 = ((($55)) + 2|0);
 $57 = (_MEM_readLE16_296($56)|0);
 $58 = $57&65535;
 $23 = $58;
 $59 = $11;
 $60 = ((($59)) + 4|0);
 $61 = (_MEM_readLE16_296($60)|0);
 $62 = $61&65535;
 $24 = $62;
 $63 = $11;
 $64 = ((($63)) + 6|0);
 $26 = $64;
 $65 = $26;
 $66 = $22;
 $67 = (($65) + ($66)|0);
 $27 = $67;
 $68 = $27;
 $69 = $23;
 $70 = (($68) + ($69)|0);
 $28 = $70;
 $71 = $28;
 $72 = $24;
 $73 = (($71) + ($72)|0);
 $29 = $73;
 $74 = $7;
 $75 = (($74) + 3)|0;
 $76 = (($75>>>0) / 4)&-1;
 $30 = $76;
 $77 = $12;
 $78 = $30;
 $79 = (($77) + ($78)|0);
 $31 = $79;
 $80 = $31;
 $81 = $30;
 $82 = (($80) + ($81)|0);
 $32 = $82;
 $83 = $32;
 $84 = $30;
 $85 = (($83) + ($84)|0);
 $33 = $85;
 $86 = $12;
 $34 = $86;
 $87 = $31;
 $35 = $87;
 $88 = $32;
 $36 = $88;
 $89 = $33;
 $37 = $89;
 $90 = $9;
 $91 = $22;
 $92 = $23;
 $93 = (($91) + ($92))|0;
 $94 = $24;
 $95 = (($93) + ($94))|0;
 $96 = (($95) + 6)|0;
 $97 = (($90) - ($96))|0;
 $25 = $97;
 $98 = $25;
 $99 = $9;
 $100 = ($98>>>0)>($99>>>0);
 if ($100) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $101 = $26;
 $102 = $22;
 $103 = (_BIT_initDStream_273($18,$101,$102)|0);
 $17 = $103;
 $104 = $17;
 $105 = (_HUF_isError_304($104)|0);
 $106 = ($105|0)!=(0);
 if ($106) {
  $107 = $17;
  $5 = $107;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $108 = $27;
 $109 = $23;
 $110 = (_BIT_initDStream_273($19,$108,$109)|0);
 $17 = $110;
 $111 = $17;
 $112 = (_HUF_isError_304($111)|0);
 $113 = ($112|0)!=(0);
 if ($113) {
  $114 = $17;
  $5 = $114;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $115 = $28;
 $116 = $24;
 $117 = (_BIT_initDStream_273($20,$115,$116)|0);
 $17 = $117;
 $118 = $17;
 $119 = (_HUF_isError_304($118)|0);
 $120 = ($119|0)!=(0);
 if ($120) {
  $121 = $17;
  $5 = $121;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $122 = $29;
 $123 = $25;
 $124 = (_BIT_initDStream_273($21,$122,$123)|0);
 $17 = $124;
 $125 = $17;
 $126 = (_HUF_isError_304($125)|0);
 $127 = ($126|0)!=(0);
 if ($127) {
  $128 = $17;
  $5 = $128;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $129 = (_BIT_reloadDStream_275($18)|0);
 $130 = (_BIT_reloadDStream_275($19)|0);
 $131 = $129 | $130;
 $132 = (_BIT_reloadDStream_275($20)|0);
 $133 = $131 | $132;
 $134 = (_BIT_reloadDStream_275($21)|0);
 $135 = $133 | $134;
 $38 = $135;
 while(1) {
  $136 = $38;
  $137 = ($136|0)==(0);
  if (!($137)) {
   break;
  }
  $138 = $37;
  $139 = $13;
  $140 = ((($139)) + -7|0);
  $141 = ($138>>>0)<($140>>>0);
  if (!($141)) {
   break;
  }
  $142 = (_MEM_64bits_311()|0);
  $143 = ($142|0)!=(0);
  if ($143) {
   $144 = $15;
   $145 = $16;
   $146 = (_HUF_decodeSymbolX2_326($18,$144,$145)|0);
   $147 = $34;
   $148 = ((($147)) + 1|0);
   $34 = $148;
   HEAP8[$147>>0] = $146;
  }
  $149 = (_MEM_64bits_311()|0);
  $150 = ($149|0)!=(0);
  if ($150) {
   $151 = $15;
   $152 = $16;
   $153 = (_HUF_decodeSymbolX2_326($19,$151,$152)|0);
   $154 = $35;
   $155 = ((($154)) + 1|0);
   $35 = $155;
   HEAP8[$154>>0] = $153;
  }
  $156 = (_MEM_64bits_311()|0);
  $157 = ($156|0)!=(0);
  if ($157) {
   $158 = $15;
   $159 = $16;
   $160 = (_HUF_decodeSymbolX2_326($20,$158,$159)|0);
   $161 = $36;
   $162 = ((($161)) + 1|0);
   $36 = $162;
   HEAP8[$161>>0] = $160;
  }
  $163 = (_MEM_64bits_311()|0);
  $164 = ($163|0)!=(0);
  if ($164) {
   $165 = $15;
   $166 = $16;
   $167 = (_HUF_decodeSymbolX2_326($21,$165,$166)|0);
   $168 = $37;
   $169 = ((($168)) + 1|0);
   $37 = $169;
   HEAP8[$168>>0] = $167;
  }
  (_MEM_64bits_311()|0);
  $170 = $15;
  $171 = $16;
  $172 = (_HUF_decodeSymbolX2_326($18,$170,$171)|0);
  $173 = $34;
  $174 = ((($173)) + 1|0);
  $34 = $174;
  HEAP8[$173>>0] = $172;
  (_MEM_64bits_311()|0);
  $175 = $15;
  $176 = $16;
  $177 = (_HUF_decodeSymbolX2_326($19,$175,$176)|0);
  $178 = $35;
  $179 = ((($178)) + 1|0);
  $35 = $179;
  HEAP8[$178>>0] = $177;
  (_MEM_64bits_311()|0);
  $180 = $15;
  $181 = $16;
  $182 = (_HUF_decodeSymbolX2_326($20,$180,$181)|0);
  $183 = $36;
  $184 = ((($183)) + 1|0);
  $36 = $184;
  HEAP8[$183>>0] = $182;
  (_MEM_64bits_311()|0);
  $185 = $15;
  $186 = $16;
  $187 = (_HUF_decodeSymbolX2_326($21,$185,$186)|0);
  $188 = $37;
  $189 = ((($188)) + 1|0);
  $37 = $189;
  HEAP8[$188>>0] = $187;
  $190 = (_MEM_64bits_311()|0);
  $191 = ($190|0)!=(0);
  if ($191) {
   $192 = $15;
   $193 = $16;
   $194 = (_HUF_decodeSymbolX2_326($18,$192,$193)|0);
   $195 = $34;
   $196 = ((($195)) + 1|0);
   $34 = $196;
   HEAP8[$195>>0] = $194;
  }
  $197 = (_MEM_64bits_311()|0);
  $198 = ($197|0)!=(0);
  if ($198) {
   $199 = $15;
   $200 = $16;
   $201 = (_HUF_decodeSymbolX2_326($19,$199,$200)|0);
   $202 = $35;
   $203 = ((($202)) + 1|0);
   $35 = $203;
   HEAP8[$202>>0] = $201;
  }
  $204 = (_MEM_64bits_311()|0);
  $205 = ($204|0)!=(0);
  if ($205) {
   $206 = $15;
   $207 = $16;
   $208 = (_HUF_decodeSymbolX2_326($20,$206,$207)|0);
   $209 = $36;
   $210 = ((($209)) + 1|0);
   $36 = $210;
   HEAP8[$209>>0] = $208;
  }
  $211 = (_MEM_64bits_311()|0);
  $212 = ($211|0)!=(0);
  if ($212) {
   $213 = $15;
   $214 = $16;
   $215 = (_HUF_decodeSymbolX2_326($21,$213,$214)|0);
   $216 = $37;
   $217 = ((($216)) + 1|0);
   $37 = $217;
   HEAP8[$216>>0] = $215;
  }
  $218 = $15;
  $219 = $16;
  $220 = (_HUF_decodeSymbolX2_326($18,$218,$219)|0);
  $221 = $34;
  $222 = ((($221)) + 1|0);
  $34 = $222;
  HEAP8[$221>>0] = $220;
  $223 = $15;
  $224 = $16;
  $225 = (_HUF_decodeSymbolX2_326($19,$223,$224)|0);
  $226 = $35;
  $227 = ((($226)) + 1|0);
  $35 = $227;
  HEAP8[$226>>0] = $225;
  $228 = $15;
  $229 = $16;
  $230 = (_HUF_decodeSymbolX2_326($20,$228,$229)|0);
  $231 = $36;
  $232 = ((($231)) + 1|0);
  $36 = $232;
  HEAP8[$231>>0] = $230;
  $233 = $15;
  $234 = $16;
  $235 = (_HUF_decodeSymbolX2_326($21,$233,$234)|0);
  $236 = $37;
  $237 = ((($236)) + 1|0);
  $37 = $237;
  HEAP8[$236>>0] = $235;
  $238 = (_BIT_reloadDStream_275($18)|0);
  $239 = (_BIT_reloadDStream_275($19)|0);
  $240 = $238 | $239;
  $241 = (_BIT_reloadDStream_275($20)|0);
  $242 = $240 | $241;
  $243 = (_BIT_reloadDStream_275($21)|0);
  $244 = $242 | $243;
  $38 = $244;
 }
 $245 = $34;
 $246 = $31;
 $247 = ($245>>>0)>($246>>>0);
 if ($247) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $248 = $35;
 $249 = $32;
 $250 = ($248>>>0)>($249>>>0);
 if ($250) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $251 = $36;
 $252 = $33;
 $253 = ($251>>>0)>($252>>>0);
 if ($253) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $254 = $34;
 $255 = $31;
 $256 = $15;
 $257 = $16;
 (_HUF_decodeStreamX2($254,$18,$255,$256,$257)|0);
 $258 = $35;
 $259 = $32;
 $260 = $15;
 $261 = $16;
 (_HUF_decodeStreamX2($258,$19,$259,$260,$261)|0);
 $262 = $36;
 $263 = $33;
 $264 = $15;
 $265 = $16;
 (_HUF_decodeStreamX2($262,$20,$263,$264,$265)|0);
 $266 = $37;
 $267 = $13;
 $268 = $15;
 $269 = $16;
 (_HUF_decodeStreamX2($266,$21,$267,$268,$269)|0);
 $270 = (_BIT_endOfDStream_277($18)|0);
 $271 = (_BIT_endOfDStream_277($19)|0);
 $272 = $270 & $271;
 $273 = (_BIT_endOfDStream_277($20)|0);
 $274 = $272 & $273;
 $275 = (_BIT_endOfDStream_277($21)|0);
 $276 = $274 & $275;
 $38 = $276;
 $277 = $38;
 $278 = ($277|0)!=(0);
 if ($278) {
  $279 = $7;
  $5 = $279;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 } else {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 return (0)|0;
}
function _HUF_decodeSymbolX2_326($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $5;
 $10 = (_BIT_lookBitsFast_314($8,$9)|0);
 $6 = $10;
 $11 = $4;
 $12 = $6;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP8[$13>>0]|0;
 $7 = $14;
 $15 = $3;
 $16 = $4;
 $17 = $6;
 $18 = (($16) + ($17<<1)|0);
 $19 = ((($18)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 _BIT_skipBits_287($15,$21);
 $22 = $7;
 STACKTOP = sp;return ($22|0);
}
function _HUF_decodeStreamX2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $10 = $11;
 while(1) {
  $12 = $6;
  $13 = (_BIT_reloadDStream_275($12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $7;
  $17 = ((($16)) + -4|0);
  $18 = ($15>>>0)<=($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = (_MEM_64bits_311()|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $6;
   $22 = $8;
   $23 = $9;
   $24 = (_HUF_decodeSymbolX2_326($21,$22,$23)|0);
   $25 = $5;
   $26 = ((($25)) + 1|0);
   $5 = $26;
   HEAP8[$25>>0] = $24;
  }
  (_MEM_64bits_311()|0);
  $27 = $6;
  $28 = $8;
  $29 = $9;
  $30 = (_HUF_decodeSymbolX2_326($27,$28,$29)|0);
  $31 = $5;
  $32 = ((($31)) + 1|0);
  $5 = $32;
  HEAP8[$31>>0] = $30;
  $33 = (_MEM_64bits_311()|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $6;
   $36 = $8;
   $37 = $9;
   $38 = (_HUF_decodeSymbolX2_326($35,$36,$37)|0);
   $39 = $5;
   $40 = ((($39)) + 1|0);
   $5 = $40;
   HEAP8[$39>>0] = $38;
  }
  $41 = $6;
  $42 = $8;
  $43 = $9;
  $44 = (_HUF_decodeSymbolX2_326($41,$42,$43)|0);
  $45 = $5;
  $46 = ((($45)) + 1|0);
  $5 = $46;
  HEAP8[$45>>0] = $44;
 }
 while(1) {
  $47 = $6;
  $48 = (_BIT_reloadDStream_275($47)|0);
  $49 = ($48|0)==(0);
  if (!($49)) {
   break;
  }
  $50 = $5;
  $51 = $7;
  $52 = ($50>>>0)<($51>>>0);
  if (!($52)) {
   break;
  }
  $53 = $6;
  $54 = $8;
  $55 = $9;
  $56 = (_HUF_decodeSymbolX2_326($53,$54,$55)|0);
  $57 = $5;
  $58 = ((($57)) + 1|0);
  $5 = $58;
  HEAP8[$57>>0] = $56;
 }
 while(1) {
  $59 = $5;
  $60 = $7;
  $61 = ($59>>>0)<($60>>>0);
  if (!($61)) {
   break;
  }
  $62 = $6;
  $63 = $8;
  $64 = $9;
  $65 = (_HUF_decodeSymbolX2_326($62,$63,$64)|0);
  $66 = $5;
  $67 = ((($66)) + 1|0);
  $5 = $67;
  HEAP8[$66>>0] = $65;
 }
 $68 = $7;
 $69 = $10;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 STACKTOP = sp;return ($72|0);
}
function _ZSTD_getFrameParams($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8>>>0)<(5);
 if ($9) {
  $3 = 5;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 $10 = $5;
 $11 = (_MEM_readLE32_289($10)|0);
 $7 = $11;
 $12 = $7;
 $13 = ($12|0)!=(-47205084);
 if ($13) {
  $3 = -2;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 $14 = $4;
 ;HEAP32[$14>>2]=0|0;HEAP32[$14+4>>2]=0|0;HEAP32[$14+8>>2]=0|0;HEAP32[$14+12>>2]=0|0;HEAP32[$14+16>>2]=0|0;HEAP32[$14+20>>2]=0|0;HEAP32[$14+24>>2]=0|0;HEAP32[$14+28>>2]=0|0;
 $15 = $5;
 $16 = ((($15)) + 4|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 & 15;
 $20 = (($19) + 11)|0;
 $21 = $4;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 $23 = $5;
 $24 = ((($23)) + 4|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 >> 4;
 $28 = ($27|0)!=(0);
 if ($28) {
  $3 = -5;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 } else {
  $3 = 0;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _ZSTDv04_decompress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $11 = (_ZSTD_createDCtx_329()|0);
 $10 = $11;
 $12 = $10;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $4 = -11;
  $22 = $4;
  STACKTOP = sp;return ($22|0);
 } else {
  $14 = $10;
  $15 = $5;
  $16 = $6;
  $17 = $7;
  $18 = $8;
  $19 = (_ZSTDv04_decompressDCtx($14,$15,$16,$17,$18)|0);
  $9 = $19;
  $20 = $10;
  (_ZSTD_freeDCtx_330($20)|0);
  $21 = $9;
  $4 = $21;
  $22 = $4;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function _ZSTD_createDCtx_329() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_malloc(141416)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
 } else {
  $5 = $1;
  (_ZSTD_resetDCtx($5)|0);
  $6 = $1;
  $0 = $6;
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _ZSTD_freeDCtx_330($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free($2);
 STACKTOP = sp;return 0;
}
function _ZSTDv04_findFrameCompressedSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 $6 = (_ZSTD_findFrameCompressedSize_333($4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function _ZSTD_findFrameCompressedSize_333($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $5 = $9;
 $10 = $4;
 $6 = $10;
 $11 = $4;
 $12 = ($11>>>0)<(5);
 if ($12) {
  $2 = -14;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $13 = $3;
 $14 = (_MEM_readLE32_289($13)|0);
 $15 = ($14|0)!=(-47205084);
 if ($15) {
  $2 = -2;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $16 = $5;
 $17 = ((($16)) + 5|0);
 $5 = $17;
 $18 = $6;
 $19 = (($18) - 5)|0;
 $6 = $19;
 while(1) {
  $20 = $5;
  $21 = $6;
  $22 = (_ZSTD_getcBlockSize_267($20,$21,$7)|0);
  $8 = $22;
  $23 = $8;
  $24 = (_ZSTD_isError_266($23)|0);
  $25 = ($24|0)!=(0);
  if ($25) {
   label = 7;
   break;
  }
  $27 = $5;
  $28 = ((($27)) + 3|0);
  $5 = $28;
  $29 = $6;
  $30 = (($29) - 3)|0;
  $6 = $30;
  $31 = $8;
  $32 = $6;
  $33 = ($31>>>0)>($32>>>0);
  if ($33) {
   label = 9;
   break;
  }
  $34 = $8;
  $35 = ($34|0)==(0);
  if ($35) {
   label = 12;
   break;
  }
  $36 = $8;
  $37 = $5;
  $38 = (($37) + ($36)|0);
  $5 = $38;
  $39 = $8;
  $40 = $6;
  $41 = (($40) - ($39))|0;
  $6 = $41;
 }
 if ((label|0) == 7) {
  $26 = $8;
  $2 = $26;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 else if ((label|0) == 9) {
  $2 = -14;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 else if ((label|0) == 12) {
  $42 = $5;
  $43 = $3;
  $44 = $42;
  $45 = $43;
  $46 = (($44) - ($45))|0;
  $2 = $46;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _ZBUFFv04_freeDCtx($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ZBUFF_freeDCtx_342($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ZBUFF_freeDCtx_342($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  (_ZSTD_freeDCtx_330($6)|0);
  $7 = $2;
  $8 = ((($7)) + 40|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = $2;
  $11 = ((($10)) + 52|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
  $13 = $2;
  _free($13);
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _FSEv05_buildDTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(592|0);
 $9 = sp + 584|0;
 $15 = sp + 72|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $25 = $5;
 $26 = ((($25)) + 4|0);
 $10 = $26;
 $27 = $10;
 $11 = $27;
 $28 = $8;
 $29 = 1 << $28;
 $12 = $29;
 $30 = $12;
 $31 = (($30) - 1)|0;
 $13 = $31;
 $32 = $12;
 $33 = (_FSEv05_tableStep($32)|0);
 $14 = $33;
 $16 = 0;
 $34 = $12;
 $35 = (($34) - 1)|0;
 $17 = $35;
 $36 = $8;
 $37 = (($36) - 1)|0;
 $38 = 1 << $37;
 $39 = $38&65535;
 $18 = $39;
 $19 = 1;
 $40 = $7;
 $41 = ($40>>>0)>(255);
 if ($41) {
  $4 = -18;
  $157 = $4;
  STACKTOP = sp;return ($157|0);
 }
 $42 = $8;
 $43 = ($42>>>0)>(12);
 if ($43) {
  $4 = -17;
  $157 = $4;
  STACKTOP = sp;return ($157|0);
 }
 $44 = $8;
 $45 = $44&65535;
 HEAP16[$9>>1] = $45;
 $20 = 0;
 while(1) {
  $46 = $20;
  $47 = $7;
  $48 = ($46>>>0)<=($47>>>0);
  if (!($48)) {
   break;
  }
  $49 = $6;
  $50 = $20;
  $51 = (($49) + ($50<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = ($53|0)==(-1);
  if ($54) {
   $55 = $20;
   $56 = $55&255;
   $57 = $11;
   $58 = $17;
   $59 = (($58) + -1)|0;
   $17 = $59;
   $60 = (($57) + ($58<<2)|0);
   $61 = ((($60)) + 2|0);
   HEAP8[$61>>0] = $56;
   $62 = $20;
   $$sink = 1;$$sink2 = $62;
  } else {
   $63 = $6;
   $64 = $20;
   $65 = (($63) + ($64<<1)|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = $66 << 16 >> 16;
   $68 = $18;
   $69 = $68 << 16 >> 16;
   $70 = ($67|0)>=($69|0);
   if ($70) {
    $19 = 0;
   }
   $71 = $6;
   $72 = $20;
   $73 = (($71) + ($72<<1)|0);
   $74 = HEAP16[$73>>1]|0;
   $75 = $20;
   $$sink = $74;$$sink2 = $75;
  }
  $76 = (($15) + ($$sink2<<1)|0);
  HEAP16[$76>>1] = $$sink;
  $77 = $20;
  $78 = (($77) + 1)|0;
  $20 = $78;
 }
 $20 = 0;
 while(1) {
  $79 = $20;
  $80 = $7;
  $81 = ($79>>>0)<=($80>>>0);
  if (!($81)) {
   break;
  }
  $21 = 0;
  while(1) {
   $82 = $21;
   $83 = $6;
   $84 = $20;
   $85 = (($83) + ($84<<1)|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = $86 << 16 >> 16;
   $88 = ($82|0)<($87|0);
   $89 = $20;
   if (!($88)) {
    break;
   }
   $90 = $89&255;
   $91 = $11;
   $92 = $16;
   $93 = (($91) + ($92<<2)|0);
   $94 = ((($93)) + 2|0);
   HEAP8[$94>>0] = $90;
   $95 = $16;
   $96 = $14;
   $97 = (($95) + ($96))|0;
   $98 = $13;
   $99 = $97 & $98;
   $16 = $99;
   while(1) {
    $100 = $16;
    $101 = $17;
    $102 = ($100>>>0)>($101>>>0);
    if (!($102)) {
     break;
    }
    $103 = $16;
    $104 = $14;
    $105 = (($103) + ($104))|0;
    $106 = $13;
    $107 = $105 & $106;
    $16 = $107;
   }
   $108 = $21;
   $109 = (($108) + 1)|0;
   $21 = $109;
  }
  $110 = (($89) + 1)|0;
  $20 = $110;
 }
 $111 = $16;
 $112 = ($111|0)!=(0);
 if ($112) {
  $4 = -1;
  $157 = $4;
  STACKTOP = sp;return ($157|0);
 }
 $22 = 0;
 while(1) {
  $113 = $22;
  $114 = $12;
  $115 = ($113>>>0)<($114>>>0);
  if (!($115)) {
   break;
  }
  $116 = $11;
  $117 = $22;
  $118 = (($116) + ($117<<2)|0);
  $119 = ((($118)) + 2|0);
  $120 = HEAP8[$119>>0]|0;
  $23 = $120;
  $121 = $23;
  $122 = $121&255;
  $123 = (($15) + ($122<<1)|0);
  $124 = HEAP16[$123>>1]|0;
  $125 = (($124) + 1)<<16>>16;
  HEAP16[$123>>1] = $125;
  $24 = $124;
  $126 = $8;
  $127 = $24;
  $128 = $127&65535;
  $129 = (_BITv05_highbit32($128)|0);
  $130 = (($126) - ($129))|0;
  $131 = $130&255;
  $132 = $11;
  $133 = $22;
  $134 = (($132) + ($133<<2)|0);
  $135 = ((($134)) + 3|0);
  HEAP8[$135>>0] = $131;
  $136 = $24;
  $137 = $136&65535;
  $138 = $11;
  $139 = $22;
  $140 = (($138) + ($139<<2)|0);
  $141 = ((($140)) + 3|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142&255;
  $144 = $137 << $143;
  $145 = $12;
  $146 = (($144) - ($145))|0;
  $147 = $146&65535;
  $148 = $11;
  $149 = $22;
  $150 = (($148) + ($149<<2)|0);
  HEAP16[$150>>1] = $147;
  $151 = $22;
  $152 = (($151) + 1)|0;
  $22 = $152;
 }
 $153 = $19;
 $154 = $153&65535;
 $155 = ((($9)) + 2|0);
 HEAP16[$155>>1] = $154;
 $156 = $5;
 ;HEAP16[$156>>1]=HEAP16[$9>>1]|0;HEAP16[$156+2>>1]=HEAP16[$9+2>>1]|0;
 $4 = 0;
 $157 = $4;
 STACKTOP = sp;return ($157|0);
}
function _FSEv05_tableStep($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 >>> 1;
 $4 = $1;
 $5 = $4 >>> 3;
 $6 = (($3) + ($5))|0;
 $7 = (($6) + 3)|0;
 STACKTOP = sp;return ($7|0);
}
function _BITv05_highbit32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (Math_clz32(($2|0))|0);
 $4 = (31 - ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function _FSEv05_isError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_351($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ERR_isError_351($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2>>>0)>(4294967271);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _FSEv05_readNCount($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $24 = $9;
 $11 = $24;
 $25 = $11;
 $26 = $10;
 $27 = (($25) + ($26)|0);
 $12 = $27;
 $28 = $11;
 $13 = $28;
 $19 = 0;
 $20 = 0;
 $29 = $10;
 $30 = ($29>>>0)<(4);
 if ($30) {
  $5 = -14;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $31 = $13;
 $32 = (_MEM_readLE32_354($31)|0);
 $17 = $32;
 $33 = $17;
 $34 = $33 & 15;
 $35 = (($34) + 5)|0;
 $14 = $35;
 $36 = $14;
 $37 = ($36|0)>(15);
 if ($37) {
  $5 = -17;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $38 = $17;
 $39 = $38 >>> 4;
 $17 = $39;
 $18 = 4;
 $40 = $14;
 $41 = $8;
 HEAP32[$41>>2] = $40;
 $42 = $14;
 $43 = 1 << $42;
 $44 = (($43) + 1)|0;
 $15 = $44;
 $45 = $14;
 $46 = 1 << $45;
 $16 = $46;
 $47 = $14;
 $48 = (($47) + 1)|0;
 $14 = $48;
 L9: while(1) {
  $49 = $15;
  $50 = ($49|0)>(1);
  if (!($50)) {
   break;
  }
  $51 = $19;
  $52 = $7;
  $53 = HEAP32[$52>>2]|0;
  $54 = ($51>>>0)<=($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = $20;
  $56 = ($55|0)!=(0);
  do {
   if ($56) {
    $57 = $19;
    $21 = $57;
    while(1) {
     $58 = $17;
     $59 = $58 & 65535;
     $60 = ($59|0)==(65535);
     if (!($60)) {
      break;
     }
     $61 = $21;
     $62 = (($61) + 24)|0;
     $21 = $62;
     $63 = $13;
     $64 = $12;
     $65 = ((($64)) + -5|0);
     $66 = ($63>>>0)<($65>>>0);
     if ($66) {
      $67 = $13;
      $68 = ((($67)) + 2|0);
      $13 = $68;
      $69 = $13;
      $70 = (_MEM_readLE32_354($69)|0);
      $71 = $18;
      $72 = $70 >>> $71;
      $17 = $72;
      continue;
     } else {
      $73 = $17;
      $74 = $73 >>> 16;
      $17 = $74;
      $75 = $18;
      $76 = (($75) + 16)|0;
      $18 = $76;
      continue;
     }
    }
    while(1) {
     $77 = $17;
     $78 = $77 & 3;
     $79 = ($78|0)==(3);
     if (!($79)) {
      break;
     }
     $80 = $21;
     $81 = (($80) + 3)|0;
     $21 = $81;
     $82 = $17;
     $83 = $82 >>> 2;
     $17 = $83;
     $84 = $18;
     $85 = (($84) + 2)|0;
     $18 = $85;
    }
    $86 = $17;
    $87 = $86 & 3;
    $88 = $21;
    $89 = (($88) + ($87))|0;
    $21 = $89;
    $90 = $18;
    $91 = (($90) + 2)|0;
    $18 = $91;
    $92 = $21;
    $93 = $7;
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92>>>0)>($94>>>0);
    if ($95) {
     label = 17;
     break L9;
    }
    while(1) {
     $96 = $19;
     $97 = $21;
     $98 = ($96>>>0)<($97>>>0);
     if (!($98)) {
      break;
     }
     $99 = $6;
     $100 = $19;
     $101 = (($100) + 1)|0;
     $19 = $101;
     $102 = (($99) + ($100<<1)|0);
     HEAP16[$102>>1] = 0;
    }
    $103 = $13;
    $104 = $12;
    $105 = ((($104)) + -7|0);
    $106 = ($103>>>0)<=($105>>>0);
    if (!($106)) {
     $107 = $13;
     $108 = $18;
     $109 = $108 >> 3;
     $110 = (($107) + ($109)|0);
     $111 = $12;
     $112 = ((($111)) + -4|0);
     $113 = ($110>>>0)<=($112>>>0);
     if (!($113)) {
      $124 = $17;
      $125 = $124 >>> 2;
      $17 = $125;
      break;
     }
    }
    $114 = $18;
    $115 = $114 >> 3;
    $116 = $13;
    $117 = (($116) + ($115)|0);
    $13 = $117;
    $118 = $18;
    $119 = $118 & 7;
    $18 = $119;
    $120 = $13;
    $121 = (_MEM_readLE32_354($120)|0);
    $122 = $18;
    $123 = $121 >>> $122;
    $17 = $123;
   }
  } while(0);
  $126 = $16;
  $127 = $126<<1;
  $128 = (($127) - 1)|0;
  $129 = $15;
  $130 = (($128) - ($129))|0;
  $131 = $130&65535;
  $22 = $131;
  $132 = $17;
  $133 = $16;
  $134 = (($133) - 1)|0;
  $135 = $132 & $134;
  $136 = $22;
  $137 = $136 << 16 >> 16;
  $138 = ($135>>>0)<($137>>>0);
  $139 = $17;
  $140 = $16;
  if ($138) {
   $141 = (($140) - 1)|0;
   $142 = $139 & $141;
   $143 = $142&65535;
   $23 = $143;
   $144 = $14;
   $145 = (($144) - 1)|0;
   $146 = $18;
   $147 = (($146) + ($145))|0;
   $18 = $147;
  } else {
   $148 = $140<<1;
   $149 = (($148) - 1)|0;
   $150 = $139 & $149;
   $151 = $150&65535;
   $23 = $151;
   $152 = $23;
   $153 = $152 << 16 >> 16;
   $154 = $16;
   $155 = ($153|0)>=($154|0);
   if ($155) {
    $156 = $22;
    $157 = $156 << 16 >> 16;
    $158 = $23;
    $159 = $158 << 16 >> 16;
    $160 = (($159) - ($157))|0;
    $161 = $160&65535;
    $23 = $161;
   }
   $162 = $14;
   $163 = $18;
   $164 = (($163) + ($162))|0;
   $18 = $164;
  }
  $165 = $23;
  $166 = (($165) + -1)<<16>>16;
  $23 = $166;
  $167 = $23;
  $168 = (_FSEv05_abs($167)|0);
  $169 = $168 << 16 >> 16;
  $170 = $15;
  $171 = (($170) - ($169))|0;
  $15 = $171;
  $172 = $23;
  $173 = $6;
  $174 = $19;
  $175 = (($174) + 1)|0;
  $19 = $175;
  $176 = (($173) + ($174<<1)|0);
  HEAP16[$176>>1] = $172;
  $177 = $23;
  $178 = ($177<<16>>16)!=(0);
  $179 = $178 ^ 1;
  $180 = $179&1;
  $20 = $180;
  while(1) {
   $181 = $15;
   $182 = $16;
   $183 = ($181|0)<($182|0);
   if (!($183)) {
    break;
   }
   $184 = $14;
   $185 = (($184) + -1)|0;
   $14 = $185;
   $186 = $16;
   $187 = $186 >> 1;
   $16 = $187;
  }
  $188 = $13;
  $189 = $12;
  $190 = ((($189)) + -7|0);
  $191 = ($188>>>0)<=($190>>>0);
  if ($191) {
   label = 34;
  } else {
   $192 = $13;
   $193 = $18;
   $194 = $193 >> 3;
   $195 = (($192) + ($194)|0);
   $196 = $12;
   $197 = ((($196)) + -4|0);
   $198 = ($195>>>0)<=($197>>>0);
   if ($198) {
    label = 34;
   } else {
    $205 = $12;
    $206 = ((($205)) + -4|0);
    $207 = $13;
    $208 = $206;
    $209 = $207;
    $210 = (($208) - ($209))|0;
    $211 = $210<<3;
    $212 = $18;
    $213 = (($212) - ($211))|0;
    $18 = $213;
    $214 = $12;
    $215 = ((($214)) + -4|0);
    $13 = $215;
   }
  }
  if ((label|0) == 34) {
   label = 0;
   $199 = $18;
   $200 = $199 >> 3;
   $201 = $13;
   $202 = (($201) + ($200)|0);
   $13 = $202;
   $203 = $18;
   $204 = $203 & 7;
   $18 = $204;
  }
  $216 = $13;
  $217 = (_MEM_readLE32_354($216)|0);
  $218 = $18;
  $219 = $218 & 31;
  $220 = $217 >>> $219;
  $17 = $220;
 }
 if ((label|0) == 17) {
  $5 = -19;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $221 = $15;
 $222 = ($221|0)!=(1);
 if ($222) {
  $5 = -1;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $223 = $19;
 $224 = (($223) - 1)|0;
 $225 = $7;
 HEAP32[$225>>2] = $224;
 $226 = $18;
 $227 = (($226) + 7)|0;
 $228 = $227 >> 3;
 $229 = $13;
 $230 = (($229) + ($228)|0);
 $13 = $230;
 $231 = $13;
 $232 = $11;
 $233 = $231;
 $234 = $232;
 $235 = (($233) - ($234))|0;
 $236 = $10;
 $237 = ($235>>>0)>($236>>>0);
 if ($237) {
  $5 = -14;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 } else {
  $238 = $13;
  $239 = $11;
  $240 = $238;
  $241 = $239;
  $242 = (($240) - ($241))|0;
  $5 = $242;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 return (0)|0;
}
function _MEM_readLE32_354($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_isLittleEndian_355()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read32_356($5)|0);
 if ($4) {
  $1 = $6;
 } else {
  $7 = (_MEM_swap32_357($6)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _FSEv05_abs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)<(0);
 $5 = $1;
 $6 = $5 << 16 >> 16;
 $7 = (0 - ($6))|0;
 $8 = $4 ? $7 : $6;
 $9 = $8&65535;
 STACKTOP = sp;return ($9|0);
}
function _MEM_isLittleEndian_355() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[2648]|0;
 $1 = $0&255;
 return ($1|0);
}
function _MEM_read32_356($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8)|(HEAPU8[$2+2>>0]<<16)|(HEAPU8[$2+3>>0]<<24);
 STACKTOP = sp;return ($3|0);
}
function _MEM_swap32_357($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 24;
 $4 = $3 & -16777216;
 $5 = $1;
 $6 = $5 << 8;
 $7 = $6 & 16711680;
 $8 = $4 | $7;
 $9 = $1;
 $10 = $9 >>> 8;
 $11 = $10 & 65280;
 $12 = $8 | $11;
 $13 = $1;
 $14 = $13 >>> 24;
 $15 = $14 & 255;
 $16 = $12 | $15;
 STACKTOP = sp;return ($16|0);
}
function _FSEv05_buildDTable_rle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $4 = $8;
 $9 = $4;
 $5 = $9;
 $10 = $2;
 $11 = ((($10)) + 4|0);
 $6 = $11;
 $12 = $6;
 $7 = $12;
 $13 = $5;
 HEAP16[$13>>1] = 0;
 $14 = $5;
 $15 = ((($14)) + 2|0);
 HEAP16[$15>>1] = 0;
 $16 = $7;
 HEAP16[$16>>1] = 0;
 $17 = $3;
 $18 = $7;
 $19 = ((($18)) + 2|0);
 HEAP8[$19>>0] = $17;
 $20 = $7;
 $21 = ((($20)) + 3|0);
 HEAP8[$21>>0] = 0;
 STACKTOP = sp;return 0;
}
function _FSEv05_buildDTable_raw($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = $0;
 $4 = $1;
 $13 = $3;
 $5 = $13;
 $14 = $5;
 $6 = $14;
 $15 = $3;
 $16 = ((($15)) + 4|0);
 $7 = $16;
 $17 = $7;
 $8 = $17;
 $18 = $4;
 $19 = 1 << $18;
 $9 = $19;
 $20 = $9;
 $21 = (($20) - 1)|0;
 $10 = $21;
 $22 = $10;
 $11 = $22;
 $23 = $4;
 $24 = ($23>>>0)<(1);
 if ($24) {
  $2 = -1;
  $50 = $2;
  STACKTOP = sp;return ($50|0);
 }
 $25 = $4;
 $26 = $25&65535;
 $27 = $6;
 HEAP16[$27>>1] = $26;
 $28 = $6;
 $29 = ((($28)) + 2|0);
 HEAP16[$29>>1] = 1;
 $12 = 0;
 while(1) {
  $30 = $12;
  $31 = $11;
  $32 = ($30>>>0)<=($31>>>0);
  if (!($32)) {
   break;
  }
  $33 = $8;
  $34 = $12;
  $35 = (($33) + ($34<<2)|0);
  HEAP16[$35>>1] = 0;
  $36 = $12;
  $37 = $36&255;
  $38 = $8;
  $39 = $12;
  $40 = (($38) + ($39<<2)|0);
  $41 = ((($40)) + 2|0);
  HEAP8[$41>>0] = $37;
  $42 = $4;
  $43 = $42&255;
  $44 = $8;
  $45 = $12;
  $46 = (($44) + ($45<<2)|0);
  $47 = ((($46)) + 3|0);
  HEAP8[$47>>0] = $43;
  $48 = $12;
  $49 = (($48) + 1)|0;
  $12 = $49;
 }
 $2 = 0;
 $50 = $2;
 STACKTOP = sp;return ($50|0);
}
function _FSEv05_decompress_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink1 = 0, $$sink10 = 0, $$sink11 = 0, $$sink12 = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $$sink5 = 0, $$sink7 = 0, $$sink8 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $16 = sp + 136|0;
 $17 = sp + 128|0;
 $18 = sp + 120|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $33 = sp + 40|0;
 $36 = $0;
 $37 = $1;
 $38 = $2;
 $39 = $3;
 $40 = $4;
 $44 = $40;
 $41 = $44;
 $45 = $41;
 $42 = $45;
 $46 = $42;
 $47 = ((($46)) + 2|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48&65535;
 $43 = $49;
 $50 = $43;
 $51 = ($50|0)!=(0);
 $52 = $36;
 $53 = $37;
 $54 = $38;
 $55 = $39;
 $56 = $40;
 if ($51) {
  $21 = $52;
  $22 = $53;
  $23 = $54;
  $24 = $55;
  $25 = $56;
  $26 = 1;
  $57 = $21;
  $27 = $57;
  $58 = $27;
  $28 = $58;
  $59 = $28;
  $60 = $22;
  $61 = (($59) + ($60)|0);
  $29 = $61;
  $62 = $29;
  $63 = ((($62)) + -3|0);
  $30 = $63;
  $64 = $23;
  $65 = $24;
  $66 = (_BITv05_initDStream($31,$64,$65)|0);
  $34 = $66;
  $67 = $34;
  $68 = (_FSEv05_isError($67)|0);
  $69 = ($68|0)!=(0);
  do {
   if ($69) {
    $70 = $34;
    $20 = $70;
   } else {
    $71 = $25;
    _FSEv05_initDState($32,$31,$71);
    $72 = $25;
    _FSEv05_initDState($33,$31,$72);
    while(1) {
     $73 = (_BITv05_reloadDStream($31)|0);
     $74 = ($73|0)==(0);
     if (!($74)) {
      break;
     }
     $75 = $28;
     $76 = $30;
     $77 = ($75>>>0)<($76>>>0);
     if (!($77)) {
      break;
     }
     $78 = $26;
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = (_FSEv05_decodeSymbolFast($32,$31)|0);
      $$sink = $80;
     } else {
      $81 = (_FSEv05_decodeSymbol($32,$31)|0);
      $$sink = $81;
     }
     $82 = $$sink&255;
     $83 = $82&255;
     $84 = $28;
     HEAP8[$84>>0] = $83;
     $85 = $26;
     $86 = ($85|0)!=(0);
     if ($86) {
      $87 = (_FSEv05_decodeSymbolFast($33,$31)|0);
      $$sink1 = $87;
     } else {
      $88 = (_FSEv05_decodeSymbol($33,$31)|0);
      $$sink1 = $88;
     }
     $89 = $$sink1&255;
     $90 = $89&255;
     $91 = $28;
     $92 = ((($91)) + 1|0);
     HEAP8[$92>>0] = $90;
     $93 = (_BITv05_reloadDStream($31)|0);
     $94 = ($93>>>0)>(0);
     if ($94) {
      label = 14;
      break;
     }
     $97 = $26;
     $98 = ($97|0)!=(0);
     if ($98) {
      $99 = (_FSEv05_decodeSymbolFast($32,$31)|0);
      $$sink2 = $99;
     } else {
      $100 = (_FSEv05_decodeSymbol($32,$31)|0);
      $$sink2 = $100;
     }
     $101 = $$sink2&255;
     $102 = $101&255;
     $103 = $28;
     $104 = ((($103)) + 2|0);
     HEAP8[$104>>0] = $102;
     $105 = $26;
     $106 = ($105|0)!=(0);
     if ($106) {
      $107 = (_FSEv05_decodeSymbolFast($33,$31)|0);
      $$sink3 = $107;
     } else {
      $108 = (_FSEv05_decodeSymbol($33,$31)|0);
      $$sink3 = $108;
     }
     $109 = $$sink3&255;
     $110 = $109&255;
     $111 = $28;
     $112 = ((($111)) + 3|0);
     HEAP8[$112>>0] = $110;
     $113 = $28;
     $114 = ((($113)) + 4|0);
     $28 = $114;
    }
    if ((label|0) == 14) {
     $95 = $28;
     $96 = ((($95)) + 2|0);
     $28 = $96;
    }
    while(1) {
     $115 = (_BITv05_reloadDStream($31)|0);
     $116 = ($115>>>0)>(2);
     if ($116) {
      break;
     }
     $117 = $28;
     $118 = $29;
     $119 = ($117|0)==($118|0);
     if ($119) {
      break;
     }
     $120 = (_BITv05_endOfDStream($31)|0);
     $121 = ($120|0)!=(0);
     if ($121) {
      $122 = $26;
      $123 = ($122|0)!=(0);
      if ($123) {
       break;
      }
      $124 = (_FSEv05_endOfDState($32)|0);
      $125 = ($124|0)!=(0);
      if ($125) {
       break;
      }
     }
     $126 = $26;
     $127 = ($126|0)!=(0);
     if ($127) {
      $128 = (_FSEv05_decodeSymbolFast($32,$31)|0);
      $$sink4 = $128;
     } else {
      $129 = (_FSEv05_decodeSymbol($32,$31)|0);
      $$sink4 = $129;
     }
     $130 = $$sink4&255;
     $131 = $130&255;
     $132 = $28;
     $133 = ((($132)) + 1|0);
     $28 = $133;
     HEAP8[$132>>0] = $131;
     $134 = (_BITv05_reloadDStream($31)|0);
     $135 = ($134>>>0)>(2);
     if ($135) {
      break;
     }
     $136 = $28;
     $137 = $29;
     $138 = ($136|0)==($137|0);
     if ($138) {
      break;
     }
     $139 = (_BITv05_endOfDStream($31)|0);
     $140 = ($139|0)!=(0);
     if ($140) {
      $141 = $26;
      $142 = ($141|0)!=(0);
      if ($142) {
       break;
      }
      $143 = (_FSEv05_endOfDState($33)|0);
      $144 = ($143|0)!=(0);
      if ($144) {
       break;
      }
     }
     $145 = $26;
     $146 = ($145|0)!=(0);
     if ($146) {
      $147 = (_FSEv05_decodeSymbolFast($33,$31)|0);
      $$sink5 = $147;
     } else {
      $148 = (_FSEv05_decodeSymbol($33,$31)|0);
      $$sink5 = $148;
     }
     $149 = $$sink5&255;
     $150 = $149&255;
     $151 = $28;
     $152 = ((($151)) + 1|0);
     $28 = $152;
     HEAP8[$151>>0] = $150;
    }
    $153 = (_BITv05_endOfDStream($31)|0);
    $154 = ($153|0)!=(0);
    if ($154) {
     $155 = (_FSEv05_endOfDState($32)|0);
     $156 = ($155|0)!=(0);
     if ($156) {
      $157 = (_FSEv05_endOfDState($33)|0);
      $158 = ($157|0)!=(0);
      if ($158) {
       $159 = $28;
       $160 = $27;
       $161 = $159;
       $162 = $160;
       $163 = (($161) - ($162))|0;
       $20 = $163;
       break;
      }
     }
    }
    $164 = $28;
    $165 = $29;
    $166 = ($164|0)==($165|0);
    if ($166) {
     $20 = -13;
     break;
    } else {
     $20 = -15;
     break;
    }
   }
  } while(0);
  $167 = $20;
  $35 = $167;
  $279 = $35;
  STACKTOP = sp;return ($279|0);
 } else {
  $6 = $52;
  $7 = $53;
  $8 = $54;
  $9 = $55;
  $10 = $56;
  $11 = 0;
  $168 = $6;
  $12 = $168;
  $169 = $12;
  $13 = $169;
  $170 = $13;
  $171 = $7;
  $172 = (($170) + ($171)|0);
  $14 = $172;
  $173 = $14;
  $174 = ((($173)) + -3|0);
  $15 = $174;
  $175 = $8;
  $176 = $9;
  $177 = (_BITv05_initDStream($16,$175,$176)|0);
  $19 = $177;
  $178 = $19;
  $179 = (_FSEv05_isError($178)|0);
  $180 = ($179|0)!=(0);
  do {
   if ($180) {
    $181 = $19;
    $5 = $181;
   } else {
    $182 = $10;
    _FSEv05_initDState($17,$16,$182);
    $183 = $10;
    _FSEv05_initDState($18,$16,$183);
    while(1) {
     $184 = (_BITv05_reloadDStream($16)|0);
     $185 = ($184|0)==(0);
     if (!($185)) {
      break;
     }
     $186 = $13;
     $187 = $15;
     $188 = ($186>>>0)<($187>>>0);
     if (!($188)) {
      break;
     }
     $189 = $11;
     $190 = ($189|0)!=(0);
     if ($190) {
      $191 = (_FSEv05_decodeSymbolFast($17,$16)|0);
      $$sink7 = $191;
     } else {
      $192 = (_FSEv05_decodeSymbol($17,$16)|0);
      $$sink7 = $192;
     }
     $193 = $$sink7&255;
     $194 = $193&255;
     $195 = $13;
     HEAP8[$195>>0] = $194;
     $196 = $11;
     $197 = ($196|0)!=(0);
     if ($197) {
      $198 = (_FSEv05_decodeSymbolFast($18,$16)|0);
      $$sink8 = $198;
     } else {
      $199 = (_FSEv05_decodeSymbol($18,$16)|0);
      $$sink8 = $199;
     }
     $200 = $$sink8&255;
     $201 = $200&255;
     $202 = $13;
     $203 = ((($202)) + 1|0);
     HEAP8[$203>>0] = $201;
     $204 = (_BITv05_reloadDStream($16)|0);
     $205 = ($204>>>0)>(0);
     if ($205) {
      label = 59;
      break;
     }
     $208 = $11;
     $209 = ($208|0)!=(0);
     if ($209) {
      $210 = (_FSEv05_decodeSymbolFast($17,$16)|0);
      $$sink9 = $210;
     } else {
      $211 = (_FSEv05_decodeSymbol($17,$16)|0);
      $$sink9 = $211;
     }
     $212 = $$sink9&255;
     $213 = $212&255;
     $214 = $13;
     $215 = ((($214)) + 2|0);
     HEAP8[$215>>0] = $213;
     $216 = $11;
     $217 = ($216|0)!=(0);
     if ($217) {
      $218 = (_FSEv05_decodeSymbolFast($18,$16)|0);
      $$sink10 = $218;
     } else {
      $219 = (_FSEv05_decodeSymbol($18,$16)|0);
      $$sink10 = $219;
     }
     $220 = $$sink10&255;
     $221 = $220&255;
     $222 = $13;
     $223 = ((($222)) + 3|0);
     HEAP8[$223>>0] = $221;
     $224 = $13;
     $225 = ((($224)) + 4|0);
     $13 = $225;
    }
    if ((label|0) == 59) {
     $206 = $13;
     $207 = ((($206)) + 2|0);
     $13 = $207;
    }
    while(1) {
     $226 = (_BITv05_reloadDStream($16)|0);
     $227 = ($226>>>0)>(2);
     if ($227) {
      break;
     }
     $228 = $13;
     $229 = $14;
     $230 = ($228|0)==($229|0);
     if ($230) {
      break;
     }
     $231 = (_BITv05_endOfDStream($16)|0);
     $232 = ($231|0)!=(0);
     if ($232) {
      $233 = $11;
      $234 = ($233|0)!=(0);
      if ($234) {
       break;
      }
      $235 = (_FSEv05_endOfDState($17)|0);
      $236 = ($235|0)!=(0);
      if ($236) {
       break;
      }
     }
     $237 = $11;
     $238 = ($237|0)!=(0);
     if ($238) {
      $239 = (_FSEv05_decodeSymbolFast($17,$16)|0);
      $$sink11 = $239;
     } else {
      $240 = (_FSEv05_decodeSymbol($17,$16)|0);
      $$sink11 = $240;
     }
     $241 = $$sink11&255;
     $242 = $241&255;
     $243 = $13;
     $244 = ((($243)) + 1|0);
     $13 = $244;
     HEAP8[$243>>0] = $242;
     $245 = (_BITv05_reloadDStream($16)|0);
     $246 = ($245>>>0)>(2);
     if ($246) {
      break;
     }
     $247 = $13;
     $248 = $14;
     $249 = ($247|0)==($248|0);
     if ($249) {
      break;
     }
     $250 = (_BITv05_endOfDStream($16)|0);
     $251 = ($250|0)!=(0);
     if ($251) {
      $252 = $11;
      $253 = ($252|0)!=(0);
      if ($253) {
       break;
      }
      $254 = (_FSEv05_endOfDState($18)|0);
      $255 = ($254|0)!=(0);
      if ($255) {
       break;
      }
     }
     $256 = $11;
     $257 = ($256|0)!=(0);
     if ($257) {
      $258 = (_FSEv05_decodeSymbolFast($18,$16)|0);
      $$sink12 = $258;
     } else {
      $259 = (_FSEv05_decodeSymbol($18,$16)|0);
      $$sink12 = $259;
     }
     $260 = $$sink12&255;
     $261 = $260&255;
     $262 = $13;
     $263 = ((($262)) + 1|0);
     $13 = $263;
     HEAP8[$262>>0] = $261;
    }
    $264 = (_BITv05_endOfDStream($16)|0);
    $265 = ($264|0)!=(0);
    if ($265) {
     $266 = (_FSEv05_endOfDState($17)|0);
     $267 = ($266|0)!=(0);
     if ($267) {
      $268 = (_FSEv05_endOfDState($18)|0);
      $269 = ($268|0)!=(0);
      if ($269) {
       $270 = $13;
       $271 = $12;
       $272 = $270;
       $273 = $271;
       $274 = (($272) - ($273))|0;
       $5 = $274;
       break;
      }
     }
    }
    $275 = $13;
    $276 = $14;
    $277 = ($275|0)==($276|0);
    if ($277) {
     $5 = -13;
     break;
    } else {
     $5 = -15;
     break;
    }
   }
  } while(0);
  $278 = $5;
  $35 = $278;
  $279 = $35;
  STACKTOP = sp;return ($279|0);
 }
 return (0)|0;
}
function _BITv05_initDStream($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9>>>0)<(1);
 if ($10) {
  $11 = $4;
  ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;
  $3 = -14;
  $134 = $3;
  STACKTOP = sp;return ($134|0);
 }
 $12 = $6;
 $13 = ($12>>>0)>=(4);
 $14 = $5;
 $15 = $4;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = $14;
 do {
  if ($13) {
   $17 = $5;
   $18 = $6;
   $19 = (($17) + ($18)|0);
   $20 = ((($19)) + -4|0);
   $21 = $4;
   $22 = ((($21)) + 8|0);
   HEAP32[$22>>2] = $20;
   $23 = $4;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_MEM_readLEST_359($25)|0);
   $27 = $4;
   HEAP32[$27>>2] = $26;
   $28 = $5;
   $29 = $6;
   $30 = (($29) - 1)|0;
   $31 = (($28) + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $32&255;
   $7 = $33;
   $34 = $7;
   $35 = ($34|0)==(0);
   if (!($35)) {
    $36 = $7;
    $37 = (_BITv05_highbit32($36)|0);
    $38 = (8 - ($37))|0;
    $39 = $4;
    $40 = ((($39)) + 4|0);
    HEAP32[$40>>2] = $38;
    break;
   }
   $3 = -1;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  } else {
   $41 = $4;
   $42 = ((($41)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $4;
   $45 = ((($44)) + 8|0);
   HEAP32[$45>>2] = $43;
   $46 = $4;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = HEAP8[$48>>0]|0;
   $50 = $49&255;
   $51 = $4;
   HEAP32[$51>>2] = $50;
   $52 = $6;
   switch ($52|0) {
   case 7:  {
    $53 = $4;
    $54 = ((($53)) + 12|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ((($55)) + 6|0);
    $57 = HEAP8[$56>>0]|0;
    $58 = $57&255;
    $59 = $58 << 16;
    $60 = $4;
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + ($59))|0;
    HEAP32[$60>>2] = $62;
    label = 9;
    break;
   }
   case 6:  {
    label = 9;
    break;
   }
   case 5:  {
    label = 10;
    break;
   }
   case 4:  {
    label = 11;
    break;
   }
   case 3:  {
    label = 12;
    break;
   }
   case 2:  {
    label = 13;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 9) {
    $63 = $4;
    $64 = ((($63)) + 12|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ((($65)) + 5|0);
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 << 8;
    $70 = $4;
    $71 = HEAP32[$70>>2]|0;
    $72 = (($71) + ($69))|0;
    HEAP32[$70>>2] = $72;
    label = 10;
   }
   if ((label|0) == 10) {
    $73 = $4;
    $74 = ((($73)) + 12|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ((($75)) + 4|0);
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = $78 << 0;
    $80 = $4;
    $81 = HEAP32[$80>>2]|0;
    $82 = (($81) + ($79))|0;
    HEAP32[$80>>2] = $82;
    label = 11;
   }
   if ((label|0) == 11) {
    $83 = $4;
    $84 = ((($83)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ((($85)) + 3|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87&255;
    $89 = $88 << 24;
    $90 = $4;
    $91 = HEAP32[$90>>2]|0;
    $92 = (($91) + ($89))|0;
    HEAP32[$90>>2] = $92;
    label = 12;
   }
   if ((label|0) == 12) {
    $93 = $4;
    $94 = ((($93)) + 12|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ((($95)) + 2|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = $98 << 16;
    $100 = $4;
    $101 = HEAP32[$100>>2]|0;
    $102 = (($101) + ($99))|0;
    HEAP32[$100>>2] = $102;
    label = 13;
   }
   if ((label|0) == 13) {
    $103 = $4;
    $104 = ((($103)) + 12|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = ((($105)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = $107&255;
    $109 = $108 << 8;
    $110 = $4;
    $111 = HEAP32[$110>>2]|0;
    $112 = (($111) + ($109))|0;
    HEAP32[$110>>2] = $112;
   }
   $113 = $5;
   $114 = $6;
   $115 = (($114) - 1)|0;
   $116 = (($113) + ($115)|0);
   $117 = HEAP8[$116>>0]|0;
   $118 = $117&255;
   $8 = $118;
   $119 = $8;
   $120 = ($119|0)==(0);
   if (!($120)) {
    $121 = $8;
    $122 = (_BITv05_highbit32($121)|0);
    $123 = (8 - ($122))|0;
    $124 = $4;
    $125 = ((($124)) + 4|0);
    HEAP32[$125>>2] = $123;
    $126 = $6;
    $127 = (4 - ($126))|0;
    $128 = $127<<3;
    $129 = $4;
    $130 = ((($129)) + 4|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + ($128))|0;
    HEAP32[$130>>2] = $132;
    break;
   }
   $3 = -1;
   $134 = $3;
   STACKTOP = sp;return ($134|0);
  }
 } while(0);
 $133 = $6;
 $3 = $133;
 $134 = $3;
 STACKTOP = sp;return ($134|0);
}
function _FSEv05_initDState($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $6 = $8;
 $9 = $6;
 $7 = $9;
 $10 = $4;
 $11 = $7;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (_BITv05_readBits($10,$13)|0);
 $15 = $3;
 HEAP32[$15>>2] = $14;
 $16 = $4;
 (_BITv05_reloadDStream($16)|0);
 $17 = $5;
 $18 = ((($17)) + 4|0);
 $19 = $3;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _BITv05_reloadDStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(32);
 if ($8) {
  $1 = 3;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ($11>>>0)>=($15>>>0);
 $17 = $2;
 if ($16) {
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 >>> 3;
  $21 = $2;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (0 - ($20))|0;
  $25 = (($23) + ($24)|0);
  HEAP32[$22>>2] = $25;
  $26 = $2;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 7;
  HEAP32[$27>>2] = $29;
  $30 = $2;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_MEM_readLEST_359($32)|0);
  $34 = $2;
  HEAP32[$34>>2] = $33;
  $1 = 0;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $35 = ((($17)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $2;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($36|0)==($39|0);
 $41 = $2;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 if (!($40)) {
  $45 = $43 >>> 3;
  $3 = $45;
  $4 = 0;
  $46 = $2;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $3;
  $50 = (0 - ($49))|0;
  $51 = (($48) + ($50)|0);
  $52 = $2;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($51>>>0)<($54>>>0);
  if ($55) {
   $56 = $2;
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $2;
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $58;
   $63 = $61;
   $64 = (($62) - ($63))|0;
   $3 = $64;
   $4 = 1;
  }
  $65 = $3;
  $66 = $2;
  $67 = ((($66)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (0 - ($65))|0;
  $70 = (($68) + ($69)|0);
  HEAP32[$67>>2] = $70;
  $71 = $3;
  $72 = $71<<3;
  $73 = $2;
  $74 = ((($73)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) - ($72))|0;
  HEAP32[$74>>2] = $76;
  $77 = $2;
  $78 = ((($77)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_MEM_readLEST_359($79)|0);
  $81 = $2;
  HEAP32[$81>>2] = $80;
  $82 = $4;
  $1 = $82;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $44 = ($43>>>0)<(32);
 if ($44) {
  $1 = 1;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 } else {
  $1 = 2;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 return (0)|0;
}
function _FSEv05_decodeSymbolFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$13>>1]|0;HEAP16[$4+2>>1]=HEAP16[$13+2>>1]|0;
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $5 = $16;
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $3;
 $20 = $5;
 $21 = (_BITv05_readBitsFast($19,$20)|0);
 $7 = $21;
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = $7;
 $25 = (($23) + ($24))|0;
 $26 = $2;
 HEAP32[$26>>2] = $25;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _FSEv05_decodeSymbol($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$13>>1]|0;HEAP16[$4+2>>1]=HEAP16[$13+2>>1]|0;
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $5 = $16;
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $3;
 $20 = $5;
 $21 = (_BITv05_readBits($19,$20)|0);
 $7 = $21;
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = $7;
 $25 = (($23) + ($24))|0;
 $26 = $2;
 HEAP32[$26>>2] = $25;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _BITv05_endOfDStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  $14 = 0;
  $13 = $14&1;
  STACKTOP = sp;return ($13|0);
 }
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(32);
 $14 = $12;
 $13 = $14&1;
 STACKTOP = sp;return ($13|0);
}
function _FSEv05_endOfDState($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = $4&1;
 STACKTOP = sp;return ($5|0);
}
function _BITv05_readBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BITv05_lookBits($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BITv05_skipBits($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _BITv05_lookBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $11 >>> 1;
 $13 = $3;
 $14 = (31 - ($13))|0;
 $15 = $14 & 31;
 $16 = $12 >>> $15;
 STACKTOP = sp;return ($16|0);
}
function _BITv05_skipBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _BITv05_readBitsFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BITv05_lookBitsFast($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BITv05_skipBits($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _BITv05_lookBitsFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $3;
 $13 = (32 - ($12))|0;
 $14 = $13 & 31;
 $15 = $11 >>> $14;
 STACKTOP = sp;return ($15|0);
}
function _MEM_readLEST_359($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_32bits_360()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 if ($4) {
  $6 = (_MEM_readLE32_354($5)|0);
  $1 = $6;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = (_MEM_readLE64_361($5)|0);
  $8 = tempRet0;
  $1 = $7;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _MEM_32bits_360() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _MEM_readLE64_361($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = $0;
 $3 = (_MEM_isLittleEndian_355()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read64_362($5)|0);
 $7 = tempRet0;
 if ($4) {
  $8 = $1;
  $9 = $8;
  HEAP32[$9>>2] = $6;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $7;
 } else {
  $12 = (_MEM_swap64_363($6,$7)|0);
  $13 = tempRet0;
  $14 = $1;
  $15 = $14;
  HEAP32[$15>>2] = $12;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
 }
 $18 = $1;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 tempRet0 = ($23);
 STACKTOP = sp;return ($20|0);
}
function _MEM_read64_362($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = $3;
 $5 = HEAPU8[$4>>0]|(HEAPU8[$4+1>>0]<<8)|(HEAPU8[$4+2>>0]<<16)|(HEAPU8[$4+3>>0]<<24);
 $6 = (($3) + 4)|0;
 $7 = $6;
 $8 = HEAPU8[$7>>0]|(HEAPU8[$7+1>>0]<<8)|(HEAPU8[$7+2>>0]<<16)|(HEAPU8[$7+3>>0]<<24);
 tempRet0 = ($8);
 STACKTOP = sp;return ($5|0);
}
function _MEM_swap64_363($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 (_bitshift64Shl(($9|0),($12|0),56)|0);
 $13 = tempRet0;
 $14 = $13 & -16777216;
 $15 = $2;
 $16 = $15;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($15) + 4)|0;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 (_bitshift64Shl(($17|0),($20|0),40)|0);
 $21 = tempRet0;
 $22 = $21 & 16711680;
 $23 = $14 | $22;
 $24 = $2;
 $25 = $24;
 $26 = HEAP32[$25>>2]|0;
 $27 = (($24) + 4)|0;
 $28 = $27;
 $29 = HEAP32[$28>>2]|0;
 (_bitshift64Shl(($26|0),($29|0),24)|0);
 $30 = tempRet0;
 $31 = $30 & 65280;
 $32 = $23 | $31;
 $33 = $2;
 $34 = $33;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($33) + 4)|0;
 $37 = $36;
 $38 = HEAP32[$37>>2]|0;
 (_bitshift64Shl(($35|0),($38|0),8)|0);
 $39 = tempRet0;
 $40 = $39 & 255;
 $41 = $32 | $40;
 $42 = $2;
 $43 = $42;
 $44 = HEAP32[$43>>2]|0;
 $45 = (($42) + 4)|0;
 $46 = $45;
 $47 = HEAP32[$46>>2]|0;
 $48 = (_bitshift64Lshr(($44|0),($47|0),8)|0);
 $49 = tempRet0;
 $50 = $48 & -16777216;
 $51 = $2;
 $52 = $51;
 $53 = HEAP32[$52>>2]|0;
 $54 = (($51) + 4)|0;
 $55 = $54;
 $56 = HEAP32[$55>>2]|0;
 $57 = (_bitshift64Lshr(($53|0),($56|0),24)|0);
 $58 = tempRet0;
 $59 = $57 & 16711680;
 $60 = $50 | $59;
 $61 = $2;
 $62 = $61;
 $63 = HEAP32[$62>>2]|0;
 $64 = (($61) + 4)|0;
 $65 = $64;
 $66 = HEAP32[$65>>2]|0;
 $67 = (_bitshift64Lshr(($63|0),($66|0),40)|0);
 $68 = tempRet0;
 $69 = $67 & 65280;
 $70 = $60 | $69;
 $71 = $2;
 $72 = $71;
 $73 = HEAP32[$72>>2]|0;
 $74 = (($71) + 4)|0;
 $75 = $74;
 $76 = HEAP32[$75>>2]|0;
 $77 = (_bitshift64Lshr(($73|0),($76|0),56)|0);
 $78 = tempRet0;
 $79 = $77 & 255;
 $80 = $70 | $79;
 tempRet0 = ($41);
 STACKTOP = sp;return ($80|0);
}
function _FSEv05_decompress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16944|0);
 $11 = sp + 16432|0;
 $12 = sp + 12|0;
 $13 = sp + 8|0;
 $14 = sp + 4|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $16 = $7;
 $9 = $16;
 $17 = $9;
 $10 = $17;
 HEAP32[$14>>2] = 255;
 $18 = $8;
 $19 = ($18>>>0)<(2);
 if ($19) {
  $4 = -14;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 }
 $20 = $9;
 $21 = $8;
 $22 = (_FSEv05_readNCount($11,$14,$13,$20,$21)|0);
 $15 = $22;
 $23 = $15;
 $24 = (_FSEv05_isError($23)|0);
 $25 = ($24|0)!=(0);
 $26 = $15;
 if ($25) {
  $4 = $26;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 }
 $27 = $8;
 $28 = ($26>>>0)>=($27>>>0);
 if ($28) {
  $4 = -14;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 }
 $29 = $15;
 $30 = $10;
 $31 = (($30) + ($29)|0);
 $10 = $31;
 $32 = $15;
 $33 = $8;
 $34 = (($33) - ($32))|0;
 $8 = $34;
 $35 = HEAP32[$14>>2]|0;
 $36 = HEAP32[$13>>2]|0;
 $37 = (_FSEv05_buildDTable($12,$11,$35,$36)|0);
 $15 = $37;
 $38 = $15;
 $39 = (_FSEv05_isError($38)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $15;
  $4 = $41;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 } else {
  $42 = $5;
  $43 = $6;
  $44 = $10;
  $45 = $8;
  $46 = (_FSEv05_decompress_usingDTable($42,$43,$44,$45,$12)|0);
  $4 = $46;
  $47 = $4;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _HUFv05_isError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_351($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _HUFv05_readDTableX2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $7 = sp + 136|0;
 $8 = sp + 44|0;
 $9 = sp + 40|0;
 $11 = sp + 32|0;
 $20 = sp + 128|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$9>>2] = 0;
 HEAP32[$11>>2] = 0;
 $21 = $4;
 $22 = ((($21)) + 2|0);
 $14 = $22;
 $23 = $14;
 $15 = $23;
 $24 = $5;
 $25 = $6;
 $26 = (_HUFv05_readStats($7,256,$8,$11,$9,$24,$25)|0);
 $10 = $26;
 $27 = $10;
 $28 = (_HUFv05_isError($27)|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $10;
  $3 = $30;
  $97 = $3;
  STACKTOP = sp;return ($97|0);
 }
 $31 = HEAP32[$9>>2]|0;
 $32 = $4;
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = ($31>>>0)>($34>>>0);
 if ($35) {
  $3 = -17;
  $97 = $3;
  STACKTOP = sp;return ($97|0);
 }
 $36 = HEAP32[$9>>2]|0;
 $37 = $36&65535;
 $38 = $4;
 HEAP16[$38>>1] = $37;
 $13 = 0;
 $12 = 1;
 while(1) {
  $39 = $12;
  $40 = HEAP32[$9>>2]|0;
  $41 = ($39>>>0)<=($40>>>0);
  if (!($41)) {
   break;
  }
  $42 = $13;
  $16 = $42;
  $43 = $12;
  $44 = (($8) + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = $12;
  $47 = (($46) - 1)|0;
  $48 = $45 << $47;
  $49 = $13;
  $50 = (($49) + ($48))|0;
  $13 = $50;
  $51 = $16;
  $52 = $12;
  $53 = (($8) + ($52<<2)|0);
  HEAP32[$53>>2] = $51;
  $54 = $12;
  $55 = (($54) + 1)|0;
  $12 = $55;
 }
 $12 = 0;
 while(1) {
  $56 = $12;
  $57 = HEAP32[$11>>2]|0;
  $58 = ($56>>>0)<($57>>>0);
  if (!($58)) {
   break;
  }
  $59 = $12;
  $60 = (($7) + ($59)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $17 = $62;
  $63 = $17;
  $64 = 1 << $63;
  $65 = $64 >> 1;
  $18 = $65;
  $66 = $12;
  $67 = $66&255;
  HEAP8[$20>>0] = $67;
  $68 = HEAP32[$9>>2]|0;
  $69 = (($68) + 1)|0;
  $70 = $17;
  $71 = (($69) - ($70))|0;
  $72 = $71&255;
  $73 = ((($20)) + 1|0);
  HEAP8[$73>>0] = $72;
  $74 = $17;
  $75 = (($8) + ($74<<2)|0);
  $76 = HEAP32[$75>>2]|0;
  $19 = $76;
  while(1) {
   $77 = $19;
   $78 = $17;
   $79 = (($8) + ($78<<2)|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $18;
   $82 = (($80) + ($81))|0;
   $83 = ($77>>>0)<($82>>>0);
   if (!($83)) {
    break;
   }
   $84 = $15;
   $85 = $19;
   $86 = (($84) + ($85<<1)|0);
   ;HEAP8[$86>>0]=HEAP8[$20>>0]|0;HEAP8[$86+1>>0]=HEAP8[$20+1>>0]|0;
   $87 = $19;
   $88 = (($87) + 1)|0;
   $19 = $88;
  }
  $89 = $18;
  $90 = $17;
  $91 = (($8) + ($90<<2)|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (($92) + ($89))|0;
  HEAP32[$91>>2] = $93;
  $94 = $12;
  $95 = (($94) + 1)|0;
  $12 = $95;
 }
 $96 = $10;
 $3 = $96;
 $97 = $3;
 STACKTOP = sp;return ($97|0);
}
function _HUFv05_readStats($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $25 = $13;
 $17 = $25;
 $26 = $14;
 $27 = ($26|0)!=(0);
 if (!($27)) {
  $7 = -14;
  $173 = $7;
  STACKTOP = sp;return ($173|0);
 }
 $28 = $17;
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $18 = $30;
 $31 = $18;
 $32 = ($31>>>0)>=(128);
 $33 = $18;
 L5: do {
  if ($32) {
   $34 = ($33>>>0)>=(242);
   $35 = $18;
   if ($34) {
    $36 = (($35) - 242)|0;
    $37 = (2652 + ($36<<2)|0);
    $38 = HEAP32[$37>>2]|0;
    $19 = $38;
    $39 = $8;
    $40 = $9;
    _memset(($39|0),1,($40|0))|0;
    $18 = 0;
    break;
   }
   $41 = (($35) - 127)|0;
   $19 = $41;
   $42 = $19;
   $43 = (($42) + 1)|0;
   $44 = (($43>>>0) / 2)&-1;
   $18 = $44;
   $45 = $18;
   $46 = (($45) + 1)|0;
   $47 = $14;
   $48 = ($46>>>0)>($47>>>0);
   if ($48) {
    $7 = -14;
    $173 = $7;
    STACKTOP = sp;return ($173|0);
   }
   $49 = $19;
   $50 = $9;
   $51 = ($49>>>0)>=($50>>>0);
   if ($51) {
    $7 = -15;
    $173 = $7;
    STACKTOP = sp;return ($173|0);
   }
   $52 = $17;
   $53 = ((($52)) + 1|0);
   $17 = $53;
   $20 = 0;
   while(1) {
    $54 = $20;
    $55 = $19;
    $56 = ($54>>>0)<($55>>>0);
    if (!($56)) {
     break L5;
    }
    $57 = $17;
    $58 = $20;
    $59 = (($58>>>0) / 2)&-1;
    $60 = (($57) + ($59)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61&255;
    $63 = $62 >> 4;
    $64 = $63&255;
    $65 = $8;
    $66 = $20;
    $67 = (($65) + ($66)|0);
    HEAP8[$67>>0] = $64;
    $68 = $17;
    $69 = $20;
    $70 = (($69>>>0) / 2)&-1;
    $71 = (($68) + ($70)|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    $74 = $73 & 15;
    $75 = $74&255;
    $76 = $8;
    $77 = $20;
    $78 = (($77) + 1)|0;
    $79 = (($76) + ($78)|0);
    HEAP8[$79>>0] = $75;
    $80 = $20;
    $81 = (($80) + 2)|0;
    $20 = $81;
   }
  } else {
   $82 = (($33) + 1)|0;
   $83 = $14;
   $84 = ($82>>>0)>($83>>>0);
   if ($84) {
    $7 = -14;
    $173 = $7;
    STACKTOP = sp;return ($173|0);
   }
   $85 = $8;
   $86 = $9;
   $87 = (($86) - 1)|0;
   $88 = $17;
   $89 = ((($88)) + 1|0);
   $90 = $18;
   $91 = (_FSEv05_decompress($85,$87,$89,$90)|0);
   $19 = $91;
   $92 = $19;
   $93 = (_FSEv05_isError($92)|0);
   $94 = ($93|0)!=(0);
   if ($94) {
    $95 = $19;
    $7 = $95;
    $173 = $7;
    STACKTOP = sp;return ($173|0);
   }
  }
 } while(0);
 $96 = $10;
 dest=$96; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = 0;
 $20 = 0;
 while(1) {
  $97 = $20;
  $98 = $19;
  $99 = ($97>>>0)<($98>>>0);
  if (!($99)) {
   break;
  }
  $100 = $8;
  $101 = $20;
  $102 = (($100) + ($101)|0);
  $103 = HEAP8[$102>>0]|0;
  $104 = $103&255;
  $105 = ($104|0)>=(16);
  if ($105) {
   label = 20;
   break;
  }
  $106 = $10;
  $107 = $8;
  $108 = $20;
  $109 = (($107) + ($108)|0);
  $110 = HEAP8[$109>>0]|0;
  $111 = $110&255;
  $112 = (($106) + ($111<<2)|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($113) + 1)|0;
  HEAP32[$112>>2] = $114;
  $115 = $8;
  $116 = $20;
  $117 = (($115) + ($116)|0);
  $118 = HEAP8[$117>>0]|0;
  $119 = $118&255;
  $120 = 1 << $119;
  $121 = $120 >> 1;
  $122 = $15;
  $123 = (($122) + ($121))|0;
  $15 = $123;
  $124 = $20;
  $125 = (($124) + 1)|0;
  $20 = $125;
 }
 if ((label|0) == 20) {
  $7 = -15;
  $173 = $7;
  STACKTOP = sp;return ($173|0);
 }
 $126 = $15;
 $127 = ($126|0)==(0);
 if ($127) {
  $7 = -15;
  $173 = $7;
  STACKTOP = sp;return ($173|0);
 }
 $128 = $15;
 $129 = (_BITv05_highbit32($128)|0);
 $130 = (($129) + 1)|0;
 $16 = $130;
 $131 = $16;
 $132 = ($131>>>0)>(16);
 if ($132) {
  $7 = -15;
  $173 = $7;
  STACKTOP = sp;return ($173|0);
 }
 $133 = $16;
 $134 = 1 << $133;
 $21 = $134;
 $135 = $21;
 $136 = $15;
 $137 = (($135) - ($136))|0;
 $22 = $137;
 $138 = $22;
 $139 = (_BITv05_highbit32($138)|0);
 $140 = 1 << $139;
 $23 = $140;
 $141 = $22;
 $142 = (_BITv05_highbit32($141)|0);
 $143 = (($142) + 1)|0;
 $24 = $143;
 $144 = $23;
 $145 = $22;
 $146 = ($144|0)!=($145|0);
 if ($146) {
  $7 = -15;
  $173 = $7;
  STACKTOP = sp;return ($173|0);
 }
 $147 = $24;
 $148 = $147&255;
 $149 = $8;
 $150 = $19;
 $151 = (($149) + ($150)|0);
 HEAP8[$151>>0] = $148;
 $152 = $10;
 $153 = $24;
 $154 = (($152) + ($153<<2)|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = (($155) + 1)|0;
 HEAP32[$154>>2] = $156;
 $157 = $10;
 $158 = ((($157)) + 4|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ($159>>>0)<(2);
 if (!($160)) {
  $161 = $10;
  $162 = ((($161)) + 4|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = $163 & 1;
  $165 = ($164|0)!=(0);
  if (!($165)) {
   $166 = $19;
   $167 = (($166) + 1)|0;
   $168 = $11;
   HEAP32[$168>>2] = $167;
   $169 = $16;
   $170 = $12;
   HEAP32[$170>>2] = $169;
   $171 = $18;
   $172 = (($171) + 1)|0;
   $7 = $172;
   $173 = $7;
   STACKTOP = sp;return ($173|0);
  }
 }
 $7 = -15;
 $173 = $7;
 STACKTOP = sp;return ($173|0);
}
function _HUFv05_decompress1X2_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $16 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $18 = $6;
 $11 = $18;
 $19 = $11;
 $20 = $7;
 $21 = (($19) + ($20)|0);
 $12 = $21;
 $22 = $10;
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $13 = $24;
 $25 = $10;
 $14 = $25;
 $26 = $14;
 $27 = ((($26)) + 2|0);
 $15 = $27;
 $28 = $7;
 $29 = $9;
 $30 = ($28>>>0)<=($29>>>0);
 if ($30) {
  $5 = -13;
  $45 = $5;
  STACKTOP = sp;return ($45|0);
 }
 $31 = $8;
 $32 = $9;
 $33 = (_BITv05_initDStream($16,$31,$32)|0);
 $17 = $33;
 $34 = $17;
 $35 = (_HUFv05_isError($34)|0);
 $36 = ($35|0)!=(0);
 if ($36) {
  $37 = $17;
  $5 = $37;
  $45 = $5;
  STACKTOP = sp;return ($45|0);
 }
 $38 = $11;
 $39 = $12;
 $40 = $15;
 $41 = $13;
 (_HUFv05_decodeStreamX2($38,$16,$39,$40,$41)|0);
 $42 = (_BITv05_endOfDStream($16)|0);
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = $7;
  $5 = $44;
  $45 = $5;
  STACKTOP = sp;return ($45|0);
 } else {
  $5 = -15;
  $45 = $5;
  STACKTOP = sp;return ($45|0);
 }
 return (0)|0;
}
function _HUFv05_decodeStreamX2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $10 = $11;
 while(1) {
  $12 = $6;
  $13 = (_BITv05_reloadDStream($12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $7;
  $17 = ((($16)) + -4|0);
  $18 = ($15>>>0)<=($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = (_MEM_64bits_364()|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $6;
   $22 = $8;
   $23 = $9;
   $24 = (_HUFv05_decodeSymbolX2($21,$22,$23)|0);
   $25 = $5;
   $26 = ((($25)) + 1|0);
   $5 = $26;
   HEAP8[$25>>0] = $24;
  }
  (_MEM_64bits_364()|0);
  $27 = $6;
  $28 = $8;
  $29 = $9;
  $30 = (_HUFv05_decodeSymbolX2($27,$28,$29)|0);
  $31 = $5;
  $32 = ((($31)) + 1|0);
  $5 = $32;
  HEAP8[$31>>0] = $30;
  $33 = (_MEM_64bits_364()|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $6;
   $36 = $8;
   $37 = $9;
   $38 = (_HUFv05_decodeSymbolX2($35,$36,$37)|0);
   $39 = $5;
   $40 = ((($39)) + 1|0);
   $5 = $40;
   HEAP8[$39>>0] = $38;
  }
  $41 = $6;
  $42 = $8;
  $43 = $9;
  $44 = (_HUFv05_decodeSymbolX2($41,$42,$43)|0);
  $45 = $5;
  $46 = ((($45)) + 1|0);
  $5 = $46;
  HEAP8[$45>>0] = $44;
 }
 while(1) {
  $47 = $6;
  $48 = (_BITv05_reloadDStream($47)|0);
  $49 = ($48|0)==(0);
  if (!($49)) {
   break;
  }
  $50 = $5;
  $51 = $7;
  $52 = ($50>>>0)<($51>>>0);
  if (!($52)) {
   break;
  }
  $53 = $6;
  $54 = $8;
  $55 = $9;
  $56 = (_HUFv05_decodeSymbolX2($53,$54,$55)|0);
  $57 = $5;
  $58 = ((($57)) + 1|0);
  $5 = $58;
  HEAP8[$57>>0] = $56;
 }
 while(1) {
  $59 = $5;
  $60 = $7;
  $61 = ($59>>>0)<($60>>>0);
  if (!($61)) {
   break;
  }
  $62 = $6;
  $63 = $8;
  $64 = $9;
  $65 = (_HUFv05_decodeSymbolX2($62,$63,$64)|0);
  $66 = $5;
  $67 = ((($66)) + 1|0);
  $5 = $67;
  HEAP8[$66>>0] = $65;
 }
 $68 = $7;
 $69 = $10;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 STACKTOP = sp;return ($72|0);
}
function _MEM_64bits_364() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _HUFv05_decodeSymbolX2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $5;
 $10 = (_BITv05_lookBitsFast($8,$9)|0);
 $6 = $10;
 $11 = $4;
 $12 = $6;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP8[$13>>0]|0;
 $7 = $14;
 $15 = $3;
 $16 = $4;
 $17 = $6;
 $18 = (($16) + ($17<<1)|0);
 $19 = ((($18)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 _BITv05_skipBits($15,$21);
 $22 = $7;
 STACKTOP = sp;return ($22|0);
}
function _HUFv05_decompress1X2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $9 = sp + 28|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 _memset(($9|0),0,8194)|0;
 HEAP16[$9>>1] = 12;
 $12 = $7;
 $10 = $12;
 $13 = $7;
 $14 = $8;
 $15 = (_HUFv05_readDTableX2($9,$13,$14)|0);
 $11 = $15;
 $16 = $11;
 $17 = (_HUFv05_isError($16)|0);
 $18 = ($17|0)!=(0);
 $19 = $11;
 if ($18) {
  $4 = $19;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $20 = $8;
 $21 = ($19>>>0)>=($20>>>0);
 if ($21) {
  $4 = -14;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 } else {
  $22 = $11;
  $23 = $10;
  $24 = (($23) + ($22)|0);
  $10 = $24;
  $25 = $11;
  $26 = $8;
  $27 = (($26) - ($25))|0;
  $8 = $27;
  $28 = $5;
  $29 = $6;
  $30 = $10;
  $31 = $8;
  $32 = (_HUFv05_decompress1X2_usingDTable($28,$29,$30,$31,$9)|0);
  $4 = $32;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _HUFv05_decompress4X2_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $18 = sp + 120|0;
 $19 = sp + 104|0;
 $20 = sp + 88|0;
 $21 = sp + 72|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $39 = $8;
 $11 = $39;
 $40 = $6;
 $12 = $40;
 $41 = $12;
 $42 = $7;
 $43 = (($41) + ($42)|0);
 $13 = $43;
 $44 = $10;
 $14 = $44;
 $45 = $14;
 $46 = ((($45)) + 2|0);
 $15 = $46;
 $47 = $10;
 $48 = HEAP16[$47>>1]|0;
 $49 = $48&65535;
 $16 = $49;
 $50 = $11;
 $51 = (_MEM_readLE16_365($50)|0);
 $52 = $51&65535;
 $22 = $52;
 $53 = $11;
 $54 = ((($53)) + 2|0);
 $55 = (_MEM_readLE16_365($54)|0);
 $56 = $55&65535;
 $23 = $56;
 $57 = $11;
 $58 = ((($57)) + 4|0);
 $59 = (_MEM_readLE16_365($58)|0);
 $60 = $59&65535;
 $24 = $60;
 $61 = $11;
 $62 = ((($61)) + 6|0);
 $26 = $62;
 $63 = $26;
 $64 = $22;
 $65 = (($63) + ($64)|0);
 $27 = $65;
 $66 = $27;
 $67 = $23;
 $68 = (($66) + ($67)|0);
 $28 = $68;
 $69 = $28;
 $70 = $24;
 $71 = (($69) + ($70)|0);
 $29 = $71;
 $72 = $7;
 $73 = (($72) + 3)|0;
 $74 = (($73>>>0) / 4)&-1;
 $30 = $74;
 $75 = $12;
 $76 = $30;
 $77 = (($75) + ($76)|0);
 $31 = $77;
 $78 = $31;
 $79 = $30;
 $80 = (($78) + ($79)|0);
 $32 = $80;
 $81 = $32;
 $82 = $30;
 $83 = (($81) + ($82)|0);
 $33 = $83;
 $84 = $12;
 $34 = $84;
 $85 = $31;
 $35 = $85;
 $86 = $32;
 $36 = $86;
 $87 = $33;
 $37 = $87;
 $88 = $9;
 $89 = ($88>>>0)<(10);
 if ($89) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $90 = $9;
 $91 = $22;
 $92 = $23;
 $93 = (($91) + ($92))|0;
 $94 = $24;
 $95 = (($93) + ($94))|0;
 $96 = (($95) + 6)|0;
 $97 = (($90) - ($96))|0;
 $25 = $97;
 $98 = $25;
 $99 = $9;
 $100 = ($98>>>0)>($99>>>0);
 if ($100) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $101 = $26;
 $102 = $22;
 $103 = (_BITv05_initDStream($18,$101,$102)|0);
 $17 = $103;
 $104 = $17;
 $105 = (_HUFv05_isError($104)|0);
 $106 = ($105|0)!=(0);
 if ($106) {
  $107 = $17;
  $5 = $107;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $108 = $27;
 $109 = $23;
 $110 = (_BITv05_initDStream($19,$108,$109)|0);
 $17 = $110;
 $111 = $17;
 $112 = (_HUFv05_isError($111)|0);
 $113 = ($112|0)!=(0);
 if ($113) {
  $114 = $17;
  $5 = $114;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $115 = $28;
 $116 = $24;
 $117 = (_BITv05_initDStream($20,$115,$116)|0);
 $17 = $117;
 $118 = $17;
 $119 = (_HUFv05_isError($118)|0);
 $120 = ($119|0)!=(0);
 if ($120) {
  $121 = $17;
  $5 = $121;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $122 = $29;
 $123 = $25;
 $124 = (_BITv05_initDStream($21,$122,$123)|0);
 $17 = $124;
 $125 = $17;
 $126 = (_HUFv05_isError($125)|0);
 $127 = ($126|0)!=(0);
 if ($127) {
  $128 = $17;
  $5 = $128;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $129 = (_BITv05_reloadDStream($18)|0);
 $130 = (_BITv05_reloadDStream($19)|0);
 $131 = $129 | $130;
 $132 = (_BITv05_reloadDStream($20)|0);
 $133 = $131 | $132;
 $134 = (_BITv05_reloadDStream($21)|0);
 $135 = $133 | $134;
 $38 = $135;
 while(1) {
  $136 = $38;
  $137 = ($136|0)==(0);
  if (!($137)) {
   break;
  }
  $138 = $37;
  $139 = $13;
  $140 = ((($139)) + -7|0);
  $141 = ($138>>>0)<($140>>>0);
  if (!($141)) {
   break;
  }
  $142 = (_MEM_64bits_364()|0);
  $143 = ($142|0)!=(0);
  if ($143) {
   $144 = $15;
   $145 = $16;
   $146 = (_HUFv05_decodeSymbolX2($18,$144,$145)|0);
   $147 = $34;
   $148 = ((($147)) + 1|0);
   $34 = $148;
   HEAP8[$147>>0] = $146;
  }
  $149 = (_MEM_64bits_364()|0);
  $150 = ($149|0)!=(0);
  if ($150) {
   $151 = $15;
   $152 = $16;
   $153 = (_HUFv05_decodeSymbolX2($19,$151,$152)|0);
   $154 = $35;
   $155 = ((($154)) + 1|0);
   $35 = $155;
   HEAP8[$154>>0] = $153;
  }
  $156 = (_MEM_64bits_364()|0);
  $157 = ($156|0)!=(0);
  if ($157) {
   $158 = $15;
   $159 = $16;
   $160 = (_HUFv05_decodeSymbolX2($20,$158,$159)|0);
   $161 = $36;
   $162 = ((($161)) + 1|0);
   $36 = $162;
   HEAP8[$161>>0] = $160;
  }
  $163 = (_MEM_64bits_364()|0);
  $164 = ($163|0)!=(0);
  if ($164) {
   $165 = $15;
   $166 = $16;
   $167 = (_HUFv05_decodeSymbolX2($21,$165,$166)|0);
   $168 = $37;
   $169 = ((($168)) + 1|0);
   $37 = $169;
   HEAP8[$168>>0] = $167;
  }
  (_MEM_64bits_364()|0);
  $170 = $15;
  $171 = $16;
  $172 = (_HUFv05_decodeSymbolX2($18,$170,$171)|0);
  $173 = $34;
  $174 = ((($173)) + 1|0);
  $34 = $174;
  HEAP8[$173>>0] = $172;
  (_MEM_64bits_364()|0);
  $175 = $15;
  $176 = $16;
  $177 = (_HUFv05_decodeSymbolX2($19,$175,$176)|0);
  $178 = $35;
  $179 = ((($178)) + 1|0);
  $35 = $179;
  HEAP8[$178>>0] = $177;
  (_MEM_64bits_364()|0);
  $180 = $15;
  $181 = $16;
  $182 = (_HUFv05_decodeSymbolX2($20,$180,$181)|0);
  $183 = $36;
  $184 = ((($183)) + 1|0);
  $36 = $184;
  HEAP8[$183>>0] = $182;
  (_MEM_64bits_364()|0);
  $185 = $15;
  $186 = $16;
  $187 = (_HUFv05_decodeSymbolX2($21,$185,$186)|0);
  $188 = $37;
  $189 = ((($188)) + 1|0);
  $37 = $189;
  HEAP8[$188>>0] = $187;
  $190 = (_MEM_64bits_364()|0);
  $191 = ($190|0)!=(0);
  if ($191) {
   $192 = $15;
   $193 = $16;
   $194 = (_HUFv05_decodeSymbolX2($18,$192,$193)|0);
   $195 = $34;
   $196 = ((($195)) + 1|0);
   $34 = $196;
   HEAP8[$195>>0] = $194;
  }
  $197 = (_MEM_64bits_364()|0);
  $198 = ($197|0)!=(0);
  if ($198) {
   $199 = $15;
   $200 = $16;
   $201 = (_HUFv05_decodeSymbolX2($19,$199,$200)|0);
   $202 = $35;
   $203 = ((($202)) + 1|0);
   $35 = $203;
   HEAP8[$202>>0] = $201;
  }
  $204 = (_MEM_64bits_364()|0);
  $205 = ($204|0)!=(0);
  if ($205) {
   $206 = $15;
   $207 = $16;
   $208 = (_HUFv05_decodeSymbolX2($20,$206,$207)|0);
   $209 = $36;
   $210 = ((($209)) + 1|0);
   $36 = $210;
   HEAP8[$209>>0] = $208;
  }
  $211 = (_MEM_64bits_364()|0);
  $212 = ($211|0)!=(0);
  if ($212) {
   $213 = $15;
   $214 = $16;
   $215 = (_HUFv05_decodeSymbolX2($21,$213,$214)|0);
   $216 = $37;
   $217 = ((($216)) + 1|0);
   $37 = $217;
   HEAP8[$216>>0] = $215;
  }
  $218 = $15;
  $219 = $16;
  $220 = (_HUFv05_decodeSymbolX2($18,$218,$219)|0);
  $221 = $34;
  $222 = ((($221)) + 1|0);
  $34 = $222;
  HEAP8[$221>>0] = $220;
  $223 = $15;
  $224 = $16;
  $225 = (_HUFv05_decodeSymbolX2($19,$223,$224)|0);
  $226 = $35;
  $227 = ((($226)) + 1|0);
  $35 = $227;
  HEAP8[$226>>0] = $225;
  $228 = $15;
  $229 = $16;
  $230 = (_HUFv05_decodeSymbolX2($20,$228,$229)|0);
  $231 = $36;
  $232 = ((($231)) + 1|0);
  $36 = $232;
  HEAP8[$231>>0] = $230;
  $233 = $15;
  $234 = $16;
  $235 = (_HUFv05_decodeSymbolX2($21,$233,$234)|0);
  $236 = $37;
  $237 = ((($236)) + 1|0);
  $37 = $237;
  HEAP8[$236>>0] = $235;
  $238 = (_BITv05_reloadDStream($18)|0);
  $239 = (_BITv05_reloadDStream($19)|0);
  $240 = $238 | $239;
  $241 = (_BITv05_reloadDStream($20)|0);
  $242 = $240 | $241;
  $243 = (_BITv05_reloadDStream($21)|0);
  $244 = $242 | $243;
  $38 = $244;
 }
 $245 = $34;
 $246 = $31;
 $247 = ($245>>>0)>($246>>>0);
 if ($247) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $248 = $35;
 $249 = $32;
 $250 = ($248>>>0)>($249>>>0);
 if ($250) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $251 = $36;
 $252 = $33;
 $253 = ($251>>>0)>($252>>>0);
 if ($253) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $254 = $34;
 $255 = $31;
 $256 = $15;
 $257 = $16;
 (_HUFv05_decodeStreamX2($254,$18,$255,$256,$257)|0);
 $258 = $35;
 $259 = $32;
 $260 = $15;
 $261 = $16;
 (_HUFv05_decodeStreamX2($258,$19,$259,$260,$261)|0);
 $262 = $36;
 $263 = $33;
 $264 = $15;
 $265 = $16;
 (_HUFv05_decodeStreamX2($262,$20,$263,$264,$265)|0);
 $266 = $37;
 $267 = $13;
 $268 = $15;
 $269 = $16;
 (_HUFv05_decodeStreamX2($266,$21,$267,$268,$269)|0);
 $270 = (_BITv05_endOfDStream($18)|0);
 $271 = (_BITv05_endOfDStream($19)|0);
 $272 = $270 & $271;
 $273 = (_BITv05_endOfDStream($20)|0);
 $274 = $272 & $273;
 $275 = (_BITv05_endOfDStream($21)|0);
 $276 = $274 & $275;
 $38 = $276;
 $277 = $38;
 $278 = ($277|0)!=(0);
 if ($278) {
  $279 = $7;
  $5 = $279;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 } else {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 return (0)|0;
}
function _MEM_readLE16_365($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_MEM_isLittleEndian_355()|0);
 $5 = ($4|0)!=(0);
 $6 = $2;
 if ($5) {
  $7 = (_MEM_read16_366($6)|0);
  $1 = $7;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $3 = $6;
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $3;
  $12 = ((($11)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = (($10) + ($15))|0;
  $17 = $16&65535;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _MEM_read16_366($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAPU8[$2>>0]|(HEAPU8[$2+1>>0]<<8);
 STACKTOP = sp;return ($3|0);
}
function _HUFv05_decompress4X2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $9 = sp + 28|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 _memset(($9|0),0,8194)|0;
 HEAP16[$9>>1] = 12;
 $12 = $7;
 $10 = $12;
 $13 = $7;
 $14 = $8;
 $15 = (_HUFv05_readDTableX2($9,$13,$14)|0);
 $11 = $15;
 $16 = $11;
 $17 = (_HUFv05_isError($16)|0);
 $18 = ($17|0)!=(0);
 $19 = $11;
 if ($18) {
  $4 = $19;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $20 = $8;
 $21 = ($19>>>0)>=($20>>>0);
 if ($21) {
  $4 = -14;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 } else {
  $22 = $11;
  $23 = $10;
  $24 = (($23) + ($22)|0);
  $10 = $24;
  $25 = $11;
  $26 = $8;
  $27 = (($26) - ($25))|0;
  $8 = $27;
  $28 = $5;
  $29 = $6;
  $30 = $10;
  $31 = $8;
  $32 = (_HUFv05_decompress4X2_usingDTable($28,$29,$30,$31,$9)|0);
  $4 = $32;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _HUFv05_readDTableX4($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2112|0);
 $7 = sp + 1856|0;
 $8 = sp + 1344|0;
 $9 = sp + 1256|0;
 $10 = sp + 1184|0;
 $12 = sp + 88|0;
 $13 = sp + 84|0;
 $16 = sp + 72|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 dest=$9; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$10; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $35 = ((($10)) + 4|0);
 $11 = $35;
 $36 = $4;
 $37 = HEAP32[$36>>2]|0;
 $17 = $37;
 $38 = $4;
 $19 = $38;
 $39 = $19;
 $40 = ((($39)) + 4|0);
 $20 = $40;
 $41 = $17;
 $42 = ($41>>>0)>(16);
 if ($42) {
  $3 = -17;
  $159 = $3;
  STACKTOP = sp;return ($159|0);
 }
 $43 = $5;
 $44 = $6;
 $45 = (_HUFv05_readStats($7,256,$9,$16,$13,$43,$44)|0);
 $18 = $45;
 $46 = $18;
 $47 = (_HUFv05_isError($46)|0);
 $48 = ($47|0)!=(0);
 if ($48) {
  $49 = $18;
  $3 = $49;
  $159 = $3;
  STACKTOP = sp;return ($159|0);
 }
 $50 = HEAP32[$13>>2]|0;
 $51 = $17;
 $52 = ($50>>>0)>($51>>>0);
 if ($52) {
  $3 = -17;
  $159 = $3;
  STACKTOP = sp;return ($159|0);
 }
 $53 = HEAP32[$13>>2]|0;
 $14 = $53;
 while(1) {
  $54 = $14;
  $55 = (($9) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($56|0)==(0);
  if (!($57)) {
   break;
  }
  $58 = $14;
  $59 = (($58) + -1)|0;
  $14 = $59;
 }
 $22 = 0;
 $21 = 1;
 while(1) {
  $60 = $21;
  $61 = $14;
  $62 = ($60>>>0)<=($61>>>0);
  $63 = $22;
  if (!($62)) {
   break;
  }
  $23 = $63;
  $64 = $21;
  $65 = (($9) + ($64<<2)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $22;
  $68 = (($67) + ($66))|0;
  $22 = $68;
  $69 = $23;
  $70 = $11;
  $71 = $21;
  $72 = (($70) + ($71<<2)|0);
  HEAP32[$72>>2] = $69;
  $73 = $21;
  $74 = (($73) + 1)|0;
  $21 = $74;
 }
 $75 = $11;
 HEAP32[$75>>2] = $63;
 $76 = $22;
 $15 = $76;
 $24 = 0;
 while(1) {
  $77 = $24;
  $78 = HEAP32[$16>>2]|0;
  $79 = ($77>>>0)<($78>>>0);
  if (!($79)) {
   break;
  }
  $80 = $24;
  $81 = (($7) + ($80)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82&255;
  $25 = $83;
  $84 = $11;
  $85 = $25;
  $86 = (($84) + ($85<<2)|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (($87) + 1)|0;
  HEAP32[$86>>2] = $88;
  $26 = $87;
  $89 = $24;
  $90 = $89&255;
  $91 = $26;
  $92 = (($8) + ($91<<1)|0);
  HEAP8[$92>>0] = $90;
  $93 = $25;
  $94 = $93&255;
  $95 = $26;
  $96 = (($8) + ($95<<1)|0);
  $97 = ((($96)) + 1|0);
  HEAP8[$97>>0] = $94;
  $98 = $24;
  $99 = (($98) + 1)|0;
  $24 = $99;
 }
 $100 = $11;
 HEAP32[$100>>2] = 0;
 $101 = HEAP32[$13>>2]|0;
 $102 = (($101) + 1)|0;
 $103 = $14;
 $104 = (($102) - ($103))|0;
 $27 = $104;
 $28 = 0;
 $105 = $17;
 $106 = HEAP32[$13>>2]|0;
 $107 = (($105) - ($106))|0;
 $108 = (($107) - 1)|0;
 $31 = $108;
 $32 = $12;
 $29 = 1;
 while(1) {
  $109 = $29;
  $110 = $14;
  $111 = ($109>>>0)<=($110>>>0);
  if (!($111)) {
   break;
  }
  $112 = $28;
  $33 = $112;
  $113 = $29;
  $114 = (($9) + ($113<<2)|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $29;
  $117 = $31;
  $118 = (($116) + ($117))|0;
  $119 = $115 << $118;
  $120 = $28;
  $121 = (($120) + ($119))|0;
  $28 = $121;
  $122 = $33;
  $123 = $32;
  $124 = $29;
  $125 = (($123) + ($124<<2)|0);
  HEAP32[$125>>2] = $122;
  $126 = $29;
  $127 = (($126) + 1)|0;
  $29 = $127;
 }
 $128 = $27;
 $30 = $128;
 while(1) {
  $129 = $30;
  $130 = $17;
  $131 = $27;
  $132 = (($130) - ($131))|0;
  $133 = ($129>>>0)<=($132>>>0);
  if (!($133)) {
   break;
  }
  $134 = $30;
  $135 = (($12) + (($134*68)|0)|0);
  $34 = $135;
  $29 = 1;
  while(1) {
   $136 = $29;
   $137 = $14;
   $138 = ($136>>>0)<=($137>>>0);
   if (!($138)) {
    break;
   }
   $139 = $32;
   $140 = $29;
   $141 = (($139) + ($140<<2)|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $30;
   $144 = $142 >>> $143;
   $145 = $34;
   $146 = $29;
   $147 = (($145) + ($146<<2)|0);
   HEAP32[$147>>2] = $144;
   $148 = $29;
   $149 = (($148) + 1)|0;
   $29 = $149;
  }
  $150 = $30;
  $151 = (($150) + 1)|0;
  $30 = $151;
 }
 $152 = $20;
 $153 = $17;
 $154 = $15;
 $155 = $14;
 $156 = HEAP32[$13>>2]|0;
 $157 = (($156) + 1)|0;
 _HUFv05_fillDTableX4($152,$153,$8,$154,$10,$12,$155,$157);
 $158 = $18;
 $3 = $158;
 $159 = $3;
 STACKTOP = sp;return ($159|0);
}
function _HUFv05_fillDTableX4($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $16 = sp + 44|0;
 $29 = sp + 144|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $30 = $15;
 $31 = $9;
 $32 = (($30) - ($31))|0;
 $17 = $32;
 $33 = $15;
 $34 = $14;
 $35 = (($33) - ($34))|0;
 $18 = $35;
 $36 = $13;
 dest=$16; src=$36; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $19 = 0;
 while(1) {
  $37 = $19;
  $38 = $11;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $40 = $10;
  $41 = $19;
  $42 = (($40) + ($41<<1)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $20 = $44;
  $45 = $10;
  $46 = $19;
  $47 = (($45) + ($46<<1)|0);
  $48 = ((($47)) + 1|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $21 = $50;
  $51 = $15;
  $52 = $21;
  $53 = (($51) - ($52))|0;
  $22 = $53;
  $54 = $21;
  $55 = (($16) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $23 = $56;
  $57 = $9;
  $58 = $22;
  $59 = (($57) - ($58))|0;
  $60 = 1 << $59;
  $24 = $60;
  $61 = $9;
  $62 = $22;
  $63 = (($61) - ($62))|0;
  $64 = $18;
  $65 = ($63>>>0)>=($64>>>0);
  L4: do {
   if ($65) {
    $66 = $22;
    $67 = $17;
    $68 = (($66) + ($67))|0;
    $26 = $68;
    $69 = $26;
    $70 = ($69|0)<(1);
    $$ = $70 ? 1 : $68;
    $26 = $$;
    $71 = $12;
    $72 = $26;
    $73 = (($71) + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $25 = $74;
    $75 = $8;
    $76 = $23;
    $77 = (($75) + ($76<<2)|0);
    $78 = $9;
    $79 = $22;
    $80 = (($78) - ($79))|0;
    $81 = $22;
    $82 = $13;
    $83 = $22;
    $84 = (($82) + (($83*68)|0)|0);
    $85 = $26;
    $86 = $10;
    $87 = $25;
    $88 = (($86) + ($87<<1)|0);
    $89 = $11;
    $90 = $25;
    $91 = (($89) - ($90))|0;
    $92 = $15;
    $93 = $20;
    _HUFv05_fillDTableX4Level2($77,$80,$81,$84,$85,$88,$91,$92,$93);
   } else {
    $94 = $23;
    $95 = $24;
    $96 = (($94) + ($95))|0;
    $28 = $96;
    $97 = $20;
    _MEM_writeLE16_367($29,$97);
    $98 = $22;
    $99 = $98&255;
    $100 = ((($29)) + 2|0);
    HEAP8[$100>>0] = $99;
    $101 = ((($29)) + 3|0);
    HEAP8[$101>>0] = 1;
    $102 = $23;
    $27 = $102;
    while(1) {
     $103 = $27;
     $104 = $28;
     $105 = ($103>>>0)<($104>>>0);
     if (!($105)) {
      break L4;
     }
     $106 = $8;
     $107 = $27;
     $108 = (($106) + ($107<<2)|0);
     ;HEAP16[$108>>1]=HEAP16[$29>>1]|0;HEAP16[$108+2>>1]=HEAP16[$29+2>>1]|0;
     $109 = $27;
     $110 = (($109) + 1)|0;
     $27 = $110;
    }
   }
  } while(0);
  $111 = $24;
  $112 = $21;
  $113 = (($16) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + ($111))|0;
  HEAP32[$113>>2] = $115;
  $116 = $19;
  $117 = (($116) + 1)|0;
  $19 = $117;
 }
 STACKTOP = sp;return;
}
function _HUFv05_fillDTableX4Level2($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $18 = sp + 140|0;
 $19 = sp + 40|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $30 = $12;
 dest=$19; src=$30; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $31 = $13;
 $32 = ($31|0)>(1);
 L1: do {
  if ($32) {
   $33 = $13;
   $34 = (($19) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $22 = $35;
   $36 = $17;
   _MEM_writeLE16_367($18,$36);
   $37 = $11;
   $38 = $37&255;
   $39 = ((($18)) + 2|0);
   HEAP8[$39>>0] = $38;
   $40 = ((($18)) + 3|0);
   HEAP8[$40>>0] = 1;
   $21 = 0;
   while(1) {
    $41 = $21;
    $42 = $22;
    $43 = ($41>>>0)<($42>>>0);
    if (!($43)) {
     break L1;
    }
    $44 = $9;
    $45 = $21;
    $46 = (($44) + ($45<<2)|0);
    ;HEAP16[$46>>1]=HEAP16[$18>>1]|0;HEAP16[$46+2>>1]=HEAP16[$18+2>>1]|0;
    $47 = $21;
    $48 = (($47) + 1)|0;
    $21 = $48;
   }
  }
 } while(0);
 $20 = 0;
 while(1) {
  $49 = $20;
  $50 = $15;
  $51 = ($49>>>0)<($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $14;
  $53 = $20;
  $54 = (($52) + ($53<<1)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $23 = $56;
  $57 = $14;
  $58 = $20;
  $59 = (($57) + ($58<<1)|0);
  $60 = ((($59)) + 1|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $24 = $62;
  $63 = $16;
  $64 = $24;
  $65 = (($63) - ($64))|0;
  $25 = $65;
  $66 = $10;
  $67 = $25;
  $68 = (($66) - ($67))|0;
  $69 = 1 << $68;
  $26 = $69;
  $70 = $24;
  $71 = (($19) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $27 = $72;
  $73 = $27;
  $28 = $73;
  $74 = $27;
  $75 = $26;
  $76 = (($74) + ($75))|0;
  $29 = $76;
  $77 = $17;
  $78 = $77&65535;
  $79 = $23;
  $80 = $79 << 8;
  $81 = (($78) + ($80))|0;
  $82 = $81&65535;
  _MEM_writeLE16_367($18,$82);
  $83 = $25;
  $84 = $11;
  $85 = (($83) + ($84))|0;
  $86 = $85&255;
  $87 = ((($18)) + 2|0);
  HEAP8[$87>>0] = $86;
  $88 = ((($18)) + 3|0);
  HEAP8[$88>>0] = 2;
  while(1) {
   $89 = $9;
   $90 = $28;
   $91 = (($90) + 1)|0;
   $28 = $91;
   $92 = (($89) + ($90<<2)|0);
   ;HEAP16[$92>>1]=HEAP16[$18>>1]|0;HEAP16[$92+2>>1]=HEAP16[$18+2>>1]|0;
   $93 = $28;
   $94 = $29;
   $95 = ($93>>>0)<($94>>>0);
   if (!($95)) {
    break;
   }
  }
  $96 = $26;
  $97 = $24;
  $98 = (($19) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + ($96))|0;
  HEAP32[$98>>2] = $100;
  $101 = $20;
  $102 = (($101) + 1)|0;
  $20 = $102;
 }
 STACKTOP = sp;return;
}
function _MEM_writeLE16_367($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_MEM_isLittleEndian_355()|0);
 $6 = ($5|0)!=(0);
 $7 = $2;
 if ($6) {
  $8 = $3;
  _MEM_write16_368($7,$8);
  STACKTOP = sp;return;
 } else {
  $4 = $7;
  $9 = $3;
  $10 = $9&255;
  $11 = $4;
  HEAP8[$11>>0] = $10;
  $12 = $3;
  $13 = $12&65535;
  $14 = $13 >> 8;
  $15 = $14&255;
  $16 = $4;
  $17 = ((($16)) + 1|0);
  HEAP8[$17>>0] = $15;
  STACKTOP = sp;return;
 }
}
function _MEM_write16_368($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 HEAP8[$5>>0]=$4&255;HEAP8[$5+1>>0]=$4>>8;
 STACKTOP = sp;return;
}
function _HUFv05_decompress1X4_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $18 = sp;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $19 = $8;
 $11 = $19;
 $20 = $6;
 $12 = $20;
 $21 = $12;
 $22 = $7;
 $23 = (($21) + ($22)|0);
 $13 = $23;
 $24 = $10;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $10;
 $15 = $26;
 $27 = $15;
 $28 = ((($27)) + 4|0);
 $16 = $28;
 $29 = $11;
 $30 = $9;
 $31 = (_BITv05_initDStream($18,$29,$30)|0);
 $17 = $31;
 $32 = $17;
 $33 = (_HUFv05_isError($32)|0);
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $17;
  $5 = $35;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 }
 $36 = $12;
 $37 = $13;
 $38 = $16;
 $39 = $14;
 (_HUFv05_decodeStreamX4($36,$18,$37,$38,$39)|0);
 $40 = (_BITv05_endOfDStream($18)|0);
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $7;
  $5 = $42;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 } else {
  $5 = -15;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _HUFv05_decodeStreamX4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $10 = $11;
 while(1) {
  $12 = $6;
  $13 = (_BITv05_reloadDStream($12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $7;
  $17 = ((($16)) + -7|0);
  $18 = ($15>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = (_MEM_64bits_364()|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $5;
   $22 = $6;
   $23 = $8;
   $24 = $9;
   $25 = (_HUFv05_decodeSymbolX4($21,$22,$23,$24)|0);
   $26 = $5;
   $27 = (($26) + ($25)|0);
   $5 = $27;
  }
  (_MEM_64bits_364()|0);
  $28 = $5;
  $29 = $6;
  $30 = $8;
  $31 = $9;
  $32 = (_HUFv05_decodeSymbolX4($28,$29,$30,$31)|0);
  $33 = $5;
  $34 = (($33) + ($32)|0);
  $5 = $34;
  $35 = (_MEM_64bits_364()|0);
  $36 = ($35|0)!=(0);
  if ($36) {
   $37 = $5;
   $38 = $6;
   $39 = $8;
   $40 = $9;
   $41 = (_HUFv05_decodeSymbolX4($37,$38,$39,$40)|0);
   $42 = $5;
   $43 = (($42) + ($41)|0);
   $5 = $43;
  }
  $44 = $5;
  $45 = $6;
  $46 = $8;
  $47 = $9;
  $48 = (_HUFv05_decodeSymbolX4($44,$45,$46,$47)|0);
  $49 = $5;
  $50 = (($49) + ($48)|0);
  $5 = $50;
 }
 while(1) {
  $51 = $6;
  $52 = (_BITv05_reloadDStream($51)|0);
  $53 = ($52|0)==(0);
  if (!($53)) {
   break;
  }
  $54 = $5;
  $55 = $7;
  $56 = ((($55)) + -2|0);
  $57 = ($54>>>0)<=($56>>>0);
  if (!($57)) {
   break;
  }
  $58 = $5;
  $59 = $6;
  $60 = $8;
  $61 = $9;
  $62 = (_HUFv05_decodeSymbolX4($58,$59,$60,$61)|0);
  $63 = $5;
  $64 = (($63) + ($62)|0);
  $5 = $64;
 }
 while(1) {
  $65 = $5;
  $66 = $7;
  $67 = ((($66)) + -2|0);
  $68 = ($65>>>0)<=($67>>>0);
  $69 = $5;
  if (!($68)) {
   break;
  }
  $70 = $6;
  $71 = $8;
  $72 = $9;
  $73 = (_HUFv05_decodeSymbolX4($69,$70,$71,$72)|0);
  $74 = $5;
  $75 = (($74) + ($73)|0);
  $5 = $75;
 }
 $76 = $7;
 $77 = ($69>>>0)<($76>>>0);
 if (!($77)) {
  $85 = $5;
  $86 = $10;
  $87 = $85;
  $88 = $86;
  $89 = (($87) - ($88))|0;
  STACKTOP = sp;return ($89|0);
 }
 $78 = $5;
 $79 = $6;
 $80 = $8;
 $81 = $9;
 $82 = (_HUFv05_decodeLastSymbolX4($78,$79,$80,$81)|0);
 $83 = $5;
 $84 = (($83) + ($82)|0);
 $5 = $84;
 $85 = $5;
 $86 = $10;
 $87 = $85;
 $88 = $86;
 $89 = (($87) - ($88))|0;
 STACKTOP = sp;return ($89|0);
}
function _HUFv05_decodeSymbolX4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (_BITv05_lookBitsFast($9,$10)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;HEAP8[$12+1>>0]=HEAP8[$15+1>>0]|0;
 $16 = $5;
 $17 = $6;
 $18 = $8;
 $19 = (($17) + ($18<<2)|0);
 $20 = ((($19)) + 2|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 _BITv05_skipBits($16,$22);
 $23 = $6;
 $24 = $8;
 $25 = (($23) + ($24<<2)|0);
 $26 = ((($25)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 STACKTOP = sp;return ($28|0);
}
function _HUFv05_decodeLastSymbolX4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (_BITv05_lookBitsFast($9,$10)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
 $16 = $6;
 $17 = $8;
 $18 = (($16) + ($17<<2)|0);
 $19 = ((($18)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(1);
 $23 = $5;
 if ($22) {
  $24 = $6;
  $25 = $8;
  $26 = (($24) + ($25<<2)|0);
  $27 = ((($26)) + 2|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  _BITv05_skipBits($23,$29);
  STACKTOP = sp;return 1;
 }
 $30 = ((($23)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31>>>0)<(32);
 if (!($32)) {
  STACKTOP = sp;return 1;
 }
 $33 = $5;
 $34 = $6;
 $35 = $8;
 $36 = (($34) + ($35<<2)|0);
 $37 = ((($36)) + 2|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 _BITv05_skipBits($33,$39);
 $40 = $5;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42>>>0)>(32);
 if (!($43)) {
  STACKTOP = sp;return 1;
 }
 $44 = $5;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = 32;
 STACKTOP = sp;return 1;
}
function _HUFv05_decompress4X4_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $18 = sp + 120|0;
 $19 = sp + 104|0;
 $20 = sp + 88|0;
 $21 = sp + 72|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $39 = $9;
 $40 = ($39>>>0)<(10);
 if ($40) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $41 = $8;
 $11 = $41;
 $42 = $6;
 $12 = $42;
 $43 = $12;
 $44 = $7;
 $45 = (($43) + ($44)|0);
 $13 = $45;
 $46 = $10;
 $14 = $46;
 $47 = $14;
 $48 = ((($47)) + 4|0);
 $15 = $48;
 $49 = $10;
 $50 = HEAP32[$49>>2]|0;
 $16 = $50;
 $51 = $11;
 $52 = (_MEM_readLE16_365($51)|0);
 $53 = $52&65535;
 $22 = $53;
 $54 = $11;
 $55 = ((($54)) + 2|0);
 $56 = (_MEM_readLE16_365($55)|0);
 $57 = $56&65535;
 $23 = $57;
 $58 = $11;
 $59 = ((($58)) + 4|0);
 $60 = (_MEM_readLE16_365($59)|0);
 $61 = $60&65535;
 $24 = $61;
 $62 = $11;
 $63 = ((($62)) + 6|0);
 $26 = $63;
 $64 = $26;
 $65 = $22;
 $66 = (($64) + ($65)|0);
 $27 = $66;
 $67 = $27;
 $68 = $23;
 $69 = (($67) + ($68)|0);
 $28 = $69;
 $70 = $28;
 $71 = $24;
 $72 = (($70) + ($71)|0);
 $29 = $72;
 $73 = $7;
 $74 = (($73) + 3)|0;
 $75 = (($74>>>0) / 4)&-1;
 $30 = $75;
 $76 = $12;
 $77 = $30;
 $78 = (($76) + ($77)|0);
 $31 = $78;
 $79 = $31;
 $80 = $30;
 $81 = (($79) + ($80)|0);
 $32 = $81;
 $82 = $32;
 $83 = $30;
 $84 = (($82) + ($83)|0);
 $33 = $84;
 $85 = $12;
 $34 = $85;
 $86 = $31;
 $35 = $86;
 $87 = $32;
 $36 = $87;
 $88 = $33;
 $37 = $88;
 $89 = $9;
 $90 = $22;
 $91 = $23;
 $92 = (($90) + ($91))|0;
 $93 = $24;
 $94 = (($92) + ($93))|0;
 $95 = (($94) + 6)|0;
 $96 = (($89) - ($95))|0;
 $25 = $96;
 $97 = $25;
 $98 = $9;
 $99 = ($97>>>0)>($98>>>0);
 if ($99) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $100 = $26;
 $101 = $22;
 $102 = (_BITv05_initDStream($18,$100,$101)|0);
 $17 = $102;
 $103 = $17;
 $104 = (_HUFv05_isError($103)|0);
 $105 = ($104|0)!=(0);
 if ($105) {
  $106 = $17;
  $5 = $106;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $107 = $27;
 $108 = $23;
 $109 = (_BITv05_initDStream($19,$107,$108)|0);
 $17 = $109;
 $110 = $17;
 $111 = (_HUFv05_isError($110)|0);
 $112 = ($111|0)!=(0);
 if ($112) {
  $113 = $17;
  $5 = $113;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $114 = $28;
 $115 = $24;
 $116 = (_BITv05_initDStream($20,$114,$115)|0);
 $17 = $116;
 $117 = $17;
 $118 = (_HUFv05_isError($117)|0);
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = $17;
  $5 = $120;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $121 = $29;
 $122 = $25;
 $123 = (_BITv05_initDStream($21,$121,$122)|0);
 $17 = $123;
 $124 = $17;
 $125 = (_HUFv05_isError($124)|0);
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $17;
  $5 = $127;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $128 = (_BITv05_reloadDStream($18)|0);
 $129 = (_BITv05_reloadDStream($19)|0);
 $130 = $128 | $129;
 $131 = (_BITv05_reloadDStream($20)|0);
 $132 = $130 | $131;
 $133 = (_BITv05_reloadDStream($21)|0);
 $134 = $132 | $133;
 $38 = $134;
 while(1) {
  $135 = $38;
  $136 = ($135|0)==(0);
  if (!($136)) {
   break;
  }
  $137 = $37;
  $138 = $13;
  $139 = ((($138)) + -7|0);
  $140 = ($137>>>0)<($139>>>0);
  if (!($140)) {
   break;
  }
  $141 = (_MEM_64bits_364()|0);
  $142 = ($141|0)!=(0);
  if ($142) {
   $143 = $34;
   $144 = $15;
   $145 = $16;
   $146 = (_HUFv05_decodeSymbolX4($143,$18,$144,$145)|0);
   $147 = $34;
   $148 = (($147) + ($146)|0);
   $34 = $148;
  }
  $149 = (_MEM_64bits_364()|0);
  $150 = ($149|0)!=(0);
  if ($150) {
   $151 = $35;
   $152 = $15;
   $153 = $16;
   $154 = (_HUFv05_decodeSymbolX4($151,$19,$152,$153)|0);
   $155 = $35;
   $156 = (($155) + ($154)|0);
   $35 = $156;
  }
  $157 = (_MEM_64bits_364()|0);
  $158 = ($157|0)!=(0);
  if ($158) {
   $159 = $36;
   $160 = $15;
   $161 = $16;
   $162 = (_HUFv05_decodeSymbolX4($159,$20,$160,$161)|0);
   $163 = $36;
   $164 = (($163) + ($162)|0);
   $36 = $164;
  }
  $165 = (_MEM_64bits_364()|0);
  $166 = ($165|0)!=(0);
  if ($166) {
   $167 = $37;
   $168 = $15;
   $169 = $16;
   $170 = (_HUFv05_decodeSymbolX4($167,$21,$168,$169)|0);
   $171 = $37;
   $172 = (($171) + ($170)|0);
   $37 = $172;
  }
  (_MEM_64bits_364()|0);
  $173 = $34;
  $174 = $15;
  $175 = $16;
  $176 = (_HUFv05_decodeSymbolX4($173,$18,$174,$175)|0);
  $177 = $34;
  $178 = (($177) + ($176)|0);
  $34 = $178;
  (_MEM_64bits_364()|0);
  $179 = $35;
  $180 = $15;
  $181 = $16;
  $182 = (_HUFv05_decodeSymbolX4($179,$19,$180,$181)|0);
  $183 = $35;
  $184 = (($183) + ($182)|0);
  $35 = $184;
  (_MEM_64bits_364()|0);
  $185 = $36;
  $186 = $15;
  $187 = $16;
  $188 = (_HUFv05_decodeSymbolX4($185,$20,$186,$187)|0);
  $189 = $36;
  $190 = (($189) + ($188)|0);
  $36 = $190;
  (_MEM_64bits_364()|0);
  $191 = $37;
  $192 = $15;
  $193 = $16;
  $194 = (_HUFv05_decodeSymbolX4($191,$21,$192,$193)|0);
  $195 = $37;
  $196 = (($195) + ($194)|0);
  $37 = $196;
  $197 = (_MEM_64bits_364()|0);
  $198 = ($197|0)!=(0);
  if ($198) {
   $199 = $34;
   $200 = $15;
   $201 = $16;
   $202 = (_HUFv05_decodeSymbolX4($199,$18,$200,$201)|0);
   $203 = $34;
   $204 = (($203) + ($202)|0);
   $34 = $204;
  }
  $205 = (_MEM_64bits_364()|0);
  $206 = ($205|0)!=(0);
  if ($206) {
   $207 = $35;
   $208 = $15;
   $209 = $16;
   $210 = (_HUFv05_decodeSymbolX4($207,$19,$208,$209)|0);
   $211 = $35;
   $212 = (($211) + ($210)|0);
   $35 = $212;
  }
  $213 = (_MEM_64bits_364()|0);
  $214 = ($213|0)!=(0);
  if ($214) {
   $215 = $36;
   $216 = $15;
   $217 = $16;
   $218 = (_HUFv05_decodeSymbolX4($215,$20,$216,$217)|0);
   $219 = $36;
   $220 = (($219) + ($218)|0);
   $36 = $220;
  }
  $221 = (_MEM_64bits_364()|0);
  $222 = ($221|0)!=(0);
  if ($222) {
   $223 = $37;
   $224 = $15;
   $225 = $16;
   $226 = (_HUFv05_decodeSymbolX4($223,$21,$224,$225)|0);
   $227 = $37;
   $228 = (($227) + ($226)|0);
   $37 = $228;
  }
  $229 = $34;
  $230 = $15;
  $231 = $16;
  $232 = (_HUFv05_decodeSymbolX4($229,$18,$230,$231)|0);
  $233 = $34;
  $234 = (($233) + ($232)|0);
  $34 = $234;
  $235 = $35;
  $236 = $15;
  $237 = $16;
  $238 = (_HUFv05_decodeSymbolX4($235,$19,$236,$237)|0);
  $239 = $35;
  $240 = (($239) + ($238)|0);
  $35 = $240;
  $241 = $36;
  $242 = $15;
  $243 = $16;
  $244 = (_HUFv05_decodeSymbolX4($241,$20,$242,$243)|0);
  $245 = $36;
  $246 = (($245) + ($244)|0);
  $36 = $246;
  $247 = $37;
  $248 = $15;
  $249 = $16;
  $250 = (_HUFv05_decodeSymbolX4($247,$21,$248,$249)|0);
  $251 = $37;
  $252 = (($251) + ($250)|0);
  $37 = $252;
  $253 = (_BITv05_reloadDStream($18)|0);
  $254 = (_BITv05_reloadDStream($19)|0);
  $255 = $253 | $254;
  $256 = (_BITv05_reloadDStream($20)|0);
  $257 = $255 | $256;
  $258 = (_BITv05_reloadDStream($21)|0);
  $259 = $257 | $258;
  $38 = $259;
 }
 $260 = $34;
 $261 = $31;
 $262 = ($260>>>0)>($261>>>0);
 if ($262) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $263 = $35;
 $264 = $32;
 $265 = ($263>>>0)>($264>>>0);
 if ($265) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $266 = $36;
 $267 = $33;
 $268 = ($266>>>0)>($267>>>0);
 if ($268) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $269 = $34;
 $270 = $31;
 $271 = $15;
 $272 = $16;
 (_HUFv05_decodeStreamX4($269,$18,$270,$271,$272)|0);
 $273 = $35;
 $274 = $32;
 $275 = $15;
 $276 = $16;
 (_HUFv05_decodeStreamX4($273,$19,$274,$275,$276)|0);
 $277 = $36;
 $278 = $33;
 $279 = $15;
 $280 = $16;
 (_HUFv05_decodeStreamX4($277,$20,$278,$279,$280)|0);
 $281 = $37;
 $282 = $13;
 $283 = $15;
 $284 = $16;
 (_HUFv05_decodeStreamX4($281,$21,$282,$283,$284)|0);
 $285 = (_BITv05_endOfDStream($18)|0);
 $286 = (_BITv05_endOfDStream($19)|0);
 $287 = $285 & $286;
 $288 = (_BITv05_endOfDStream($20)|0);
 $289 = $287 & $288;
 $290 = (_BITv05_endOfDStream($21)|0);
 $291 = $289 & $290;
 $38 = $291;
 $292 = $38;
 $293 = ($292|0)!=(0);
 if ($293) {
  $294 = $7;
  $5 = $294;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 } else {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 return (0)|0;
}
function _HUFv05_decompress4X4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16416|0);
 $9 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 _memset(($9|0),0,16388)|0;
 HEAP32[$9>>2] = 12;
 $12 = $7;
 $10 = $12;
 $13 = $7;
 $14 = $8;
 $15 = (_HUFv05_readDTableX4($9,$13,$14)|0);
 $11 = $15;
 $16 = $11;
 $17 = (_HUFv05_isError($16)|0);
 $18 = ($17|0)!=(0);
 $19 = $11;
 if ($18) {
  $4 = $19;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $20 = $8;
 $21 = ($19>>>0)>=($20>>>0);
 if ($21) {
  $4 = -14;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 } else {
  $22 = $11;
  $23 = $10;
  $24 = (($23) + ($22)|0);
  $10 = $24;
  $25 = $11;
  $26 = $8;
  $27 = (($26) - ($25))|0;
  $8 = $27;
  $28 = $5;
  $29 = $6;
  $30 = $10;
  $31 = $8;
  $32 = (_HUFv05_decompress4X4_usingDTable($28,$29,$30,$31,$9)|0);
  $4 = $32;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _HUFv05_decompress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $11 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $15 = $14 >>> 8;
 $10 = $15;
 $12 = 0;
 $16 = $6;
 $17 = ($16|0)==(0);
 if ($17) {
  $4 = -13;
  $78 = $4;
  STACKTOP = sp;return ($78|0);
 }
 $18 = $8;
 $19 = $6;
 $20 = ($18>>>0)>=($19>>>0);
 if ($20) {
  $4 = -15;
  $78 = $4;
  STACKTOP = sp;return ($78|0);
 }
 $21 = $8;
 $22 = ($21|0)==(1);
 if ($22) {
  $23 = $5;
  $24 = $7;
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = $26&255;
  $28 = $6;
  _memset(($23|0),($27|0),($28|0))|0;
  $29 = $6;
  $4 = $29;
  $78 = $4;
  STACKTOP = sp;return ($78|0);
 }
 $30 = $8;
 $31 = $30<<4;
 $32 = $6;
 $33 = (($31>>>0) / ($32>>>0))&-1;
 $9 = $33;
 $13 = 0;
 while(1) {
  $34 = $13;
  $35 = ($34|0)<(3);
  if (!($35)) {
   break;
  }
  $36 = $9;
  $37 = (2708 + (($36*24)|0)|0);
  $38 = $13;
  $39 = (($37) + ($38<<3)|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = $9;
  $42 = (2708 + (($41*24)|0)|0);
  $43 = $13;
  $44 = (($42) + ($43<<3)|0);
  $45 = ((($44)) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $10;
  $48 = Math_imul($46, $47)|0;
  $49 = (($40) + ($48))|0;
  $50 = $13;
  $51 = (($11) + ($50<<2)|0);
  HEAP32[$51>>2] = $49;
  $52 = $13;
  $53 = (($52) + 1)|0;
  $13 = $53;
 }
 $54 = ((($11)) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = $55 >>> 4;
 $57 = ((($11)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($58) + ($56))|0;
 HEAP32[$57>>2] = $59;
 $60 = ((($11)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $61 >>> 3;
 $63 = ((($11)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($64) + ($62))|0;
 HEAP32[$63>>2] = $65;
 $66 = ((($11)) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$11>>2]|0;
 $69 = ($67>>>0)<($68>>>0);
 if ($69) {
  $12 = 1;
 }
 $70 = $12;
 $71 = (3092 + ($70<<2)|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $5;
 $74 = $6;
 $75 = $7;
 $76 = $8;
 $77 = (FUNCTION_TABLE_iiiii[$72 & 7]($73,$74,$75,$76)|0);
 $4 = $77;
 $78 = $4;
 STACKTOP = sp;return ($78|0);
}
function _ZSTDv05_isError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_351($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ZSTDv05_decompressBegin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 26656|0);
 HEAP32[$3>>2] = 5;
 $4 = $1;
 $5 = ((($4)) + 26708|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 26640|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 26644|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 26648|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 26652|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 10252|0);
 HEAP32[$15>>2] = 12;
 $16 = $1;
 $17 = ((($16)) + 26712|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return 0;
}
function _ZSTDv05_createDCtx() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_malloc(157816)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
 } else {
  $5 = $1;
  (_ZSTDv05_decompressBegin($5)|0);
  $6 = $1;
  $0 = $6;
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _ZSTDv05_freeDCtx($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free($2);
 STACKTOP = sp;return 0;
}
function _ZSTDv05_getFrameParams($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8>>>0)<(5);
 if ($9) {
  $3 = 5;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 $10 = $5;
 $11 = (_MEM_readLE32_354($10)|0);
 $7 = $11;
 $12 = $7;
 $13 = ($12|0)!=(-47205083);
 if ($13) {
  $3 = -2;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 $14 = $4;
 dest=$14; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = $5;
 $16 = ((($15)) + 4|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 & 15;
 $20 = (($19) + 11)|0;
 $21 = $4;
 $22 = ((($21)) + 8|0);
 HEAP32[$22>>2] = $20;
 $23 = $5;
 $24 = ((($23)) + 4|0);
 $25 = HEAP8[$24>>0]|0;
 $26 = $25&255;
 $27 = $26 >> 4;
 $28 = ($27|0)!=(0);
 if ($28) {
  $3 = -5;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 } else {
  $3 = 0;
  $29 = $3;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _ZSTDv05_getcBlockSize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $4;
 $7 = $10;
 $11 = $5;
 $12 = ($11>>>0)<(3);
 if ($12) {
  $3 = -14;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 $13 = $7;
 $14 = HEAP8[$13>>0]|0;
 $8 = $14;
 $15 = $7;
 $16 = ((($15)) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $7;
 $20 = ((($19)) + 1|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = $22 << 8;
 $24 = (($18) + ($23))|0;
 $25 = $7;
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 & 7;
 $29 = $28 << 16;
 $30 = (($24) + ($29))|0;
 $9 = $30;
 $31 = $8;
 $32 = $31&255;
 $33 = $32 >> 6;
 $34 = $6;
 HEAP32[$34>>2] = $33;
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(2);
 $38 = $9;
 $39 = $37 ? $38 : 0;
 $40 = $6;
 $41 = ((($40)) + 4|0);
 HEAP32[$41>>2] = $39;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = ($43|0)==(3);
 if ($44) {
  $3 = 0;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 $45 = $6;
 $46 = HEAP32[$45>>2]|0;
 $47 = ($46|0)==(2);
 if ($47) {
  $3 = 1;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 } else {
  $48 = $9;
  $3 = $48;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _ZSTDv05_decodeLiteralsBlock($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $20 = $5;
 $7 = $20;
 $21 = $6;
 $22 = ($21>>>0)<(3);
 if ($22) {
  $3 = -15;
  $366 = $3;
  STACKTOP = sp;return ($366|0);
 }
 $23 = $7;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 >> 6;
 switch ($26|0) {
 case 0:  {
  $10 = 0;
  $27 = $7;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 >> 4;
  $31 = $30 & 3;
  $11 = $31;
  $32 = $6;
  $33 = ($32>>>0)<(5);
  if ($33) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $34 = $11;
  switch ($34|0) {
  case 3:  {
   $11 = 5;
   $89 = $7;
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = $91 & 15;
   $93 = $92 << 14;
   $94 = $7;
   $95 = ((($94)) + 1|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $97 << 6;
   $99 = (($93) + ($98))|0;
   $100 = $7;
   $101 = ((($100)) + 2|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $103 >> 2;
   $105 = (($99) + ($104))|0;
   $8 = $105;
   $106 = $7;
   $107 = ((($106)) + 2|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $109 & 3;
   $111 = $110 << 16;
   $112 = $7;
   $113 = ((($112)) + 3|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = $115 << 8;
   $117 = (($111) + ($116))|0;
   $118 = $7;
   $119 = ((($118)) + 4|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = (($117) + ($121))|0;
   $9 = $122;
   break;
  }
  case 2:  {
   $11 = 4;
   $61 = $7;
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $63 & 15;
   $65 = $64 << 10;
   $66 = $7;
   $67 = ((($66)) + 1|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = $69 << 2;
   $71 = (($65) + ($70))|0;
   $72 = $7;
   $73 = ((($72)) + 2|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = $75 >> 6;
   $77 = (($71) + ($76))|0;
   $8 = $77;
   $78 = $7;
   $79 = ((($78)) + 2|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $81 & 63;
   $83 = $82 << 8;
   $84 = $7;
   $85 = ((($84)) + 3|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = (($83) + ($87))|0;
   $9 = $88;
   break;
  }
  default: {
   $11 = 3;
   $35 = $7;
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $37 & 16;
   $10 = $38;
   $39 = $7;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $41 & 15;
   $43 = $42 << 6;
   $44 = $7;
   $45 = ((($44)) + 1|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $47 >> 2;
   $49 = (($43) + ($48))|0;
   $8 = $49;
   $50 = $7;
   $51 = ((($50)) + 1|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 & 3;
   $55 = $54 << 8;
   $56 = $7;
   $57 = ((($56)) + 2|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (($55) + ($59))|0;
   $9 = $60;
  }
  }
  $123 = $8;
  $124 = ($123>>>0)>(131072);
  if ($124) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $125 = $9;
  $126 = $11;
  $127 = (($125) + ($126))|0;
  $128 = $6;
  $129 = ($127>>>0)>($128>>>0);
  if ($129) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $130 = $10;
  $131 = ($130|0)!=(0);
  $132 = $4;
  $133 = ((($132)) + 26724|0);
  $134 = $8;
  $135 = $7;
  $136 = $11;
  $137 = (($135) + ($136)|0);
  $138 = $9;
  if ($131) {
   $139 = (_HUFv05_decompress1X2($133,$134,$137,$138)|0);
   $141 = $139;
  } else {
   $140 = (_HUFv05_decompress($133,$134,$137,$138)|0);
   $141 = $140;
  }
  $142 = (_HUFv05_isError($141)|0);
  $143 = ($142|0)!=(0);
  if ($143) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  } else {
   $144 = $4;
   $145 = ((($144)) + 26724|0);
   $146 = $4;
   $147 = ((($146)) + 26716|0);
   HEAP32[$147>>2] = $145;
   $148 = $8;
   $149 = $4;
   $150 = ((($149)) + 26720|0);
   HEAP32[$150>>2] = $148;
   $151 = $4;
   $152 = ((($151)) + 26724|0);
   $153 = $4;
   $154 = ((($153)) + 26720|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($152) + ($155)|0);
   ;HEAP8[$156>>0]=0|0;HEAP8[$156+1>>0]=0|0;HEAP8[$156+2>>0]=0|0;HEAP8[$156+3>>0]=0|0;HEAP8[$156+4>>0]=0|0;HEAP8[$156+5>>0]=0|0;HEAP8[$156+6>>0]=0|0;HEAP8[$156+7>>0]=0|0;
   $157 = $9;
   $158 = $11;
   $159 = (($157) + ($158))|0;
   $3 = $159;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  break;
 }
 case 1:  {
  $160 = $7;
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = $162 >> 4;
  $164 = $163 & 3;
  $15 = $164;
  $165 = $15;
  $166 = ($165|0)!=(1);
  if ($166) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $167 = $4;
  $168 = ((($167)) + 26712|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($169|0)!=(0);
  if (!($170)) {
   $3 = -20;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $15 = 3;
  $171 = $7;
  $172 = HEAP8[$171>>0]|0;
  $173 = $172&255;
  $174 = $173 & 15;
  $175 = $174 << 6;
  $176 = $7;
  $177 = ((($176)) + 1|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = $178&255;
  $180 = $179 >> 2;
  $181 = (($175) + ($180))|0;
  $13 = $181;
  $182 = $7;
  $183 = ((($182)) + 1|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  $186 = $185 & 3;
  $187 = $186 << 8;
  $188 = $7;
  $189 = ((($188)) + 2|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = $190&255;
  $192 = (($187) + ($191))|0;
  $14 = $192;
  $193 = $14;
  $194 = $15;
  $195 = (($193) + ($194))|0;
  $196 = $6;
  $197 = ($195>>>0)>($196>>>0);
  if ($197) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $198 = $4;
  $199 = ((($198)) + 26724|0);
  $200 = $13;
  $201 = $7;
  $202 = $15;
  $203 = (($201) + ($202)|0);
  $204 = $14;
  $205 = $4;
  $206 = ((($205)) + 10252|0);
  $207 = (_HUFv05_decompress1X4_usingDTable($199,$200,$203,$204,$206)|0);
  $12 = $207;
  $208 = $12;
  $209 = (_HUFv05_isError($208)|0);
  $210 = ($209|0)!=(0);
  if ($210) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  } else {
   $211 = $4;
   $212 = ((($211)) + 26724|0);
   $213 = $4;
   $214 = ((($213)) + 26716|0);
   HEAP32[$214>>2] = $212;
   $215 = $13;
   $216 = $4;
   $217 = ((($216)) + 26720|0);
   HEAP32[$217>>2] = $215;
   $218 = $4;
   $219 = ((($218)) + 26724|0);
   $220 = $4;
   $221 = ((($220)) + 26720|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($219) + ($222)|0);
   ;HEAP8[$223>>0]=0|0;HEAP8[$223+1>>0]=0|0;HEAP8[$223+2>>0]=0|0;HEAP8[$223+3>>0]=0|0;HEAP8[$223+4>>0]=0|0;HEAP8[$223+5>>0]=0|0;HEAP8[$223+6>>0]=0|0;HEAP8[$223+7>>0]=0|0;
   $224 = $14;
   $225 = $15;
   $226 = (($224) + ($225))|0;
   $3 = $226;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  break;
 }
 case 2:  {
  $227 = $7;
  $228 = HEAP8[$227>>0]|0;
  $229 = $228&255;
  $230 = $229 >> 4;
  $231 = $230 & 3;
  $17 = $231;
  $232 = $17;
  switch ($232|0) {
  case 3:  {
   $247 = $7;
   $248 = HEAP8[$247>>0]|0;
   $249 = $248&255;
   $250 = $249 & 15;
   $251 = $250 << 16;
   $252 = $7;
   $253 = ((($252)) + 1|0);
   $254 = HEAP8[$253>>0]|0;
   $255 = $254&255;
   $256 = $255 << 8;
   $257 = (($251) + ($256))|0;
   $258 = $7;
   $259 = ((($258)) + 2|0);
   $260 = HEAP8[$259>>0]|0;
   $261 = $260&255;
   $262 = (($257) + ($261))|0;
   $16 = $262;
   break;
  }
  case 2:  {
   $237 = $7;
   $238 = HEAP8[$237>>0]|0;
   $239 = $238&255;
   $240 = $239 & 15;
   $241 = $240 << 8;
   $242 = $7;
   $243 = ((($242)) + 1|0);
   $244 = HEAP8[$243>>0]|0;
   $245 = $244&255;
   $246 = (($241) + ($245))|0;
   $16 = $246;
   break;
  }
  default: {
   $17 = 1;
   $233 = $7;
   $234 = HEAP8[$233>>0]|0;
   $235 = $234&255;
   $236 = $235 & 31;
   $16 = $236;
  }
  }
  $263 = $17;
  $264 = $16;
  $265 = (($263) + ($264))|0;
  $266 = (($265) + 8)|0;
  $267 = $6;
  $268 = ($266>>>0)>($267>>>0);
  if (!($268)) {
   $296 = $7;
   $297 = $17;
   $298 = (($296) + ($297)|0);
   $299 = $4;
   $300 = ((($299)) + 26716|0);
   HEAP32[$300>>2] = $298;
   $301 = $16;
   $302 = $4;
   $303 = ((($302)) + 26720|0);
   HEAP32[$303>>2] = $301;
   $304 = $17;
   $305 = $16;
   $306 = (($304) + ($305))|0;
   $3 = $306;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $269 = $16;
  $270 = $17;
  $271 = (($269) + ($270))|0;
  $272 = $6;
  $273 = ($271>>>0)>($272>>>0);
  if ($273) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  } else {
   $274 = $4;
   $275 = ((($274)) + 26724|0);
   $276 = $7;
   $277 = $17;
   $278 = (($276) + ($277)|0);
   $279 = $16;
   _memcpy(($275|0),($278|0),($279|0))|0;
   $280 = $4;
   $281 = ((($280)) + 26724|0);
   $282 = $4;
   $283 = ((($282)) + 26716|0);
   HEAP32[$283>>2] = $281;
   $284 = $16;
   $285 = $4;
   $286 = ((($285)) + 26720|0);
   HEAP32[$286>>2] = $284;
   $287 = $4;
   $288 = ((($287)) + 26724|0);
   $289 = $4;
   $290 = ((($289)) + 26720|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = (($288) + ($291)|0);
   ;HEAP8[$292>>0]=0|0;HEAP8[$292+1>>0]=0|0;HEAP8[$292+2>>0]=0|0;HEAP8[$292+3>>0]=0|0;HEAP8[$292+4>>0]=0|0;HEAP8[$292+5>>0]=0|0;HEAP8[$292+6>>0]=0|0;HEAP8[$292+7>>0]=0|0;
   $293 = $17;
   $294 = $16;
   $295 = (($293) + ($294))|0;
   $3 = $295;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  break;
 }
 case 3:  {
  $307 = $7;
  $308 = HEAP8[$307>>0]|0;
  $309 = $308&255;
  $310 = $309 >> 4;
  $311 = $310 & 3;
  $19 = $311;
  $312 = $19;
  switch ($312|0) {
  case 3:  {
   $327 = $7;
   $328 = HEAP8[$327>>0]|0;
   $329 = $328&255;
   $330 = $329 & 15;
   $331 = $330 << 16;
   $332 = $7;
   $333 = ((($332)) + 1|0);
   $334 = HEAP8[$333>>0]|0;
   $335 = $334&255;
   $336 = $335 << 8;
   $337 = (($331) + ($336))|0;
   $338 = $7;
   $339 = ((($338)) + 2|0);
   $340 = HEAP8[$339>>0]|0;
   $341 = $340&255;
   $342 = (($337) + ($341))|0;
   $18 = $342;
   $343 = $6;
   $344 = ($343>>>0)<(4);
   if ($344) {
    $3 = -15;
    $366 = $3;
    STACKTOP = sp;return ($366|0);
   }
   break;
  }
  case 2:  {
   $317 = $7;
   $318 = HEAP8[$317>>0]|0;
   $319 = $318&255;
   $320 = $319 & 15;
   $321 = $320 << 8;
   $322 = $7;
   $323 = ((($322)) + 1|0);
   $324 = HEAP8[$323>>0]|0;
   $325 = $324&255;
   $326 = (($321) + ($325))|0;
   $18 = $326;
   break;
  }
  default: {
   $19 = 1;
   $313 = $7;
   $314 = HEAP8[$313>>0]|0;
   $315 = $314&255;
   $316 = $315 & 31;
   $18 = $316;
  }
  }
  $345 = $18;
  $346 = ($345>>>0)>(131072);
  if ($346) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  } else {
   $347 = $4;
   $348 = ((($347)) + 26724|0);
   $349 = $7;
   $350 = $19;
   $351 = (($349) + ($350)|0);
   $352 = HEAP8[$351>>0]|0;
   $353 = $352&255;
   $354 = $353&255;
   $355 = $18;
   $356 = (($355) + 8)|0;
   _memset(($348|0),($354|0),($356|0))|0;
   $357 = $4;
   $358 = ((($357)) + 26724|0);
   $359 = $4;
   $360 = ((($359)) + 26716|0);
   HEAP32[$360>>2] = $358;
   $361 = $18;
   $362 = $4;
   $363 = ((($362)) + 26720|0);
   HEAP32[$363>>2] = $361;
   $364 = $19;
   $365 = (($364) + 1)|0;
   $3 = $365;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function _ZSTDv05_decodeSeqHeaders($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $25 = sp + 28|0;
 $26 = sp + 24|0;
 $27 = sp + 20|0;
 $29 = sp + 96|0;
 $31 = sp + 8|0;
 $32 = sp + 4|0;
 $33 = sp;
 $10 = $0;
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $34 = $16;
 $19 = $34;
 $35 = $19;
 $20 = $35;
 $36 = $19;
 $37 = $17;
 $38 = (($36) + ($37)|0);
 $21 = $38;
 $39 = $17;
 $40 = ($39>>>0)<(1);
 if ($40) {
  $9 = -14;
  $225 = $9;
  STACKTOP = sp;return ($225|0);
 }
 $41 = $20;
 $42 = ((($41)) + 1|0);
 $20 = $42;
 $43 = HEAP8[$41>>0]|0;
 $44 = $43&255;
 $45 = $10;
 HEAP32[$45>>2] = $44;
 $46 = $10;
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0);
 if ($48) {
  $9 = 1;
  $225 = $9;
  STACKTOP = sp;return ($225|0);
 }
 $49 = $10;
 $50 = HEAP32[$49>>2]|0;
 $51 = ($50|0)>=(128);
 do {
  if ($51) {
   $52 = $20;
   $53 = $21;
   $54 = ($52>>>0)>=($53>>>0);
   if (!($54)) {
    $55 = $10;
    $56 = HEAP32[$55>>2]|0;
    $57 = (($56) - 128)|0;
    $58 = $57 << 8;
    $59 = $20;
    $60 = ((($59)) + 1|0);
    $20 = $60;
    $61 = HEAP8[$59>>0]|0;
    $62 = $61&255;
    $63 = (($58) + ($62))|0;
    $64 = $10;
    HEAP32[$64>>2] = $63;
    break;
   }
   $9 = -14;
   $225 = $9;
   STACKTOP = sp;return ($225|0);
  }
 } while(0);
 $65 = $20;
 $66 = $21;
 $67 = ($65>>>0)>=($66>>>0);
 if ($67) {
  $9 = -14;
  $225 = $9;
  STACKTOP = sp;return ($225|0);
 }
 $68 = $20;
 $69 = HEAP8[$68>>0]|0;
 $70 = $69&255;
 $71 = $70 >> 6;
 $22 = $71;
 $72 = $20;
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 >> 4;
 $76 = $75 & 3;
 $23 = $76;
 $77 = $20;
 $78 = HEAP8[$77>>0]|0;
 $79 = $78&255;
 $80 = $79 >> 2;
 $81 = $80 & 3;
 $24 = $81;
 $82 = $20;
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = $84 & 2;
 $86 = ($85|0)!=(0);
 $87 = $20;
 do {
  if ($86) {
   $88 = ((($87)) + 3|0);
   $89 = $21;
   $90 = ($88>>>0)>($89>>>0);
   if (!($90)) {
    $91 = $20;
    $92 = ((($91)) + 2|0);
    $93 = HEAP8[$92>>0]|0;
    $94 = $93&255;
    $28 = $94;
    $95 = $20;
    $96 = ((($95)) + 1|0);
    $97 = HEAP8[$96>>0]|0;
    $98 = $97&255;
    $99 = $98 << 8;
    $100 = $28;
    $101 = (($100) + ($99))|0;
    $28 = $101;
    $102 = $20;
    $103 = ((($102)) + 3|0);
    $20 = $103;
    break;
   }
   $9 = -14;
   $225 = $9;
   STACKTOP = sp;return ($225|0);
  } else {
   $104 = ((($87)) + 2|0);
   $105 = $21;
   $106 = ($104>>>0)>($105>>>0);
   if (!($106)) {
    $107 = $20;
    $108 = ((($107)) + 1|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109&255;
    $28 = $110;
    $111 = $20;
    $112 = HEAP8[$111>>0]|0;
    $113 = $112&255;
    $114 = $113 & 1;
    $115 = $114 << 8;
    $116 = $28;
    $117 = (($116) + ($115))|0;
    $28 = $117;
    $118 = $20;
    $119 = ((($118)) + 2|0);
    $20 = $119;
    break;
   }
   $9 = -14;
   $225 = $9;
   STACKTOP = sp;return ($225|0);
  }
 } while(0);
 $120 = $20;
 $121 = $11;
 HEAP32[$121>>2] = $120;
 $122 = $28;
 $123 = $20;
 $124 = (($123) + ($122)|0);
 $20 = $124;
 $125 = $28;
 $126 = $12;
 HEAP32[$126>>2] = $125;
 $127 = $20;
 $128 = $21;
 $129 = ((($128)) + -3|0);
 $130 = ($127>>>0)>($129>>>0);
 if ($130) {
  $9 = -14;
  $225 = $9;
  STACKTOP = sp;return ($225|0);
 }
 $131 = $22;
 L36: do {
  switch ($131|0) {
  case 1:  {
   HEAP32[$25>>2] = 0;
   $132 = $13;
   $133 = $20;
   $134 = ((($133)) + 1|0);
   $20 = $134;
   $135 = HEAP8[$133>>0]|0;
   (_FSEv05_buildDTable_rle($132,$135)|0);
   break;
  }
  case 0:  {
   HEAP32[$25>>2] = 6;
   $136 = $13;
   (_FSEv05_buildDTable_raw($136,6)|0);
   break;
  }
  case 2:  {
   $137 = $18;
   $138 = ($137|0)!=(0);
   if (!($138)) {
    $9 = -15;
    $225 = $9;
    STACKTOP = sp;return ($225|0);
   }
   break;
  }
  default: {
   HEAP32[$31>>2] = 63;
   $139 = $20;
   $140 = $21;
   $141 = $20;
   $142 = $140;
   $143 = $141;
   $144 = (($142) - ($143))|0;
   $145 = (_FSEv05_readNCount($29,$31,$25,$139,$144)|0);
   $30 = $145;
   $146 = $30;
   $147 = (_FSEv05_isError($146)|0);
   $148 = ($147|0)!=(0);
   if ($148) {
    $9 = -1;
    $225 = $9;
    STACKTOP = sp;return ($225|0);
   }
   $149 = HEAP32[$25>>2]|0;
   $150 = ($149>>>0)>(10);
   if (!($150)) {
    $151 = $30;
    $152 = $20;
    $153 = (($152) + ($151)|0);
    $20 = $153;
    $154 = $13;
    $155 = HEAP32[$31>>2]|0;
    $156 = HEAP32[$25>>2]|0;
    (_FSEv05_buildDTable($154,$29,$155,$156)|0);
    break L36;
   }
   $9 = -15;
   $225 = $9;
   STACKTOP = sp;return ($225|0);
  }
  }
 } while(0);
 $157 = $23;
 L52: do {
  switch ($157|0) {
  case 1:  {
   HEAP32[$26>>2] = 0;
   $158 = $20;
   $159 = $21;
   $160 = ((($159)) + -2|0);
   $161 = ($158>>>0)>($160>>>0);
   if (!($161)) {
    $162 = $15;
    $163 = $20;
    $164 = ((($163)) + 1|0);
    $20 = $164;
    $165 = HEAP8[$163>>0]|0;
    $166 = $165&255;
    $167 = $166 & 31;
    $168 = $167&255;
    (_FSEv05_buildDTable_rle($162,$168)|0);
    break L52;
   }
   $9 = -14;
   $225 = $9;
   STACKTOP = sp;return ($225|0);
   break;
  }
  case 0:  {
   HEAP32[$26>>2] = 5;
   $169 = $15;
   (_FSEv05_buildDTable_raw($169,5)|0);
   break;
  }
  case 2:  {
   $170 = $18;
   $171 = ($170|0)!=(0);
   if (!($171)) {
    $9 = -15;
    $225 = $9;
    STACKTOP = sp;return ($225|0);
   }
   break;
  }
  default: {
   HEAP32[$32>>2] = 31;
   $172 = $20;
   $173 = $21;
   $174 = $20;
   $175 = $173;
   $176 = $174;
   $177 = (($175) - ($176))|0;
   $178 = (_FSEv05_readNCount($29,$32,$26,$172,$177)|0);
   $30 = $178;
   $179 = $30;
   $180 = (_FSEv05_isError($179)|0);
   $181 = ($180|0)!=(0);
   if ($181) {
    $9 = -1;
    $225 = $9;
    STACKTOP = sp;return ($225|0);
   }
   $182 = HEAP32[$26>>2]|0;
   $183 = ($182>>>0)>(9);
   if (!($183)) {
    $184 = $30;
    $185 = $20;
    $186 = (($185) + ($184)|0);
    $20 = $186;
    $187 = $15;
    $188 = HEAP32[$32>>2]|0;
    $189 = HEAP32[$26>>2]|0;
    (_FSEv05_buildDTable($187,$29,$188,$189)|0);
    break L52;
   }
   $9 = -15;
   $225 = $9;
   STACKTOP = sp;return ($225|0);
  }
  }
 } while(0);
 $190 = $24;
 L72: do {
  switch ($190|0) {
  case 1:  {
   HEAP32[$27>>2] = 0;
   $191 = $20;
   $192 = $21;
   $193 = ((($192)) + -2|0);
   $194 = ($191>>>0)>($193>>>0);
   if (!($194)) {
    $195 = $14;
    $196 = $20;
    $197 = ((($196)) + 1|0);
    $20 = $197;
    $198 = HEAP8[$196>>0]|0;
    (_FSEv05_buildDTable_rle($195,$198)|0);
    break L72;
   }
   $9 = -14;
   $225 = $9;
   STACKTOP = sp;return ($225|0);
   break;
  }
  case 0:  {
   HEAP32[$27>>2] = 7;
   $199 = $14;
   (_FSEv05_buildDTable_raw($199,7)|0);
   break;
  }
  case 2:  {
   $200 = $18;
   $201 = ($200|0)!=(0);
   if (!($201)) {
    $9 = -15;
    $225 = $9;
    STACKTOP = sp;return ($225|0);
   }
   break;
  }
  default: {
   HEAP32[$33>>2] = 127;
   $202 = $20;
   $203 = $21;
   $204 = $20;
   $205 = $203;
   $206 = $204;
   $207 = (($205) - ($206))|0;
   $208 = (_FSEv05_readNCount($29,$33,$27,$202,$207)|0);
   $30 = $208;
   $209 = $30;
   $210 = (_FSEv05_isError($209)|0);
   $211 = ($210|0)!=(0);
   if ($211) {
    $9 = -1;
    $225 = $9;
    STACKTOP = sp;return ($225|0);
   }
   $212 = HEAP32[$27>>2]|0;
   $213 = ($212>>>0)>(10);
   if (!($213)) {
    $214 = $30;
    $215 = $20;
    $216 = (($215) + ($214)|0);
    $20 = $216;
    $217 = $14;
    $218 = HEAP32[$33>>2]|0;
    $219 = HEAP32[$27>>2]|0;
    (_FSEv05_buildDTable($217,$29,$218,$219)|0);
    break L72;
   }
   $9 = -15;
   $225 = $9;
   STACKTOP = sp;return ($225|0);
  }
  }
 } while(0);
 $220 = $20;
 $221 = $19;
 $222 = $220;
 $223 = $221;
 $224 = (($222) - ($223))|0;
 $9 = $224;
 $225 = $9;
 STACKTOP = sp;return ($225|0);
}
function _ZSTDv05_checkContinuity($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 26640|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)!=($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 26640|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 26652|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = $2;
 $16 = ((($15)) + 26640|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 26644|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $17;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = (0 - ($23))|0;
 $25 = (($14) + ($24)|0);
 $26 = $2;
 $27 = ((($26)) + 26648|0);
 HEAP32[$27>>2] = $25;
 $28 = $3;
 $29 = $2;
 $30 = ((($29)) + 26644|0);
 HEAP32[$30>>2] = $28;
 $31 = $3;
 $32 = $2;
 $33 = ((($32)) + 26640|0);
 HEAP32[$33>>2] = $31;
 STACKTOP = sp;return;
}
function _ZSTDv05_decompressBlock_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $11 = $13;
 $14 = $10;
 $15 = ($14>>>0)>=(131072);
 if ($15) {
  $5 = -14;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 $16 = $6;
 $17 = $9;
 $18 = $10;
 $19 = (_ZSTDv05_decodeLiteralsBlock($16,$17,$18)|0);
 $12 = $19;
 $20 = $12;
 $21 = (_ZSTDv05_isError($20)|0);
 $22 = ($21|0)!=(0);
 $23 = $12;
 if ($22) {
  $5 = $23;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 } else {
  $24 = $11;
  $25 = (($24) + ($23)|0);
  $11 = $25;
  $26 = $12;
  $27 = $10;
  $28 = (($27) - ($26))|0;
  $10 = $28;
  $29 = $6;
  $30 = $7;
  $31 = $8;
  $32 = $11;
  $33 = $10;
  $34 = (_ZSTDv05_decompressSequences($29,$30,$31,$32,$33)|0);
  $5 = $34;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _ZSTDv05_decompressSequences($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 164|0;
 $17 = sp + 112|0;
 $18 = sp + 108|0;
 $20 = sp + 100|0;
 $21 = sp + 96|0;
 $28 = sp + 60|0;
 $29 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $32 = $9;
 $11 = $32;
 $33 = $11;
 $34 = $10;
 $35 = (($33) + ($34)|0);
 $12 = $35;
 $36 = $7;
 $13 = $36;
 $37 = $13;
 $14 = $37;
 $38 = $13;
 $39 = $8;
 $40 = (($38) + ($39)|0);
 $15 = $40;
 $41 = $6;
 $42 = ((($41)) + 26716|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$18>>2] = $43;
 $44 = HEAP32[$18>>2]|0;
 $45 = $6;
 $46 = ((($45)) + 26720|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($44) + ($47)|0);
 $19 = $48;
 $49 = $6;
 $22 = $49;
 $50 = $6;
 $51 = ((($50)) + 6152|0);
 $23 = $51;
 $52 = $6;
 $53 = ((($52)) + 4100|0);
 $24 = $53;
 $54 = $6;
 $55 = ((($54)) + 26644|0);
 $56 = HEAP32[$55>>2]|0;
 $25 = $56;
 $57 = $6;
 $58 = ((($57)) + 26648|0);
 $59 = HEAP32[$58>>2]|0;
 $26 = $59;
 $60 = $6;
 $61 = ((($60)) + 26652|0);
 $62 = HEAP32[$61>>2]|0;
 $27 = $62;
 $63 = $22;
 $64 = $23;
 $65 = $24;
 $66 = $11;
 $67 = $10;
 $68 = $6;
 $69 = ((($68)) + 26712|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (_ZSTDv05_decodeSeqHeaders($20,$21,$17,$63,$64,$65,$66,$67,$70)|0);
 $16 = $71;
 $72 = $16;
 $73 = (_ZSTDv05_isError($72)|0);
 $74 = ($73|0)!=(0);
 $75 = $16;
 if ($74) {
  $5 = $75;
  $149 = $5;
  STACKTOP = sp;return ($149|0);
 }
 $76 = $11;
 $77 = (($76) + ($75)|0);
 $11 = $77;
 $78 = HEAP32[$20>>2]|0;
 $79 = ($78|0)!=(0);
 if ($79) {
  ;HEAP32[$28>>2]=0|0;HEAP32[$28+4>>2]=0|0;HEAP32[$28+8>>2]=0|0;
  $80 = ((($28)) + 8|0);
  HEAP32[$80>>2] = 1;
  $81 = HEAP32[$21>>2]|0;
  $82 = ((($29)) + 44|0);
  HEAP32[$82>>2] = $81;
  $83 = HEAP32[$21>>2]|0;
  $84 = HEAP32[$17>>2]|0;
  $85 = (($83) + ($84)|0);
  $86 = ((($29)) + 48|0);
  HEAP32[$86>>2] = $85;
  $87 = ((($29)) + 40|0);
  HEAP32[$87>>2] = 1;
  $88 = $11;
  $89 = $12;
  $90 = $11;
  $91 = $89;
  $92 = $90;
  $93 = (($91) - ($92))|0;
  $94 = (_BITv05_initDStream($29,$88,$93)|0);
  $16 = $94;
  $95 = $16;
  $96 = (_ERR_isError_351($95)|0);
  $97 = ($96|0)!=(0);
  if ($97) {
   $5 = -15;
   $149 = $5;
   STACKTOP = sp;return ($149|0);
  }
  $98 = ((($29)) + 16|0);
  $99 = $22;
  _FSEv05_initDState($98,$29,$99);
  $100 = ((($29)) + 24|0);
  $101 = $24;
  _FSEv05_initDState($100,$29,$101);
  $102 = ((($29)) + 32|0);
  $103 = $23;
  _FSEv05_initDState($102,$29,$103);
  while(1) {
   $104 = (_BITv05_reloadDStream($29)|0);
   $105 = ($104>>>0)<=(2);
   $106 = HEAP32[$20>>2]|0;
   $107 = ($106|0)!=(0);
   $108 = $105 ? $107 : 0;
   $109 = HEAP32[$20>>2]|0;
   if (!($108)) {
    break;
   }
   $110 = (($109) + -1)|0;
   HEAP32[$20>>2] = $110;
   _ZSTDv05_decodeSequence($28,$29);
   $111 = $14;
   $112 = $15;
   $113 = $19;
   $114 = $25;
   $115 = $26;
   $116 = $27;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$28>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$28+8>>2]|0;
   $117 = (_ZSTDv05_execSequence($111,$112,$$byval_copy,$18,$113,$114,$115,$116)|0);
   $30 = $117;
   $118 = $30;
   $119 = (_ZSTDv05_isError($118)|0);
   $120 = ($119|0)!=(0);
   $121 = $30;
   if ($120) {
    label = 9;
    break;
   }
   $122 = $14;
   $123 = (($122) + ($121)|0);
   $14 = $123;
  }
  if ((label|0) == 9) {
   $5 = $121;
   $149 = $5;
   STACKTOP = sp;return ($149|0);
  }
  $124 = ($109|0)!=(0);
  if ($124) {
   $5 = -15;
   $149 = $5;
   STACKTOP = sp;return ($149|0);
  }
 }
 $125 = $19;
 $126 = HEAP32[$18>>2]|0;
 $127 = $125;
 $128 = $126;
 $129 = (($127) - ($128))|0;
 $31 = $129;
 $130 = HEAP32[$18>>2]|0;
 $131 = $19;
 $132 = ($130>>>0)>($131>>>0);
 if ($132) {
  $5 = -15;
  $149 = $5;
  STACKTOP = sp;return ($149|0);
 }
 $133 = $14;
 $134 = $31;
 $135 = (($133) + ($134)|0);
 $136 = $15;
 $137 = ($135>>>0)>($136>>>0);
 if ($137) {
  $5 = -13;
  $149 = $5;
  STACKTOP = sp;return ($149|0);
 } else {
  $138 = $14;
  $139 = HEAP32[$18>>2]|0;
  $140 = $31;
  _memcpy(($138|0),($139|0),($140|0))|0;
  $141 = $31;
  $142 = $14;
  $143 = (($142) + ($141)|0);
  $14 = $143;
  $144 = $14;
  $145 = $13;
  $146 = $144;
  $147 = $145;
  $148 = (($146) - ($147))|0;
  $5 = $148;
  $149 = $5;
  STACKTOP = sp;return ($149|0);
 }
 return (0)|0;
}
function _ZSTDv05_decodeSequence($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $14 = $3;
 $15 = ((($14)) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $8 = $16;
 $17 = $3;
 $18 = ((($17)) + 48|0);
 $19 = HEAP32[$18>>2]|0;
 $9 = $19;
 $20 = $3;
 $21 = ((($20)) + 16|0);
 $22 = (_FSEv05_peakSymbol($21)|0);
 $23 = $22&255;
 $4 = $23;
 $24 = $4;
 $25 = ($24|0)!=(0);
 $26 = $3;
 $27 = ((($26)) + 40|0);
 $28 = $2;
 $29 = ((($28)) + 8|0);
 $$sink = $25 ? $29 : $27;
 $30 = HEAP32[$$sink>>2]|0;
 $5 = $30;
 $31 = $4;
 $32 = ($31|0)==(63);
 if ($32) {
  $33 = $8;
  $34 = ((($33)) + 1|0);
  $8 = $34;
  $35 = HEAP8[$33>>0]|0;
  $36 = $35&255;
  $10 = $36;
  $37 = $10;
  $38 = ($37>>>0)<(255);
  do {
   if ($38) {
    $39 = $10;
    $40 = $4;
    $41 = (($40) + ($39))|0;
    $4 = $41;
   } else {
    $42 = $8;
    $43 = (_MEM_readLE32_354($42)|0);
    $44 = $43 & 16777215;
    $4 = $44;
    $45 = $4;
    $46 = $45 & 1;
    $47 = ($46|0)!=(0);
    $48 = $4;
    if ($47) {
     $49 = $48 >>> 1;
     $4 = $49;
     $50 = $8;
     $51 = ((($50)) + 3|0);
     $8 = $51;
     break;
    } else {
     $52 = $48&65535;
     $53 = $52&65535;
     $54 = $53 >> 1;
     $4 = $54;
     $55 = $8;
     $56 = ((($55)) + 2|0);
     $8 = $56;
     break;
    }
   }
  } while(0);
  $57 = $8;
  $58 = $9;
  $59 = ($57>>>0)>($58>>>0);
  if ($59) {
   $4 = 318;
  }
  $60 = $8;
  $61 = $9;
  $62 = ($60>>>0)>=($61>>>0);
  if ($62) {
   $63 = $9;
   $64 = ((($63)) + -1|0);
   $8 = $64;
  }
 }
 $65 = $3;
 $66 = ((($65)) + 24|0);
 $67 = (_FSEv05_peakSymbol($66)|0);
 $68 = $67&255;
 $11 = $68;
 $69 = $11;
 $70 = (($69) - 1)|0;
 $12 = $70;
 $71 = $11;
 $72 = ($71|0)==(0);
 $$ = $72 ? 0 : $70;
 $12 = $$;
 $73 = $11;
 $74 = (3168 + ($73<<2)|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = $3;
 $77 = $12;
 $78 = (_BITv05_readBits($76,$77)|0);
 $79 = (($75) + ($78))|0;
 $6 = $79;
 $80 = (_MEM_32bits_360()|0);
 $81 = ($80|0)!=(0);
 if ($81) {
  $82 = $3;
  (_BITv05_reloadDStream($82)|0);
 }
 $83 = $11;
 $84 = ($83|0)==(0);
 if ($84) {
  $85 = $5;
  $6 = $85;
 }
 $86 = $11;
 $87 = $4;
 $88 = ($87|0)!=(0);
 $89 = $88 ^ 1;
 $90 = $89&1;
 $91 = $86 | $90;
 $92 = ($91|0)!=(0);
 if ($92) {
  $93 = $2;
  $94 = ((($93)) + 8|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $3;
  $97 = ((($96)) + 40|0);
  HEAP32[$97>>2] = $95;
 }
 $98 = $3;
 $99 = ((($98)) + 24|0);
 $100 = $3;
 (_FSEv05_decodeSymbol($99,$100)|0);
 $101 = $3;
 $102 = ((($101)) + 16|0);
 $103 = $3;
 (_FSEv05_decodeSymbol($102,$103)|0);
 $104 = (_MEM_32bits_360()|0);
 $105 = ($104|0)!=(0);
 if ($105) {
  $106 = $3;
  (_BITv05_reloadDStream($106)|0);
 }
 $107 = $3;
 $108 = ((($107)) + 32|0);
 $109 = $3;
 $110 = (_FSEv05_decodeSymbol($108,$109)|0);
 $111 = $110&255;
 $7 = $111;
 $112 = $7;
 $113 = ($112|0)==(127);
 if ($113) {
  $114 = $8;
  $115 = ((($114)) + 1|0);
  $8 = $115;
  $116 = HEAP8[$114>>0]|0;
  $117 = $116&255;
  $13 = $117;
  $118 = $13;
  $119 = ($118>>>0)<(255);
  do {
   if ($119) {
    $120 = $13;
    $121 = $7;
    $122 = (($121) + ($120))|0;
    $7 = $122;
   } else {
    $123 = $8;
    $124 = (_MEM_readLE32_354($123)|0);
    $125 = $124 & 16777215;
    $7 = $125;
    $126 = $7;
    $127 = $126 & 1;
    $128 = ($127|0)!=(0);
    $129 = $7;
    if ($128) {
     $130 = $129 >>> 1;
     $7 = $130;
     $131 = $8;
     $132 = ((($131)) + 3|0);
     $8 = $132;
     break;
    } else {
     $133 = $129&65535;
     $134 = $133&65535;
     $135 = $134 >> 1;
     $7 = $135;
     $136 = $8;
     $137 = ((($136)) + 2|0);
     $8 = $137;
     break;
    }
   }
  } while(0);
  $138 = $8;
  $139 = $9;
  $140 = ($138>>>0)>($139>>>0);
  if ($140) {
   $7 = 382;
  }
  $141 = $8;
  $142 = $9;
  $143 = ($141>>>0)>=($142>>>0);
  if ($143) {
   $144 = $9;
   $145 = ((($144)) + -1|0);
   $8 = $145;
  }
 }
 $146 = $7;
 $147 = (($146) + 4)|0;
 $7 = $147;
 $148 = $4;
 $149 = $2;
 HEAP32[$149>>2] = $148;
 $150 = $6;
 $151 = $2;
 $152 = ((($151)) + 8|0);
 HEAP32[$152>>2] = $150;
 $153 = $7;
 $154 = $2;
 $155 = ((($154)) + 4|0);
 HEAP32[$155>>2] = $153;
 $156 = $8;
 $157 = $3;
 $158 = ((($157)) + 44|0);
 HEAP32[$158>>2] = $156;
 STACKTOP = sp;return;
}
function _ZSTDv05_execSequence($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $24 = $9;
 $25 = HEAP32[$2>>2]|0;
 $26 = (($24) + ($25)|0);
 $16 = $26;
 $27 = HEAP32[$2>>2]|0;
 $28 = ((($2)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + ($29))|0;
 $17 = $30;
 $31 = $9;
 $32 = $17;
 $33 = (($31) + ($32)|0);
 $18 = $33;
 $34 = $10;
 $35 = ((($34)) + -8|0);
 $19 = $35;
 $36 = $11;
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$2>>2]|0;
 $39 = (($37) + ($38)|0);
 $20 = $39;
 $40 = $16;
 $41 = ((($2)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (0 - ($42))|0;
 $44 = (($40) + ($43)|0);
 $21 = $44;
 $45 = $16;
 $46 = $19;
 $47 = ($45>>>0)>($46>>>0);
 if ($47) {
  $8 = -13;
  $206 = $8;
  STACKTOP = sp;return ($206|0);
 }
 $48 = $18;
 $49 = $10;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  $8 = -13;
  $206 = $8;
  STACKTOP = sp;return ($206|0);
 }
 $51 = $20;
 $52 = $12;
 $53 = ($51>>>0)>($52>>>0);
 if ($53) {
  $8 = -15;
  $206 = $8;
  STACKTOP = sp;return ($206|0);
 }
 $54 = $9;
 $55 = $11;
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$2>>2]|0;
 _ZSTDv05_wildcopy($54,$56,$57);
 $58 = $16;
 $9 = $58;
 $59 = $20;
 $60 = $11;
 HEAP32[$60>>2] = $59;
 $61 = ((($2)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $16;
 $64 = $13;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = ($62>>>0)>($67>>>0);
 do {
  if ($68) {
   $69 = ((($2)) + 8|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $16;
   $72 = $14;
   $73 = $71;
   $74 = $72;
   $75 = (($73) - ($74))|0;
   $76 = ($70>>>0)>($75>>>0);
   if ($76) {
    $8 = -15;
    $206 = $8;
    STACKTOP = sp;return ($206|0);
   }
   $77 = $15;
   $78 = $13;
   $79 = $21;
   $80 = $78;
   $81 = $79;
   $82 = (($80) - ($81))|0;
   $83 = (0 - ($82))|0;
   $84 = (($77) + ($83)|0);
   $21 = $84;
   $85 = $21;
   $86 = ((($2)) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($85) + ($87)|0);
   $89 = $15;
   $90 = ($88>>>0)<=($89>>>0);
   if ($90) {
    $91 = $16;
    $92 = $21;
    $93 = ((($2)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    _memmove(($91|0),($92|0),($94|0))|0;
    $95 = $17;
    $8 = $95;
    $206 = $8;
    STACKTOP = sp;return ($206|0);
   }
   $96 = $15;
   $97 = $21;
   $98 = $96;
   $99 = $97;
   $100 = (($98) - ($99))|0;
   $22 = $100;
   $101 = $16;
   $102 = $21;
   $103 = $22;
   _memmove(($101|0),($102|0),($103|0))|0;
   $104 = $16;
   $105 = $22;
   $106 = (($104) + ($105)|0);
   $9 = $106;
   $107 = $22;
   $108 = ((($2)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) - ($107))|0;
   HEAP32[$108>>2] = $110;
   $111 = $13;
   $21 = $111;
   $112 = $9;
   $113 = $19;
   $114 = ($112>>>0)>($113>>>0);
   if (!($114)) {
    $115 = ((($2)) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116>>>0)<(4);
    if (!($117)) {
     break;
    }
   }
   while(1) {
    $118 = $9;
    $119 = $18;
    $120 = ($118>>>0)<($119>>>0);
    if (!($120)) {
     break;
    }
    $121 = $21;
    $122 = ((($121)) + 1|0);
    $21 = $122;
    $123 = HEAP8[$121>>0]|0;
    $124 = $9;
    $125 = ((($124)) + 1|0);
    $9 = $125;
    HEAP8[$124>>0] = $123;
   }
   $126 = $17;
   $8 = $126;
   $206 = $8;
   STACKTOP = sp;return ($206|0);
  }
 } while(0);
 $127 = ((($2)) + 8|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ($128>>>0)<(8);
 if ($129) {
  $130 = ((($2)) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (3104 + ($131<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  $23 = $133;
  $134 = $21;
  $135 = HEAP8[$134>>0]|0;
  $136 = $9;
  HEAP8[$136>>0] = $135;
  $137 = $21;
  $138 = ((($137)) + 1|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $9;
  $141 = ((($140)) + 1|0);
  HEAP8[$141>>0] = $139;
  $142 = $21;
  $143 = ((($142)) + 2|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $9;
  $146 = ((($145)) + 2|0);
  HEAP8[$146>>0] = $144;
  $147 = $21;
  $148 = ((($147)) + 3|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $9;
  $151 = ((($150)) + 3|0);
  HEAP8[$151>>0] = $149;
  $152 = ((($2)) + 8|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (3136 + ($153<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $21;
  $157 = (($156) + ($155)|0);
  $21 = $157;
  $158 = $9;
  $159 = ((($158)) + 4|0);
  $160 = $21;
  _ZSTDv05_copy4($159,$160);
  $161 = $23;
  $162 = $21;
  $163 = (0 - ($161))|0;
  $164 = (($162) + ($163)|0);
  $21 = $164;
 } else {
  $165 = $9;
  $166 = $21;
  _ZSTDv05_copy8($165,$166);
 }
 $167 = $9;
 $168 = ((($167)) + 8|0);
 $9 = $168;
 $169 = $21;
 $170 = ((($169)) + 8|0);
 $21 = $170;
 $171 = $18;
 $172 = $10;
 $173 = ((($172)) + -12|0);
 $174 = ($171>>>0)>($173>>>0);
 $175 = $9;
 L35: do {
  if ($174) {
   $176 = $19;
   $177 = ($175>>>0)<($176>>>0);
   if ($177) {
    $178 = $9;
    $179 = $21;
    $180 = $19;
    $181 = $9;
    $182 = $180;
    $183 = $181;
    $184 = (($182) - ($183))|0;
    _ZSTDv05_wildcopy($178,$179,$184);
    $185 = $19;
    $186 = $9;
    $187 = $185;
    $188 = $186;
    $189 = (($187) - ($188))|0;
    $190 = $21;
    $191 = (($190) + ($189)|0);
    $21 = $191;
    $192 = $19;
    $9 = $192;
   }
   while(1) {
    $193 = $9;
    $194 = $18;
    $195 = ($193>>>0)<($194>>>0);
    if (!($195)) {
     break L35;
    }
    $196 = $21;
    $197 = ((($196)) + 1|0);
    $21 = $197;
    $198 = HEAP8[$196>>0]|0;
    $199 = $9;
    $200 = ((($199)) + 1|0);
    $9 = $200;
    HEAP8[$199>>0] = $198;
   }
  } else {
   $201 = $21;
   $202 = ((($2)) + 4|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($203) - 8)|0;
   _ZSTDv05_wildcopy($175,$201,$204);
  }
 } while(0);
 $205 = $17;
 $8 = $205;
 $206 = $8;
 STACKTOP = sp;return ($206|0);
}
function _ZSTDv05_wildcopy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $6 = $9;
 $10 = $3;
 $7 = $10;
 $11 = $7;
 $12 = $5;
 $13 = (($11) + ($12)|0);
 $8 = $13;
 while(1) {
  $14 = $7;
  $15 = $6;
  _ZSTDv05_copy8($14,$15);
  $16 = $7;
  $17 = ((($16)) + 8|0);
  $7 = $17;
  $18 = $6;
  $19 = ((($18)) + 8|0);
  $6 = $19;
  $20 = $7;
  $21 = $8;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ZSTDv05_copy4($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;
 STACKTOP = sp;return;
}
function _ZSTDv05_copy8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$4+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$4+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$4+7>>0]=HEAP8[$5+7>>0]|0;
 STACKTOP = sp;return;
}
function _FSEv05_peakSymbol($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7<<2)|0);
 ;HEAP16[$2>>1]=HEAP16[$8>>1]|0;HEAP16[$2+2>>1]=HEAP16[$8+2>>1]|0;
 $9 = ((($2)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 STACKTOP = sp;return ($10|0);
}
function _ZSTDv05_decompress_continueDCtx($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $17 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $21 = $9;
 $11 = $21;
 $22 = $11;
 $23 = $10;
 $24 = (($22) + ($23)|0);
 $12 = $24;
 $25 = $7;
 $13 = $25;
 $26 = $13;
 $14 = $26;
 $27 = $13;
 $28 = $8;
 $29 = (($27) + ($28)|0);
 $15 = $29;
 $30 = $10;
 $16 = $30;
 $31 = $10;
 $32 = ($31>>>0)<(8);
 if ($32) {
  $5 = -14;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $33 = $6;
 $34 = $9;
 $35 = (_ZSTDv05_decodeFrameHeader_Part1($33,$34,5)|0);
 $18 = $35;
 $36 = $18;
 $37 = (_ZSTDv05_isError($36)|0);
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $18;
  $5 = $39;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $40 = $10;
 $41 = $18;
 $42 = (($41) + 3)|0;
 $43 = ($40>>>0)<($42>>>0);
 if ($43) {
  $5 = -14;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 $44 = $18;
 $45 = $11;
 $46 = (($45) + ($44)|0);
 $11 = $46;
 $47 = $18;
 $48 = $16;
 $49 = (($48) - ($47))|0;
 $16 = $49;
 $50 = $6;
 $51 = $9;
 $52 = $18;
 $53 = (_ZSTDv05_decodeFrameHeader_Part2($50,$51,$52)|0);
 $18 = $53;
 $54 = $18;
 $55 = (_ZSTDv05_isError($54)|0);
 $56 = ($55|0)!=(0);
 if ($56) {
  $57 = $18;
  $5 = $57;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 L16: while(1) {
  $19 = 0;
  $58 = $11;
  $59 = $12;
  $60 = $11;
  $61 = $59;
  $62 = $60;
  $63 = (($61) - ($62))|0;
  $64 = (_ZSTDv05_getcBlockSize($58,$63,$17)|0);
  $20 = $64;
  $65 = $20;
  $66 = (_ZSTDv05_isError($65)|0);
  $67 = ($66|0)!=(0);
  if ($67) {
   label = 10;
   break;
  }
  $69 = $11;
  $70 = ((($69)) + 3|0);
  $11 = $70;
  $71 = $16;
  $72 = (($71) - 3)|0;
  $16 = $72;
  $73 = $20;
  $74 = $16;
  $75 = ($73>>>0)>($74>>>0);
  if ($75) {
   label = 12;
   break;
  }
  $76 = HEAP32[$17>>2]|0;
  switch ($76|0) {
  case 2:  {
   label = 16;
   break L16;
   break;
  }
  case 0:  {
   $77 = $6;
   $78 = $14;
   $79 = $15;
   $80 = $14;
   $81 = $79;
   $82 = $80;
   $83 = (($81) - ($82))|0;
   $84 = $11;
   $85 = $20;
   $86 = (_ZSTDv05_decompressBlock_internal($77,$78,$83,$84,$85)|0);
   $19 = $86;
   break;
  }
  case 1:  {
   $87 = $14;
   $88 = $15;
   $89 = $14;
   $90 = $88;
   $91 = $89;
   $92 = (($90) - ($91))|0;
   $93 = $11;
   $94 = $20;
   $95 = (_ZSTDv05_copyRawBlock($87,$92,$93,$94)|0);
   $19 = $95;
   break;
  }
  case 3:  {
   $96 = $16;
   $97 = ($96|0)!=(0);
   if ($97) {
    label = 18;
    break L16;
   }
   break;
  }
  default: {
   label = 19;
   break L16;
  }
  }
  $98 = $20;
  $99 = ($98|0)==(0);
  if ($99) {
   label = 24;
   break;
  }
  $100 = $19;
  $101 = (_ZSTDv05_isError($100)|0);
  $102 = ($101|0)!=(0);
  $103 = $19;
  if ($102) {
   label = 22;
   break;
  }
  $104 = $14;
  $105 = (($104) + ($103)|0);
  $14 = $105;
  $106 = $20;
  $107 = $11;
  $108 = (($107) + ($106)|0);
  $11 = $108;
  $109 = $20;
  $110 = $16;
  $111 = (($110) - ($109))|0;
  $16 = $111;
 }
 if ((label|0) == 10) {
  $68 = $20;
  $5 = $68;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 12) {
  $5 = -14;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 16) {
  $5 = -1;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 18) {
  $5 = -14;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 19) {
  $5 = -1;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 22) {
  $5 = $103;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 else if ((label|0) == 24) {
  $112 = $14;
  $113 = $13;
  $114 = $112;
  $115 = $113;
  $116 = (($114) - ($115))|0;
  $5 = $116;
  $117 = $5;
  STACKTOP = sp;return ($117|0);
 }
 return (0)|0;
}
function _ZSTDv05_decodeFrameHeader_Part1($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = ($8|0)!=(5);
 do {
  if ($9) {
   $3 = -14;
  } else {
   $10 = $5;
   $11 = (_MEM_readLE32_354($10)|0);
   $7 = $11;
   $12 = $7;
   $13 = ($12|0)!=(-47205083);
   if ($13) {
    $3 = -2;
    break;
   } else {
    $14 = $4;
    $15 = ((($14)) + 26660|0);
    HEAP32[$15>>2] = 5;
    $16 = $4;
    $17 = ((($16)) + 26660|0);
    $18 = HEAP32[$17>>2]|0;
    $3 = $18;
    break;
   }
  }
 } while(0);
 $19 = $3;
 STACKTOP = sp;return ($19|0);
}
function _ZSTDv05_decodeFrameHeader_Part2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $6;
 $9 = $4;
 $10 = ((($9)) + 26660|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)!=($11|0);
 if ($12) {
  $3 = -14;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 $13 = $4;
 $14 = ((($13)) + 26664|0);
 $15 = $5;
 $16 = $6;
 $17 = (_ZSTDv05_getFrameParams($14,$15,$16)|0);
 $7 = $17;
 $18 = (_MEM_32bits_360()|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  $20 = $4;
  $21 = ((($20)) + 26664|0);
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23>>>0)>(25);
  if ($24) {
   $3 = -6;
   $26 = $3;
   STACKTOP = sp;return ($26|0);
  }
 }
 $25 = $7;
 $3 = $25;
 $26 = $3;
 STACKTOP = sp;return ($26|0);
}
function _ZSTDv05_copyRawBlock($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $8;
 $10 = $6;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $4 = -13;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 } else {
  $12 = $5;
  $13 = $7;
  $14 = $8;
  _memcpy(($12|0),($13|0),($14|0))|0;
  $15 = $8;
  $4 = $15;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _ZSTDv05_decompress_usingDict($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $12;
 $16 = $13;
 (_ZSTDv05_decompressBegin_usingDict($14,$15,$16)|0);
 $17 = $7;
 $18 = $8;
 _ZSTDv05_checkContinuity($17,$18);
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $24 = (_ZSTDv05_decompress_continueDCtx($19,$20,$21,$22,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _ZSTDv05_decompressBegin_usingDict($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = (_ZSTDv05_decompressBegin($8)|0);
 $7 = $9;
 $10 = $7;
 $11 = (_ZSTDv05_isError($10)|0);
 $12 = ($11|0)!=(0);
 if ($12) {
  $13 = $7;
  $3 = $13;
  $25 = $3;
  STACKTOP = sp;return ($25|0);
 }
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 $16 = $6;
 $17 = ($16|0)!=(0);
 $or$cond = $15 & $17;
 if ($or$cond) {
  $18 = $4;
  $19 = $5;
  $20 = $6;
  $21 = (_ZSTDv05_decompress_insertDictionary($18,$19,$20)|0);
  $7 = $21;
  $22 = $7;
  $23 = (_ZSTDv05_isError($22)|0);
  $24 = ($23|0)!=(0);
  if ($24) {
   $3 = -20;
   $25 = $3;
   STACKTOP = sp;return ($25|0);
  }
 }
 $3 = 0;
 $25 = $3;
 STACKTOP = sp;return ($25|0);
}
function _ZSTDv05_decompress_insertDictionary($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = (_MEM_readLE32_354($9)|0);
 $8 = $10;
 $11 = $8;
 $12 = ($11|0)!=(-332356555);
 if ($12) {
  $13 = $4;
  $14 = $5;
  $15 = $6;
  _ZSTDv05_refDictContent($13,$14,$15);
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 $16 = $5;
 $17 = ((($16)) + 4|0);
 $5 = $17;
 $18 = $6;
 $19 = (($18) - 4)|0;
 $6 = $19;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = (_ZSTDv05_loadEntropy($20,$21,$22)|0);
 $7 = $23;
 $24 = $7;
 $25 = (_ZSTDv05_isError($24)|0);
 $26 = ($25|0)!=(0);
 if ($26) {
  $3 = -20;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 } else {
  $27 = $5;
  $28 = $7;
  $29 = (($27) + ($28)|0);
  $5 = $29;
  $30 = $7;
  $31 = $6;
  $32 = (($31) - ($30))|0;
  $6 = $32;
  $33 = $4;
  $34 = $5;
  $35 = $6;
  _ZSTDv05_refDictContent($33,$34,$35);
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _ZSTDv05_refDictContent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 26640|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ((($9)) + 26652|0);
 HEAP32[$10>>2] = $8;
 $11 = $4;
 $12 = $3;
 $13 = ((($12)) + 26640|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 26644|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (0 - ($20))|0;
 $22 = (($11) + ($21)|0);
 $23 = $3;
 $24 = ((($23)) + 26648|0);
 HEAP32[$24>>2] = $22;
 $25 = $4;
 $26 = $3;
 $27 = ((($26)) + 26644|0);
 HEAP32[$27>>2] = $25;
 $28 = $4;
 $29 = $5;
 $30 = (($28) + ($29)|0);
 $31 = $3;
 $32 = ((($31)) + 26640|0);
 HEAP32[$32>>2] = $30;
 STACKTOP = sp;return;
}
function _ZSTDv05_loadEntropy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $12 = sp + 448|0;
 $13 = sp + 20|0;
 $14 = sp + 16|0;
 $15 = sp + 192|0;
 $16 = sp + 12|0;
 $17 = sp + 8|0;
 $18 = sp + 64|0;
 $19 = sp + 4|0;
 $20 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$13>>2] = 31;
 HEAP32[$16>>2] = 127;
 HEAP32[$19>>2] = 63;
 $21 = $4;
 $22 = ((($21)) + 10252|0);
 $23 = $5;
 $24 = $6;
 $25 = (_HUFv05_readDTableX4($22,$23,$24)|0);
 $7 = $25;
 $26 = $7;
 $27 = (_HUFv05_isError($26)|0);
 $28 = ($27|0)!=(0);
 if ($28) {
  $3 = -20;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $29 = $5;
 $30 = $7;
 $31 = (($29) + ($30)|0);
 $5 = $31;
 $32 = $7;
 $33 = $6;
 $34 = (($33) - ($32))|0;
 $6 = $34;
 $35 = $5;
 $36 = $6;
 $37 = (_FSEv05_readNCount($12,$13,$14,$35,$36)|0);
 $8 = $37;
 $38 = $8;
 $39 = (_FSEv05_isError($38)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  $3 = -20;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $41 = HEAP32[$14>>2]|0;
 $42 = ($41>>>0)>(9);
 if ($42) {
  $3 = -20;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $43 = $4;
 $44 = ((($43)) + 4100|0);
 $45 = HEAP32[$13>>2]|0;
 $46 = HEAP32[$14>>2]|0;
 $47 = (_FSEv05_buildDTable($44,$12,$45,$46)|0);
 $10 = $47;
 $48 = $10;
 $49 = (_FSEv05_isError($48)|0);
 $50 = ($49|0)!=(0);
 if ($50) {
  $3 = -20;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $51 = $5;
 $52 = $8;
 $53 = (($51) + ($52)|0);
 $5 = $53;
 $54 = $8;
 $55 = $6;
 $56 = (($55) - ($54))|0;
 $6 = $56;
 $57 = $5;
 $58 = $6;
 $59 = (_FSEv05_readNCount($15,$16,$17,$57,$58)|0);
 $9 = $59;
 $60 = $9;
 $61 = (_FSEv05_isError($60)|0);
 $62 = ($61|0)!=(0);
 if ($62) {
  $3 = -20;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $63 = HEAP32[$17>>2]|0;
 $64 = ($63>>>0)>(10);
 if ($64) {
  $3 = -20;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $65 = $4;
 $66 = ((($65)) + 6152|0);
 $67 = HEAP32[$16>>2]|0;
 $68 = HEAP32[$17>>2]|0;
 $69 = (_FSEv05_buildDTable($66,$15,$67,$68)|0);
 $10 = $69;
 $70 = $10;
 $71 = (_FSEv05_isError($70)|0);
 $72 = ($71|0)!=(0);
 if ($72) {
  $3 = -20;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $73 = $5;
 $74 = $9;
 $75 = (($73) + ($74)|0);
 $5 = $75;
 $76 = $9;
 $77 = $6;
 $78 = (($77) - ($76))|0;
 $6 = $78;
 $79 = $5;
 $80 = $6;
 $81 = (_FSEv05_readNCount($18,$19,$20,$79,$80)|0);
 $11 = $81;
 $82 = HEAP32[$20>>2]|0;
 $83 = ($82>>>0)>(10);
 if ($83) {
  $3 = -20;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $84 = $11;
 $85 = (_FSEv05_isError($84)|0);
 $86 = ($85|0)!=(0);
 if ($86) {
  $3 = -20;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $87 = $4;
 $88 = HEAP32[$19>>2]|0;
 $89 = HEAP32[$20>>2]|0;
 $90 = (_FSEv05_buildDTable($87,$18,$88,$89)|0);
 $10 = $90;
 $91 = $10;
 $92 = (_FSEv05_isError($91)|0);
 $93 = ($92|0)!=(0);
 if ($93) {
  $3 = -20;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 } else {
  $94 = $4;
  $95 = ((($94)) + 26712|0);
  HEAP32[$95>>2] = 1;
  $96 = $7;
  $97 = $8;
  $98 = (($96) + ($97))|0;
  $99 = $9;
  $100 = (($98) + ($99))|0;
  $101 = $11;
  $102 = (($100) + ($101))|0;
  $3 = $102;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 return (0)|0;
}
function _ZSTDv05_findFrameCompressedSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $9 = $3;
 $5 = $9;
 $10 = $4;
 $6 = $10;
 $11 = $4;
 $12 = ($11>>>0)<(5);
 if ($12) {
  $2 = -14;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $13 = $3;
 $14 = (_MEM_readLE32_354($13)|0);
 $15 = ($14|0)!=(-47205083);
 if ($15) {
  $2 = -2;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $16 = $5;
 $17 = ((($16)) + 5|0);
 $5 = $17;
 $18 = $6;
 $19 = (($18) - 5)|0;
 $6 = $19;
 while(1) {
  $20 = $5;
  $21 = $6;
  $22 = (_ZSTDv05_getcBlockSize($20,$21,$7)|0);
  $8 = $22;
  $23 = $8;
  $24 = (_ZSTDv05_isError($23)|0);
  $25 = ($24|0)!=(0);
  if ($25) {
   label = 7;
   break;
  }
  $27 = $5;
  $28 = ((($27)) + 3|0);
  $5 = $28;
  $29 = $6;
  $30 = (($29) - 3)|0;
  $6 = $30;
  $31 = $8;
  $32 = $6;
  $33 = ($31>>>0)>($32>>>0);
  if ($33) {
   label = 9;
   break;
  }
  $34 = $8;
  $35 = ($34|0)==(0);
  if ($35) {
   label = 12;
   break;
  }
  $36 = $8;
  $37 = $5;
  $38 = (($37) + ($36)|0);
  $5 = $38;
  $39 = $8;
  $40 = $6;
  $41 = (($40) - ($39))|0;
  $6 = $41;
 }
 if ((label|0) == 7) {
  $26 = $8;
  $2 = $26;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 else if ((label|0) == 9) {
  $2 = -14;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 else if ((label|0) == 12) {
  $42 = $5;
  $43 = $3;
  $44 = $42;
  $45 = $43;
  $46 = (($44) - ($45))|0;
  $2 = $46;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _ZBUFFv05_freeDCtx($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  (_ZSTDv05_freeDCtx($6)|0);
  $7 = $2;
  $8 = ((($7)) + 48|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = $2;
  $11 = ((($10)) + 60|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
  $13 = $2;
  _free($13);
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _ERR_isError_388($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2>>>0)>(4294967271);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _HUFv06_isError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_388($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _FSEv06_readNCount($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $24 = $9;
 $11 = $24;
 $25 = $11;
 $26 = $10;
 $27 = (($25) + ($26)|0);
 $12 = $27;
 $28 = $11;
 $13 = $28;
 $19 = 0;
 $20 = 0;
 $29 = $10;
 $30 = ($29>>>0)<(4);
 if ($30) {
  $5 = -14;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $31 = $13;
 $32 = (_MEM_readLE32_391($31)|0);
 $17 = $32;
 $33 = $17;
 $34 = $33 & 15;
 $35 = (($34) + 5)|0;
 $14 = $35;
 $36 = $14;
 $37 = ($36|0)>(15);
 if ($37) {
  $5 = -17;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $38 = $17;
 $39 = $38 >>> 4;
 $17 = $39;
 $18 = 4;
 $40 = $14;
 $41 = $8;
 HEAP32[$41>>2] = $40;
 $42 = $14;
 $43 = 1 << $42;
 $44 = (($43) + 1)|0;
 $15 = $44;
 $45 = $14;
 $46 = 1 << $45;
 $16 = $46;
 $47 = $14;
 $48 = (($47) + 1)|0;
 $14 = $48;
 L9: while(1) {
  $49 = $15;
  $50 = ($49|0)>(1);
  if (!($50)) {
   break;
  }
  $51 = $19;
  $52 = $7;
  $53 = HEAP32[$52>>2]|0;
  $54 = ($51>>>0)<=($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = $20;
  $56 = ($55|0)!=(0);
  do {
   if ($56) {
    $57 = $19;
    $21 = $57;
    while(1) {
     $58 = $17;
     $59 = $58 & 65535;
     $60 = ($59|0)==(65535);
     if (!($60)) {
      break;
     }
     $61 = $21;
     $62 = (($61) + 24)|0;
     $21 = $62;
     $63 = $13;
     $64 = $12;
     $65 = ((($64)) + -5|0);
     $66 = ($63>>>0)<($65>>>0);
     if ($66) {
      $67 = $13;
      $68 = ((($67)) + 2|0);
      $13 = $68;
      $69 = $13;
      $70 = (_MEM_readLE32_391($69)|0);
      $71 = $18;
      $72 = $70 >>> $71;
      $17 = $72;
      continue;
     } else {
      $73 = $17;
      $74 = $73 >>> 16;
      $17 = $74;
      $75 = $18;
      $76 = (($75) + 16)|0;
      $18 = $76;
      continue;
     }
    }
    while(1) {
     $77 = $17;
     $78 = $77 & 3;
     $79 = ($78|0)==(3);
     if (!($79)) {
      break;
     }
     $80 = $21;
     $81 = (($80) + 3)|0;
     $21 = $81;
     $82 = $17;
     $83 = $82 >>> 2;
     $17 = $83;
     $84 = $18;
     $85 = (($84) + 2)|0;
     $18 = $85;
    }
    $86 = $17;
    $87 = $86 & 3;
    $88 = $21;
    $89 = (($88) + ($87))|0;
    $21 = $89;
    $90 = $18;
    $91 = (($90) + 2)|0;
    $18 = $91;
    $92 = $21;
    $93 = $7;
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92>>>0)>($94>>>0);
    if ($95) {
     label = 17;
     break L9;
    }
    while(1) {
     $96 = $19;
     $97 = $21;
     $98 = ($96>>>0)<($97>>>0);
     if (!($98)) {
      break;
     }
     $99 = $6;
     $100 = $19;
     $101 = (($100) + 1)|0;
     $19 = $101;
     $102 = (($99) + ($100<<1)|0);
     HEAP16[$102>>1] = 0;
    }
    $103 = $13;
    $104 = $12;
    $105 = ((($104)) + -7|0);
    $106 = ($103>>>0)<=($105>>>0);
    if (!($106)) {
     $107 = $13;
     $108 = $18;
     $109 = $108 >> 3;
     $110 = (($107) + ($109)|0);
     $111 = $12;
     $112 = ((($111)) + -4|0);
     $113 = ($110>>>0)<=($112>>>0);
     if (!($113)) {
      $124 = $17;
      $125 = $124 >>> 2;
      $17 = $125;
      break;
     }
    }
    $114 = $18;
    $115 = $114 >> 3;
    $116 = $13;
    $117 = (($116) + ($115)|0);
    $13 = $117;
    $118 = $18;
    $119 = $118 & 7;
    $18 = $119;
    $120 = $13;
    $121 = (_MEM_readLE32_391($120)|0);
    $122 = $18;
    $123 = $121 >>> $122;
    $17 = $123;
   }
  } while(0);
  $126 = $16;
  $127 = $126<<1;
  $128 = (($127) - 1)|0;
  $129 = $15;
  $130 = (($128) - ($129))|0;
  $131 = $130&65535;
  $22 = $131;
  $132 = $17;
  $133 = $16;
  $134 = (($133) - 1)|0;
  $135 = $132 & $134;
  $136 = $22;
  $137 = $136 << 16 >> 16;
  $138 = ($135>>>0)<($137>>>0);
  $139 = $17;
  $140 = $16;
  if ($138) {
   $141 = (($140) - 1)|0;
   $142 = $139 & $141;
   $143 = $142&65535;
   $23 = $143;
   $144 = $14;
   $145 = (($144) - 1)|0;
   $146 = $18;
   $147 = (($146) + ($145))|0;
   $18 = $147;
  } else {
   $148 = $140<<1;
   $149 = (($148) - 1)|0;
   $150 = $139 & $149;
   $151 = $150&65535;
   $23 = $151;
   $152 = $23;
   $153 = $152 << 16 >> 16;
   $154 = $16;
   $155 = ($153|0)>=($154|0);
   if ($155) {
    $156 = $22;
    $157 = $156 << 16 >> 16;
    $158 = $23;
    $159 = $158 << 16 >> 16;
    $160 = (($159) - ($157))|0;
    $161 = $160&65535;
    $23 = $161;
   }
   $162 = $14;
   $163 = $18;
   $164 = (($163) + ($162))|0;
   $18 = $164;
  }
  $165 = $23;
  $166 = (($165) + -1)<<16>>16;
  $23 = $166;
  $167 = $23;
  $168 = (_FSEv06_abs($167)|0);
  $169 = $168 << 16 >> 16;
  $170 = $15;
  $171 = (($170) - ($169))|0;
  $15 = $171;
  $172 = $23;
  $173 = $6;
  $174 = $19;
  $175 = (($174) + 1)|0;
  $19 = $175;
  $176 = (($173) + ($174<<1)|0);
  HEAP16[$176>>1] = $172;
  $177 = $23;
  $178 = ($177<<16>>16)!=(0);
  $179 = $178 ^ 1;
  $180 = $179&1;
  $20 = $180;
  while(1) {
   $181 = $15;
   $182 = $16;
   $183 = ($181|0)<($182|0);
   if (!($183)) {
    break;
   }
   $184 = $14;
   $185 = (($184) + -1)|0;
   $14 = $185;
   $186 = $16;
   $187 = $186 >> 1;
   $16 = $187;
  }
  $188 = $13;
  $189 = $12;
  $190 = ((($189)) + -7|0);
  $191 = ($188>>>0)<=($190>>>0);
  if ($191) {
   label = 34;
  } else {
   $192 = $13;
   $193 = $18;
   $194 = $193 >> 3;
   $195 = (($192) + ($194)|0);
   $196 = $12;
   $197 = ((($196)) + -4|0);
   $198 = ($195>>>0)<=($197>>>0);
   if ($198) {
    label = 34;
   } else {
    $205 = $12;
    $206 = ((($205)) + -4|0);
    $207 = $13;
    $208 = $206;
    $209 = $207;
    $210 = (($208) - ($209))|0;
    $211 = $210<<3;
    $212 = $18;
    $213 = (($212) - ($211))|0;
    $18 = $213;
    $214 = $12;
    $215 = ((($214)) + -4|0);
    $13 = $215;
   }
  }
  if ((label|0) == 34) {
   label = 0;
   $199 = $18;
   $200 = $199 >> 3;
   $201 = $13;
   $202 = (($201) + ($200)|0);
   $13 = $202;
   $203 = $18;
   $204 = $203 & 7;
   $18 = $204;
  }
  $216 = $13;
  $217 = (_MEM_readLE32_391($216)|0);
  $218 = $18;
  $219 = $218 & 31;
  $220 = $217 >>> $219;
  $17 = $220;
 }
 if ((label|0) == 17) {
  $5 = -19;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $221 = $15;
 $222 = ($221|0)!=(1);
 if ($222) {
  $5 = -1;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $223 = $19;
 $224 = (($223) - 1)|0;
 $225 = $7;
 HEAP32[$225>>2] = $224;
 $226 = $18;
 $227 = (($226) + 7)|0;
 $228 = $227 >> 3;
 $229 = $13;
 $230 = (($229) + ($228)|0);
 $13 = $230;
 $231 = $13;
 $232 = $11;
 $233 = $231;
 $234 = $232;
 $235 = (($233) - ($234))|0;
 $236 = $10;
 $237 = ($235>>>0)>($236>>>0);
 if ($237) {
  $5 = -14;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 } else {
  $238 = $13;
  $239 = $11;
  $240 = $238;
  $241 = $239;
  $242 = (($240) - ($241))|0;
  $5 = $242;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 return (0)|0;
}
function _MEM_readLE32_391($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_isLittleEndian_392()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read32_393($5)|0);
 if ($4) {
  $1 = $6;
 } else {
  $7 = (_MEM_swap32_394($6)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _FSEv06_abs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)<(0);
 $5 = $1;
 $6 = $5 << 16 >> 16;
 $7 = (0 - ($6))|0;
 $8 = $4 ? $7 : $6;
 $9 = $8&65535;
 STACKTOP = sp;return ($9|0);
}
function _MEM_isLittleEndian_392() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[3296]|0;
 $1 = $0&255;
 return ($1|0);
}
function _MEM_read32_393($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$3+3>>0]|0;
 $4 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _MEM_swap32_394($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_llvm_bswap_i32(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function _FSEv06_buildDTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $11 = sp + 80|0;
 $15 = sp + 72|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $26 = $5;
 $27 = ((($26)) + 4|0);
 $9 = $27;
 $28 = $9;
 $10 = $28;
 $29 = $7;
 $30 = (($29) + 1)|0;
 $12 = $30;
 $31 = $8;
 $32 = 1 << $31;
 $13 = $32;
 $33 = $13;
 $34 = (($33) - 1)|0;
 $14 = $34;
 $35 = $7;
 $36 = ($35>>>0)>(255);
 if ($36) {
  $4 = -18;
  $163 = $4;
  STACKTOP = sp;return ($163|0);
 }
 $37 = $8;
 $38 = ($37>>>0)>(12);
 if ($38) {
  $4 = -17;
  $163 = $4;
  STACKTOP = sp;return ($163|0);
 }
 $39 = $8;
 $40 = $39&65535;
 HEAP16[$15>>1] = $40;
 $41 = ((($15)) + 2|0);
 HEAP16[$41>>1] = 1;
 $42 = $8;
 $43 = (($42) - 1)|0;
 $44 = 1 << $43;
 $45 = $44&65535;
 $16 = $45;
 $17 = 0;
 while(1) {
  $46 = $17;
  $47 = $12;
  $48 = ($46>>>0)<($47>>>0);
  if (!($48)) {
   break;
  }
  $49 = $6;
  $50 = $17;
  $51 = (($49) + ($50<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = ($53|0)==(-1);
  if ($54) {
   $55 = $17;
   $56 = $55&255;
   $57 = $10;
   $58 = $14;
   $59 = (($58) + -1)|0;
   $14 = $59;
   $60 = (($57) + ($58<<2)|0);
   $61 = ((($60)) + 2|0);
   HEAP8[$61>>0] = $56;
   $62 = $17;
   $$sink = 1;$$sink2 = $62;
  } else {
   $63 = $6;
   $64 = $17;
   $65 = (($63) + ($64<<1)|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = $66 << 16 >> 16;
   $68 = $16;
   $69 = $68 << 16 >> 16;
   $70 = ($67|0)>=($69|0);
   if ($70) {
    $71 = ((($15)) + 2|0);
    HEAP16[$71>>1] = 0;
   }
   $72 = $6;
   $73 = $17;
   $74 = (($72) + ($73<<1)|0);
   $75 = HEAP16[$74>>1]|0;
   $76 = $17;
   $$sink = $75;$$sink2 = $76;
  }
  $77 = (($11) + ($$sink2<<1)|0);
  HEAP16[$77>>1] = $$sink;
  $78 = $17;
  $79 = (($78) + 1)|0;
  $17 = $79;
 }
 $80 = $5;
 ;HEAP16[$80>>1]=HEAP16[$15>>1]|0;HEAP16[$80+2>>1]=HEAP16[$15+2>>1]|0;
 $81 = $13;
 $82 = (($81) - 1)|0;
 $18 = $82;
 $83 = $13;
 $84 = $83 >>> 1;
 $85 = $13;
 $86 = $85 >>> 3;
 $87 = (($84) + ($86))|0;
 $88 = (($87) + 3)|0;
 $19 = $88;
 $21 = 0;
 $20 = 0;
 while(1) {
  $89 = $20;
  $90 = $12;
  $91 = ($89>>>0)<($90>>>0);
  if (!($91)) {
   break;
  }
  $22 = 0;
  while(1) {
   $92 = $22;
   $93 = $6;
   $94 = $20;
   $95 = (($93) + ($94<<1)|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96 << 16 >> 16;
   $98 = ($92|0)<($97|0);
   $99 = $20;
   if (!($98)) {
    break;
   }
   $100 = $99&255;
   $101 = $10;
   $102 = $21;
   $103 = (($101) + ($102<<2)|0);
   $104 = ((($103)) + 2|0);
   HEAP8[$104>>0] = $100;
   $105 = $21;
   $106 = $19;
   $107 = (($105) + ($106))|0;
   $108 = $18;
   $109 = $107 & $108;
   $21 = $109;
   while(1) {
    $110 = $21;
    $111 = $14;
    $112 = ($110>>>0)>($111>>>0);
    if (!($112)) {
     break;
    }
    $113 = $21;
    $114 = $19;
    $115 = (($113) + ($114))|0;
    $116 = $18;
    $117 = $115 & $116;
    $21 = $117;
   }
   $118 = $22;
   $119 = (($118) + 1)|0;
   $22 = $119;
  }
  $120 = (($99) + 1)|0;
  $20 = $120;
 }
 $121 = $21;
 $122 = ($121|0)!=(0);
 if ($122) {
  $4 = -1;
  $163 = $4;
  STACKTOP = sp;return ($163|0);
 }
 $23 = 0;
 while(1) {
  $123 = $23;
  $124 = $13;
  $125 = ($123>>>0)<($124>>>0);
  if (!($125)) {
   break;
  }
  $126 = $10;
  $127 = $23;
  $128 = (($126) + ($127<<2)|0);
  $129 = ((($128)) + 2|0);
  $130 = HEAP8[$129>>0]|0;
  $24 = $130;
  $131 = $24;
  $132 = $131&255;
  $133 = (($11) + ($132<<1)|0);
  $134 = HEAP16[$133>>1]|0;
  $135 = (($134) + 1)<<16>>16;
  HEAP16[$133>>1] = $135;
  $25 = $134;
  $136 = $8;
  $137 = $25;
  $138 = $137&65535;
  $139 = (_BITv06_highbit32($138)|0);
  $140 = (($136) - ($139))|0;
  $141 = $140&255;
  $142 = $10;
  $143 = $23;
  $144 = (($142) + ($143<<2)|0);
  $145 = ((($144)) + 3|0);
  HEAP8[$145>>0] = $141;
  $146 = $25;
  $147 = $146&65535;
  $148 = $10;
  $149 = $23;
  $150 = (($148) + ($149<<2)|0);
  $151 = ((($150)) + 3|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&255;
  $154 = $147 << $153;
  $155 = $13;
  $156 = (($154) - ($155))|0;
  $157 = $156&65535;
  $158 = $10;
  $159 = $23;
  $160 = (($158) + ($159<<2)|0);
  HEAP16[$160>>1] = $157;
  $161 = $23;
  $162 = (($161) + 1)|0;
  $23 = $162;
 }
 $4 = 0;
 $163 = $4;
 STACKTOP = sp;return ($163|0);
}
function _BITv06_highbit32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (Math_clz32(($2|0))|0);
 $4 = (31 - ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function _FSEv06_buildDTable_rle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $4 = $8;
 $9 = $4;
 $5 = $9;
 $10 = $2;
 $11 = ((($10)) + 4|0);
 $6 = $11;
 $12 = $6;
 $7 = $12;
 $13 = $5;
 HEAP16[$13>>1] = 0;
 $14 = $5;
 $15 = ((($14)) + 2|0);
 HEAP16[$15>>1] = 0;
 $16 = $7;
 HEAP16[$16>>1] = 0;
 $17 = $3;
 $18 = $7;
 $19 = ((($18)) + 2|0);
 HEAP8[$19>>0] = $17;
 $20 = $7;
 $21 = ((($20)) + 3|0);
 HEAP8[$21>>0] = 0;
 STACKTOP = sp;return 0;
}
function _FSEv06_decompress_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink1 = 0, $$sink10 = 0, $$sink11 = 0, $$sink12 = 0, $$sink13 = 0, $$sink14 = 0, $$sink15 = 0, $$sink16 = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $$sink5 = 0, $$sink6 = 0, $$sink7 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $16 = sp + 136|0;
 $17 = sp + 128|0;
 $18 = sp + 120|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $33 = sp + 40|0;
 $36 = $0;
 $37 = $1;
 $38 = $2;
 $39 = $3;
 $40 = $4;
 $44 = $40;
 $41 = $44;
 $45 = $41;
 $42 = $45;
 $46 = $42;
 $47 = ((($46)) + 2|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48&65535;
 $43 = $49;
 $50 = $43;
 $51 = ($50|0)!=(0);
 $52 = $36;
 $53 = $37;
 $54 = $38;
 $55 = $39;
 $56 = $40;
 if ($51) {
  $21 = $52;
  $22 = $53;
  $23 = $54;
  $24 = $55;
  $25 = $56;
  $26 = 1;
  $57 = $21;
  $27 = $57;
  $58 = $27;
  $28 = $58;
  $59 = $28;
  $60 = $22;
  $61 = (($59) + ($60)|0);
  $29 = $61;
  $62 = $29;
  $63 = ((($62)) + -3|0);
  $30 = $63;
  $64 = $23;
  $65 = $24;
  $66 = (_BITv06_initDStream($31,$64,$65)|0);
  $34 = $66;
  $67 = $34;
  $68 = (_ERR_isError_388($67)|0);
  $69 = ($68|0)!=(0);
  do {
   if ($69) {
    $70 = $34;
    $20 = $70;
   } else {
    $71 = $25;
    _FSEv06_initDState($32,$31,$71);
    $72 = $25;
    _FSEv06_initDState($33,$31,$72);
    while(1) {
     $73 = (_BITv06_reloadDStream($31)|0);
     $74 = ($73|0)==(0);
     if (!($74)) {
      break;
     }
     $75 = $28;
     $76 = $30;
     $77 = ($75>>>0)<($76>>>0);
     if (!($77)) {
      break;
     }
     $78 = $26;
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = (_FSEv06_decodeSymbolFast($32,$31)|0);
      $$sink = $80;
     } else {
      $81 = (_FSEv06_decodeSymbol($32,$31)|0);
      $$sink = $81;
     }
     $82 = $$sink&255;
     $83 = $82&255;
     $84 = $28;
     HEAP8[$84>>0] = $83;
     $85 = $26;
     $86 = ($85|0)!=(0);
     if ($86) {
      $87 = (_FSEv06_decodeSymbolFast($33,$31)|0);
      $$sink1 = $87;
     } else {
      $88 = (_FSEv06_decodeSymbol($33,$31)|0);
      $$sink1 = $88;
     }
     $89 = $$sink1&255;
     $90 = $89&255;
     $91 = $28;
     $92 = ((($91)) + 1|0);
     HEAP8[$92>>0] = $90;
     $93 = (_BITv06_reloadDStream($31)|0);
     $94 = ($93>>>0)>(0);
     if ($94) {
      label = 14;
      break;
     }
     $97 = $26;
     $98 = ($97|0)!=(0);
     if ($98) {
      $99 = (_FSEv06_decodeSymbolFast($32,$31)|0);
      $$sink2 = $99;
     } else {
      $100 = (_FSEv06_decodeSymbol($32,$31)|0);
      $$sink2 = $100;
     }
     $101 = $$sink2&255;
     $102 = $101&255;
     $103 = $28;
     $104 = ((($103)) + 2|0);
     HEAP8[$104>>0] = $102;
     $105 = $26;
     $106 = ($105|0)!=(0);
     if ($106) {
      $107 = (_FSEv06_decodeSymbolFast($33,$31)|0);
      $$sink3 = $107;
     } else {
      $108 = (_FSEv06_decodeSymbol($33,$31)|0);
      $$sink3 = $108;
     }
     $109 = $$sink3&255;
     $110 = $109&255;
     $111 = $28;
     $112 = ((($111)) + 3|0);
     HEAP8[$112>>0] = $110;
     $113 = $28;
     $114 = ((($113)) + 4|0);
     $28 = $114;
    }
    if ((label|0) == 14) {
     $95 = $28;
     $96 = ((($95)) + 2|0);
     $28 = $96;
    }
    while(1) {
     $115 = $28;
     $116 = $29;
     $117 = ((($116)) + -2|0);
     $118 = ($115>>>0)>($117>>>0);
     if ($118) {
      label = 23;
      break;
     }
     $119 = $26;
     $120 = ($119|0)!=(0);
     if ($120) {
      $121 = (_FSEv06_decodeSymbolFast($32,$31)|0);
      $$sink4 = $121;
     } else {
      $122 = (_FSEv06_decodeSymbol($32,$31)|0);
      $$sink4 = $122;
     }
     $123 = $$sink4&255;
     $124 = $123&255;
     $125 = $28;
     $126 = ((($125)) + 1|0);
     $28 = $126;
     HEAP8[$125>>0] = $124;
     $127 = (_BITv06_reloadDStream($31)|0);
     $128 = ($127|0)==(3);
     if ($128) {
      label = 28;
      break;
     }
     $137 = $28;
     $138 = $29;
     $139 = ((($138)) + -2|0);
     $140 = ($137>>>0)>($139>>>0);
     if ($140) {
      label = 33;
      break;
     }
     $141 = $26;
     $142 = ($141|0)!=(0);
     if ($142) {
      $143 = (_FSEv06_decodeSymbolFast($33,$31)|0);
      $$sink6 = $143;
     } else {
      $144 = (_FSEv06_decodeSymbol($33,$31)|0);
      $$sink6 = $144;
     }
     $145 = $$sink6&255;
     $146 = $145&255;
     $147 = $28;
     $148 = ((($147)) + 1|0);
     $28 = $148;
     HEAP8[$147>>0] = $146;
     $149 = (_BITv06_reloadDStream($31)|0);
     $150 = ($149|0)==(3);
     if ($150) {
      label = 38;
      break;
     }
    }
    if ((label|0) == 23) {
     $20 = -13;
     break;
    }
    else if ((label|0) == 28) {
     $129 = $26;
     $130 = ($129|0)!=(0);
     if ($130) {
      $131 = (_FSEv06_decodeSymbolFast($33,$31)|0);
      $$sink5 = $131;
     } else {
      $132 = (_FSEv06_decodeSymbol($33,$31)|0);
      $$sink5 = $132;
     }
     $133 = $$sink5&255;
     $134 = $133&255;
     $135 = $28;
     $136 = ((($135)) + 1|0);
     $28 = $136;
     HEAP8[$135>>0] = $134;
    }
    else if ((label|0) == 33) {
     $20 = -13;
     break;
    }
    else if ((label|0) == 38) {
     $151 = $26;
     $152 = ($151|0)!=(0);
     if ($152) {
      $153 = (_FSEv06_decodeSymbolFast($32,$31)|0);
      $$sink7 = $153;
     } else {
      $154 = (_FSEv06_decodeSymbol($32,$31)|0);
      $$sink7 = $154;
     }
     $155 = $$sink7&255;
     $156 = $155&255;
     $157 = $28;
     $158 = ((($157)) + 1|0);
     $28 = $158;
     HEAP8[$157>>0] = $156;
    }
    $159 = $28;
    $160 = $27;
    $161 = $159;
    $162 = $160;
    $163 = (($161) - ($162))|0;
    $20 = $163;
   }
  } while(0);
  $164 = $20;
  $35 = $164;
  $273 = $35;
  STACKTOP = sp;return ($273|0);
 } else {
  $6 = $52;
  $7 = $53;
  $8 = $54;
  $9 = $55;
  $10 = $56;
  $11 = 0;
  $165 = $6;
  $12 = $165;
  $166 = $12;
  $13 = $166;
  $167 = $13;
  $168 = $7;
  $169 = (($167) + ($168)|0);
  $14 = $169;
  $170 = $14;
  $171 = ((($170)) + -3|0);
  $15 = $171;
  $172 = $8;
  $173 = $9;
  $174 = (_BITv06_initDStream($16,$172,$173)|0);
  $19 = $174;
  $175 = $19;
  $176 = (_ERR_isError_388($175)|0);
  $177 = ($176|0)!=(0);
  do {
   if ($177) {
    $178 = $19;
    $5 = $178;
   } else {
    $179 = $10;
    _FSEv06_initDState($17,$16,$179);
    $180 = $10;
    _FSEv06_initDState($18,$16,$180);
    while(1) {
     $181 = (_BITv06_reloadDStream($16)|0);
     $182 = ($181|0)==(0);
     if (!($182)) {
      break;
     }
     $183 = $13;
     $184 = $15;
     $185 = ($183>>>0)<($184>>>0);
     if (!($185)) {
      break;
     }
     $186 = $11;
     $187 = ($186|0)!=(0);
     if ($187) {
      $188 = (_FSEv06_decodeSymbolFast($17,$16)|0);
      $$sink9 = $188;
     } else {
      $189 = (_FSEv06_decodeSymbol($17,$16)|0);
      $$sink9 = $189;
     }
     $190 = $$sink9&255;
     $191 = $190&255;
     $192 = $13;
     HEAP8[$192>>0] = $191;
     $193 = $11;
     $194 = ($193|0)!=(0);
     if ($194) {
      $195 = (_FSEv06_decodeSymbolFast($18,$16)|0);
      $$sink10 = $195;
     } else {
      $196 = (_FSEv06_decodeSymbol($18,$16)|0);
      $$sink10 = $196;
     }
     $197 = $$sink10&255;
     $198 = $197&255;
     $199 = $13;
     $200 = ((($199)) + 1|0);
     HEAP8[$200>>0] = $198;
     $201 = (_BITv06_reloadDStream($16)|0);
     $202 = ($201>>>0)>(0);
     if ($202) {
      label = 56;
      break;
     }
     $205 = $11;
     $206 = ($205|0)!=(0);
     if ($206) {
      $207 = (_FSEv06_decodeSymbolFast($17,$16)|0);
      $$sink11 = $207;
     } else {
      $208 = (_FSEv06_decodeSymbol($17,$16)|0);
      $$sink11 = $208;
     }
     $209 = $$sink11&255;
     $210 = $209&255;
     $211 = $13;
     $212 = ((($211)) + 2|0);
     HEAP8[$212>>0] = $210;
     $213 = $11;
     $214 = ($213|0)!=(0);
     if ($214) {
      $215 = (_FSEv06_decodeSymbolFast($18,$16)|0);
      $$sink12 = $215;
     } else {
      $216 = (_FSEv06_decodeSymbol($18,$16)|0);
      $$sink12 = $216;
     }
     $217 = $$sink12&255;
     $218 = $217&255;
     $219 = $13;
     $220 = ((($219)) + 3|0);
     HEAP8[$220>>0] = $218;
     $221 = $13;
     $222 = ((($221)) + 4|0);
     $13 = $222;
    }
    if ((label|0) == 56) {
     $203 = $13;
     $204 = ((($203)) + 2|0);
     $13 = $204;
    }
    while(1) {
     $223 = $13;
     $224 = $14;
     $225 = ((($224)) + -2|0);
     $226 = ($223>>>0)>($225>>>0);
     if ($226) {
      label = 65;
      break;
     }
     $227 = $11;
     $228 = ($227|0)!=(0);
     if ($228) {
      $229 = (_FSEv06_decodeSymbolFast($17,$16)|0);
      $$sink13 = $229;
     } else {
      $230 = (_FSEv06_decodeSymbol($17,$16)|0);
      $$sink13 = $230;
     }
     $231 = $$sink13&255;
     $232 = $231&255;
     $233 = $13;
     $234 = ((($233)) + 1|0);
     $13 = $234;
     HEAP8[$233>>0] = $232;
     $235 = (_BITv06_reloadDStream($16)|0);
     $236 = ($235|0)==(3);
     if ($236) {
      label = 70;
      break;
     }
     $245 = $13;
     $246 = $14;
     $247 = ((($246)) + -2|0);
     $248 = ($245>>>0)>($247>>>0);
     if ($248) {
      label = 75;
      break;
     }
     $249 = $11;
     $250 = ($249|0)!=(0);
     if ($250) {
      $251 = (_FSEv06_decodeSymbolFast($18,$16)|0);
      $$sink15 = $251;
     } else {
      $252 = (_FSEv06_decodeSymbol($18,$16)|0);
      $$sink15 = $252;
     }
     $253 = $$sink15&255;
     $254 = $253&255;
     $255 = $13;
     $256 = ((($255)) + 1|0);
     $13 = $256;
     HEAP8[$255>>0] = $254;
     $257 = (_BITv06_reloadDStream($16)|0);
     $258 = ($257|0)==(3);
     if ($258) {
      label = 80;
      break;
     }
    }
    if ((label|0) == 65) {
     $5 = -13;
     break;
    }
    else if ((label|0) == 70) {
     $237 = $11;
     $238 = ($237|0)!=(0);
     if ($238) {
      $239 = (_FSEv06_decodeSymbolFast($18,$16)|0);
      $$sink14 = $239;
     } else {
      $240 = (_FSEv06_decodeSymbol($18,$16)|0);
      $$sink14 = $240;
     }
     $241 = $$sink14&255;
     $242 = $241&255;
     $243 = $13;
     $244 = ((($243)) + 1|0);
     $13 = $244;
     HEAP8[$243>>0] = $242;
    }
    else if ((label|0) == 75) {
     $5 = -13;
     break;
    }
    else if ((label|0) == 80) {
     $259 = $11;
     $260 = ($259|0)!=(0);
     if ($260) {
      $261 = (_FSEv06_decodeSymbolFast($17,$16)|0);
      $$sink16 = $261;
     } else {
      $262 = (_FSEv06_decodeSymbol($17,$16)|0);
      $$sink16 = $262;
     }
     $263 = $$sink16&255;
     $264 = $263&255;
     $265 = $13;
     $266 = ((($265)) + 1|0);
     $13 = $266;
     HEAP8[$265>>0] = $264;
    }
    $267 = $13;
    $268 = $12;
    $269 = $267;
    $270 = $268;
    $271 = (($269) - ($270))|0;
    $5 = $271;
   }
  } while(0);
  $272 = $5;
  $35 = $272;
  $273 = $35;
  STACKTOP = sp;return ($273|0);
 }
 return (0)|0;
}
function _BITv06_initDStream($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9>>>0)<(1);
 if ($10) {
  $11 = $4;
  ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;
  $3 = -14;
  $124 = $3;
  STACKTOP = sp;return ($124|0);
 }
 $12 = $6;
 $13 = ($12>>>0)>=(4);
 $14 = $5;
 $15 = $4;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = $14;
 do {
  if ($13) {
   $17 = $5;
   $18 = $6;
   $19 = (($17) + ($18)|0);
   $20 = ((($19)) + -4|0);
   $21 = $4;
   $22 = ((($21)) + 8|0);
   HEAP32[$22>>2] = $20;
   $23 = $4;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_MEM_readLEST_396($25)|0);
   $27 = $4;
   HEAP32[$27>>2] = $26;
   $28 = $5;
   $29 = $6;
   $30 = (($29) - 1)|0;
   $31 = (($28) + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $7 = $32;
   $33 = $7;
   $34 = $33&255;
   $35 = ($34|0)==(0);
   if (!($35)) {
    $36 = $7;
    $37 = $36&255;
    $38 = (_BITv06_highbit32($37)|0);
    $39 = (8 - ($38))|0;
    $40 = $4;
    $41 = ((($40)) + 4|0);
    HEAP32[$41>>2] = $39;
    break;
   }
   $3 = -1;
   $124 = $3;
   STACKTOP = sp;return ($124|0);
  } else {
   $42 = $4;
   $43 = ((($42)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = $4;
   $46 = ((($45)) + 8|0);
   HEAP32[$46>>2] = $44;
   $47 = $4;
   $48 = ((($47)) + 12|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $4;
   HEAP32[$52>>2] = $51;
   $53 = $6;
   switch ($53|0) {
   case 7:  {
    $54 = $5;
    $55 = ((($54)) + 6|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = $57 << 16;
    $59 = $4;
    $60 = HEAP32[$59>>2]|0;
    $61 = (($60) + ($58))|0;
    HEAP32[$59>>2] = $61;
    label = 9;
    break;
   }
   case 6:  {
    label = 9;
    break;
   }
   case 5:  {
    label = 10;
    break;
   }
   case 4:  {
    label = 11;
    break;
   }
   case 3:  {
    label = 12;
    break;
   }
   case 2:  {
    label = 13;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 9) {
    $62 = $5;
    $63 = ((($62)) + 5|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = $65 << 8;
    $67 = $4;
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + ($66))|0;
    HEAP32[$67>>2] = $69;
    label = 10;
   }
   if ((label|0) == 10) {
    $70 = $5;
    $71 = ((($70)) + 4|0);
    $72 = HEAP8[$71>>0]|0;
    $73 = $72&255;
    $74 = $73 << 0;
    $75 = $4;
    $76 = HEAP32[$75>>2]|0;
    $77 = (($76) + ($74))|0;
    HEAP32[$75>>2] = $77;
    label = 11;
   }
   if ((label|0) == 11) {
    $78 = $5;
    $79 = ((($78)) + 3|0);
    $80 = HEAP8[$79>>0]|0;
    $81 = $80&255;
    $82 = $81 << 24;
    $83 = $4;
    $84 = HEAP32[$83>>2]|0;
    $85 = (($84) + ($82))|0;
    HEAP32[$83>>2] = $85;
    label = 12;
   }
   if ((label|0) == 12) {
    $86 = $5;
    $87 = ((($86)) + 2|0);
    $88 = HEAP8[$87>>0]|0;
    $89 = $88&255;
    $90 = $89 << 16;
    $91 = $4;
    $92 = HEAP32[$91>>2]|0;
    $93 = (($92) + ($90))|0;
    HEAP32[$91>>2] = $93;
    label = 13;
   }
   if ((label|0) == 13) {
    $94 = $5;
    $95 = ((($94)) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 << 8;
    $99 = $4;
    $100 = HEAP32[$99>>2]|0;
    $101 = (($100) + ($98))|0;
    HEAP32[$99>>2] = $101;
   }
   $102 = $5;
   $103 = $6;
   $104 = (($103) - 1)|0;
   $105 = (($102) + ($104)|0);
   $106 = HEAP8[$105>>0]|0;
   $8 = $106;
   $107 = $8;
   $108 = $107&255;
   $109 = ($108|0)==(0);
   if (!($109)) {
    $110 = $8;
    $111 = $110&255;
    $112 = (_BITv06_highbit32($111)|0);
    $113 = (8 - ($112))|0;
    $114 = $4;
    $115 = ((($114)) + 4|0);
    HEAP32[$115>>2] = $113;
    $116 = $6;
    $117 = (4 - ($116))|0;
    $118 = $117<<3;
    $119 = $4;
    $120 = ((($119)) + 4|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = (($121) + ($118))|0;
    HEAP32[$120>>2] = $122;
    break;
   }
   $3 = -1;
   $124 = $3;
   STACKTOP = sp;return ($124|0);
  }
 } while(0);
 $123 = $6;
 $3 = $123;
 $124 = $3;
 STACKTOP = sp;return ($124|0);
}
function _FSEv06_initDState($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $6 = $8;
 $9 = $6;
 $7 = $9;
 $10 = $4;
 $11 = $7;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (_BITv06_readBits($10,$13)|0);
 $15 = $3;
 HEAP32[$15>>2] = $14;
 $16 = $4;
 (_BITv06_reloadDStream($16)|0);
 $17 = $5;
 $18 = ((($17)) + 4|0);
 $19 = $3;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _BITv06_reloadDStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(32);
 if ($8) {
  $1 = 3;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ($11>>>0)>=($15>>>0);
 $17 = $2;
 if ($16) {
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 >>> 3;
  $21 = $2;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (0 - ($20))|0;
  $25 = (($23) + ($24)|0);
  HEAP32[$22>>2] = $25;
  $26 = $2;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 7;
  HEAP32[$27>>2] = $29;
  $30 = $2;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_MEM_readLEST_396($32)|0);
  $34 = $2;
  HEAP32[$34>>2] = $33;
  $1 = 0;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $35 = ((($17)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $2;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($36|0)==($39|0);
 $41 = $2;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 if (!($40)) {
  $45 = $43 >>> 3;
  $3 = $45;
  $4 = 0;
  $46 = $2;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $3;
  $50 = (0 - ($49))|0;
  $51 = (($48) + ($50)|0);
  $52 = $2;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($51>>>0)<($54>>>0);
  if ($55) {
   $56 = $2;
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $2;
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $58;
   $63 = $61;
   $64 = (($62) - ($63))|0;
   $3 = $64;
   $4 = 1;
  }
  $65 = $3;
  $66 = $2;
  $67 = ((($66)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (0 - ($65))|0;
  $70 = (($68) + ($69)|0);
  HEAP32[$67>>2] = $70;
  $71 = $3;
  $72 = $71<<3;
  $73 = $2;
  $74 = ((($73)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) - ($72))|0;
  HEAP32[$74>>2] = $76;
  $77 = $2;
  $78 = ((($77)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_MEM_readLEST_396($79)|0);
  $81 = $2;
  HEAP32[$81>>2] = $80;
  $82 = $4;
  $1 = $82;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $44 = ($43>>>0)<(32);
 if ($44) {
  $1 = 1;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 } else {
  $1 = 2;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 return (0)|0;
}
function _FSEv06_decodeSymbolFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$13>>1]|0;HEAP16[$4+2>>1]=HEAP16[$13+2>>1]|0;
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $5 = $16;
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $3;
 $20 = $5;
 $21 = (_BITv06_readBitsFast($19,$20)|0);
 $7 = $21;
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = $7;
 $25 = (($23) + ($24))|0;
 $26 = $2;
 HEAP32[$26>>2] = $25;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _FSEv06_decodeSymbol($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$13>>1]|0;HEAP16[$4+2>>1]=HEAP16[$13+2>>1]|0;
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $5 = $16;
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $3;
 $20 = $5;
 $21 = (_BITv06_readBits($19,$20)|0);
 $7 = $21;
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = $7;
 $25 = (($23) + ($24))|0;
 $26 = $2;
 HEAP32[$26>>2] = $25;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _BITv06_readBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BITv06_lookBits($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BITv06_skipBits($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _BITv06_lookBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $11 >>> 1;
 $13 = $3;
 $14 = (31 - ($13))|0;
 $15 = $14 & 31;
 $16 = $12 >>> $15;
 STACKTOP = sp;return ($16|0);
}
function _BITv06_skipBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _BITv06_readBitsFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BITv06_lookBitsFast($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BITv06_skipBits($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _BITv06_lookBitsFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $3;
 $13 = (32 - ($12))|0;
 $14 = $13 & 31;
 $15 = $11 >>> $14;
 STACKTOP = sp;return ($15|0);
}
function _MEM_readLEST_396($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_32bits_397()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 if ($4) {
  $6 = (_MEM_readLE32_391($5)|0);
  $1 = $6;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = (_MEM_readLE64_398($5)|0);
  $8 = tempRet0;
  $1 = $7;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _MEM_32bits_397() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _MEM_readLE64_398($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = $0;
 $3 = (_MEM_isLittleEndian_392()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read64_399($5)|0);
 $7 = tempRet0;
 if ($4) {
  $8 = $1;
  $9 = $8;
  HEAP32[$9>>2] = $6;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $7;
 } else {
  $12 = (_MEM_swap64_400($6,$7)|0);
  $13 = tempRet0;
  $14 = $1;
  $15 = $14;
  HEAP32[$15>>2] = $12;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
 }
 $18 = $1;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 tempRet0 = ($23);
 STACKTOP = sp;return ($20|0);
}
function _MEM_read64_399($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$2+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$2+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$2+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$2+7>>0]=HEAP8[$3+7>>0]|0;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 tempRet0 = ($9);
 STACKTOP = sp;return ($6|0);
}
function _MEM_swap64_400($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_llvm_bswap_i64(($9|0),($12|0))|0);
 $14 = tempRet0;
 tempRet0 = ($14);
 STACKTOP = sp;return ($13|0);
}
function _FSEv06_decompress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16944|0);
 $11 = sp + 16432|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $17 = $7;
 $9 = $17;
 $18 = $9;
 $10 = $18;
 HEAP32[$14>>2] = 255;
 $19 = $8;
 $20 = ($19>>>0)<(2);
 if ($20) {
  $4 = -14;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 $21 = $9;
 $22 = $8;
 $23 = (_FSEv06_readNCount($11,$14,$13,$21,$22)|0);
 $15 = $23;
 $24 = $15;
 $25 = (_ERR_isError_388($24)|0);
 $26 = ($25|0)!=(0);
 $27 = $15;
 if ($26) {
  $4 = $27;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 $28 = $8;
 $29 = ($27>>>0)>=($28>>>0);
 if ($29) {
  $4 = -14;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 $30 = $15;
 $31 = $10;
 $32 = (($31) + ($30)|0);
 $10 = $32;
 $33 = $15;
 $34 = $8;
 $35 = (($34) - ($33))|0;
 $8 = $35;
 $36 = HEAP32[$14>>2]|0;
 $37 = HEAP32[$13>>2]|0;
 $38 = (_FSEv06_buildDTable($12,$11,$36,$37)|0);
 $16 = $38;
 $39 = $16;
 $40 = (_ERR_isError_388($39)|0);
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $16;
  $4 = $42;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 } else {
  $43 = $5;
  $44 = $6;
  $45 = $10;
  $46 = $8;
  $47 = (_FSEv06_decompress_usingDTable($43,$44,$45,$46,$12)|0);
  $4 = $47;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _HUFv06_readDTableX2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $7 = sp + 136|0;
 $8 = sp + 44|0;
 $9 = sp + 40|0;
 $11 = sp + 32|0;
 $20 = sp + 128|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$9>>2] = 0;
 HEAP32[$11>>2] = 0;
 $21 = $4;
 $22 = ((($21)) + 2|0);
 $14 = $22;
 $23 = $14;
 $15 = $23;
 $24 = $5;
 $25 = $6;
 $26 = (_HUFv06_readStats($7,256,$8,$11,$9,$24,$25)|0);
 $10 = $26;
 $27 = $10;
 $28 = (_HUFv06_isError($27)|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = $10;
  $3 = $30;
  $98 = $3;
  STACKTOP = sp;return ($98|0);
 }
 $31 = HEAP32[$9>>2]|0;
 $32 = $4;
 $33 = HEAP16[$32>>1]|0;
 $34 = $33&65535;
 $35 = ($31>>>0)>($34>>>0);
 if ($35) {
  $3 = -17;
  $98 = $3;
  STACKTOP = sp;return ($98|0);
 }
 $36 = HEAP32[$9>>2]|0;
 $37 = $36&65535;
 $38 = $4;
 HEAP16[$38>>1] = $37;
 $13 = 0;
 $12 = 1;
 while(1) {
  $39 = $12;
  $40 = HEAP32[$9>>2]|0;
  $41 = (($40) + 1)|0;
  $42 = ($39>>>0)<($41>>>0);
  if (!($42)) {
   break;
  }
  $43 = $13;
  $16 = $43;
  $44 = $12;
  $45 = (($8) + ($44<<2)|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $12;
  $48 = (($47) - 1)|0;
  $49 = $46 << $48;
  $50 = $13;
  $51 = (($50) + ($49))|0;
  $13 = $51;
  $52 = $16;
  $53 = $12;
  $54 = (($8) + ($53<<2)|0);
  HEAP32[$54>>2] = $52;
  $55 = $12;
  $56 = (($55) + 1)|0;
  $12 = $56;
 }
 $12 = 0;
 while(1) {
  $57 = $12;
  $58 = HEAP32[$11>>2]|0;
  $59 = ($57>>>0)<($58>>>0);
  if (!($59)) {
   break;
  }
  $60 = $12;
  $61 = (($7) + ($60)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62&255;
  $17 = $63;
  $64 = $17;
  $65 = 1 << $64;
  $66 = $65 >> 1;
  $18 = $66;
  $67 = $12;
  $68 = $67&255;
  HEAP8[$20>>0] = $68;
  $69 = HEAP32[$9>>2]|0;
  $70 = (($69) + 1)|0;
  $71 = $17;
  $72 = (($70) - ($71))|0;
  $73 = $72&255;
  $74 = ((($20)) + 1|0);
  HEAP8[$74>>0] = $73;
  $75 = $17;
  $76 = (($8) + ($75<<2)|0);
  $77 = HEAP32[$76>>2]|0;
  $19 = $77;
  while(1) {
   $78 = $19;
   $79 = $17;
   $80 = (($8) + ($79<<2)|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $18;
   $83 = (($81) + ($82))|0;
   $84 = ($78>>>0)<($83>>>0);
   if (!($84)) {
    break;
   }
   $85 = $15;
   $86 = $19;
   $87 = (($85) + ($86<<1)|0);
   ;HEAP8[$87>>0]=HEAP8[$20>>0]|0;HEAP8[$87+1>>0]=HEAP8[$20+1>>0]|0;
   $88 = $19;
   $89 = (($88) + 1)|0;
   $19 = $89;
  }
  $90 = $18;
  $91 = $17;
  $92 = (($8) + ($91<<2)|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = (($93) + ($90))|0;
  HEAP32[$92>>2] = $94;
  $95 = $12;
  $96 = (($95) + 1)|0;
  $12 = $96;
 }
 $97 = $10;
 $3 = $97;
 $98 = $3;
 STACKTOP = sp;return ($98|0);
}
function _HUFv06_readStats($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $26 = $13;
 $16 = $26;
 $27 = $14;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $7 = -14;
  $174 = $7;
  STACKTOP = sp;return ($174|0);
 }
 $29 = $16;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $17 = $31;
 $32 = $17;
 $33 = ($32>>>0)>=(128);
 $34 = $17;
 L5: do {
  if ($33) {
   $35 = ($34>>>0)>=(242);
   $36 = $17;
   if ($35) {
    $37 = (($36) - 242)|0;
    $38 = (3300 + ($37<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $18 = $39;
    $40 = $8;
    $41 = $9;
    _memset(($40|0),1,($41|0))|0;
    $17 = 0;
    break;
   }
   $42 = (($36) - 127)|0;
   $18 = $42;
   $43 = $18;
   $44 = (($43) + 1)|0;
   $45 = (($44>>>0) / 2)&-1;
   $17 = $45;
   $46 = $17;
   $47 = (($46) + 1)|0;
   $48 = $14;
   $49 = ($47>>>0)>($48>>>0);
   if ($49) {
    $7 = -14;
    $174 = $7;
    STACKTOP = sp;return ($174|0);
   }
   $50 = $18;
   $51 = $9;
   $52 = ($50>>>0)>=($51>>>0);
   if ($52) {
    $7 = -15;
    $174 = $7;
    STACKTOP = sp;return ($174|0);
   }
   $53 = $16;
   $54 = ((($53)) + 1|0);
   $16 = $54;
   $19 = 0;
   while(1) {
    $55 = $19;
    $56 = $18;
    $57 = ($55>>>0)<($56>>>0);
    if (!($57)) {
     break L5;
    }
    $58 = $16;
    $59 = $19;
    $60 = (($59>>>0) / 2)&-1;
    $61 = (($58) + ($60)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = $63 >> 4;
    $65 = $64&255;
    $66 = $8;
    $67 = $19;
    $68 = (($66) + ($67)|0);
    HEAP8[$68>>0] = $65;
    $69 = $16;
    $70 = $19;
    $71 = (($70>>>0) / 2)&-1;
    $72 = (($69) + ($71)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = $74 & 15;
    $76 = $75&255;
    $77 = $8;
    $78 = $19;
    $79 = (($78) + 1)|0;
    $80 = (($77) + ($79)|0);
    HEAP8[$80>>0] = $76;
    $81 = $19;
    $82 = (($81) + 2)|0;
    $19 = $82;
   }
  } else {
   $83 = (($34) + 1)|0;
   $84 = $14;
   $85 = ($83>>>0)>($84>>>0);
   if ($85) {
    $7 = -14;
    $174 = $7;
    STACKTOP = sp;return ($174|0);
   }
   $86 = $8;
   $87 = $9;
   $88 = (($87) - 1)|0;
   $89 = $16;
   $90 = ((($89)) + 1|0);
   $91 = $17;
   $92 = (_FSEv06_decompress($86,$88,$90,$91)|0);
   $18 = $92;
   $93 = $18;
   $94 = (_ERR_isError_388($93)|0);
   $95 = ($94|0)!=(0);
   if ($95) {
    $96 = $18;
    $7 = $96;
    $174 = $7;
    STACKTOP = sp;return ($174|0);
   }
  }
 } while(0);
 $97 = $10;
 dest=$97; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = 0;
 $20 = 0;
 while(1) {
  $98 = $20;
  $99 = $18;
  $100 = ($98>>>0)<($99>>>0);
  if (!($100)) {
   break;
  }
  $101 = $8;
  $102 = $20;
  $103 = (($101) + ($102)|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = ($105|0)>=(16);
  if ($106) {
   label = 20;
   break;
  }
  $107 = $10;
  $108 = $8;
  $109 = $20;
  $110 = (($108) + ($109)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = (($107) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + 1)|0;
  HEAP32[$113>>2] = $115;
  $116 = $8;
  $117 = $20;
  $118 = (($116) + ($117)|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = 1 << $120;
  $122 = $121 >> 1;
  $123 = $15;
  $124 = (($123) + ($122))|0;
  $15 = $124;
  $125 = $20;
  $126 = (($125) + 1)|0;
  $20 = $126;
 }
 if ((label|0) == 20) {
  $7 = -15;
  $174 = $7;
  STACKTOP = sp;return ($174|0);
 }
 $127 = $15;
 $128 = ($127|0)==(0);
 if ($128) {
  $7 = -15;
  $174 = $7;
  STACKTOP = sp;return ($174|0);
 }
 $129 = $15;
 $130 = (_BITv06_highbit32($129)|0);
 $131 = (($130) + 1)|0;
 $21 = $131;
 $132 = $21;
 $133 = ($132>>>0)>(16);
 if ($133) {
  $7 = -15;
  $174 = $7;
  STACKTOP = sp;return ($174|0);
 }
 $134 = $21;
 $135 = $12;
 HEAP32[$135>>2] = $134;
 $136 = $21;
 $137 = 1 << $136;
 $22 = $137;
 $138 = $22;
 $139 = $15;
 $140 = (($138) - ($139))|0;
 $23 = $140;
 $141 = $23;
 $142 = (_BITv06_highbit32($141)|0);
 $143 = 1 << $142;
 $24 = $143;
 $144 = $23;
 $145 = (_BITv06_highbit32($144)|0);
 $146 = (($145) + 1)|0;
 $25 = $146;
 $147 = $24;
 $148 = $23;
 $149 = ($147|0)!=($148|0);
 if ($149) {
  $7 = -15;
  $174 = $7;
  STACKTOP = sp;return ($174|0);
 }
 $150 = $25;
 $151 = $150&255;
 $152 = $8;
 $153 = $18;
 $154 = (($152) + ($153)|0);
 HEAP8[$154>>0] = $151;
 $155 = $10;
 $156 = $25;
 $157 = (($155) + ($156<<2)|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) + 1)|0;
 HEAP32[$157>>2] = $159;
 $160 = $10;
 $161 = ((($160)) + 4|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162>>>0)<(2);
 if (!($163)) {
  $164 = $10;
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 & 1;
  $168 = ($167|0)!=(0);
  if (!($168)) {
   $169 = $18;
   $170 = (($169) + 1)|0;
   $171 = $11;
   HEAP32[$171>>2] = $170;
   $172 = $17;
   $173 = (($172) + 1)|0;
   $7 = $173;
   $174 = $7;
   STACKTOP = sp;return ($174|0);
  }
 }
 $7 = -15;
 $174 = $7;
 STACKTOP = sp;return ($174|0);
}
function _HUFv06_decompress1X2_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $16 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $18 = $6;
 $11 = $18;
 $19 = $11;
 $20 = $7;
 $21 = (($19) + ($20)|0);
 $12 = $21;
 $22 = $10;
 $23 = HEAP16[$22>>1]|0;
 $24 = $23&65535;
 $13 = $24;
 $25 = $10;
 $14 = $25;
 $26 = $14;
 $27 = ((($26)) + 2|0);
 $15 = $27;
 $28 = $8;
 $29 = $9;
 $30 = (_BITv06_initDStream($16,$28,$29)|0);
 $17 = $30;
 $31 = $17;
 $32 = (_HUFv06_isError($31)|0);
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = $17;
  $5 = $34;
  $42 = $5;
  STACKTOP = sp;return ($42|0);
 }
 $35 = $11;
 $36 = $12;
 $37 = $15;
 $38 = $13;
 (_HUFv06_decodeStreamX2($35,$16,$36,$37,$38)|0);
 $39 = (_BITv06_endOfDStream($16)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $7;
  $5 = $41;
  $42 = $5;
  STACKTOP = sp;return ($42|0);
 } else {
  $5 = -15;
  $42 = $5;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _HUFv06_decodeStreamX2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $10 = $11;
 while(1) {
  $12 = $6;
  $13 = (_BITv06_reloadDStream($12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $7;
  $17 = ((($16)) + -4|0);
  $18 = ($15>>>0)<=($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = (_MEM_64bits_401()|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $6;
   $22 = $8;
   $23 = $9;
   $24 = (_HUFv06_decodeSymbolX2($21,$22,$23)|0);
   $25 = $5;
   $26 = ((($25)) + 1|0);
   $5 = $26;
   HEAP8[$25>>0] = $24;
  }
  (_MEM_64bits_401()|0);
  $27 = $6;
  $28 = $8;
  $29 = $9;
  $30 = (_HUFv06_decodeSymbolX2($27,$28,$29)|0);
  $31 = $5;
  $32 = ((($31)) + 1|0);
  $5 = $32;
  HEAP8[$31>>0] = $30;
  $33 = (_MEM_64bits_401()|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $6;
   $36 = $8;
   $37 = $9;
   $38 = (_HUFv06_decodeSymbolX2($35,$36,$37)|0);
   $39 = $5;
   $40 = ((($39)) + 1|0);
   $5 = $40;
   HEAP8[$39>>0] = $38;
  }
  $41 = $6;
  $42 = $8;
  $43 = $9;
  $44 = (_HUFv06_decodeSymbolX2($41,$42,$43)|0);
  $45 = $5;
  $46 = ((($45)) + 1|0);
  $5 = $46;
  HEAP8[$45>>0] = $44;
 }
 while(1) {
  $47 = $6;
  $48 = (_BITv06_reloadDStream($47)|0);
  $49 = ($48|0)==(0);
  if (!($49)) {
   break;
  }
  $50 = $5;
  $51 = $7;
  $52 = ($50>>>0)<($51>>>0);
  if (!($52)) {
   break;
  }
  $53 = $6;
  $54 = $8;
  $55 = $9;
  $56 = (_HUFv06_decodeSymbolX2($53,$54,$55)|0);
  $57 = $5;
  $58 = ((($57)) + 1|0);
  $5 = $58;
  HEAP8[$57>>0] = $56;
 }
 while(1) {
  $59 = $5;
  $60 = $7;
  $61 = ($59>>>0)<($60>>>0);
  if (!($61)) {
   break;
  }
  $62 = $6;
  $63 = $8;
  $64 = $9;
  $65 = (_HUFv06_decodeSymbolX2($62,$63,$64)|0);
  $66 = $5;
  $67 = ((($66)) + 1|0);
  $5 = $67;
  HEAP8[$66>>0] = $65;
 }
 $68 = $7;
 $69 = $10;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 STACKTOP = sp;return ($72|0);
}
function _BITv06_endOfDStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  $14 = 0;
  $13 = $14&1;
  STACKTOP = sp;return ($13|0);
 }
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(32);
 $14 = $12;
 $13 = $14&1;
 STACKTOP = sp;return ($13|0);
}
function _MEM_64bits_401() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _HUFv06_decodeSymbolX2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $5;
 $10 = (_BITv06_lookBitsFast($8,$9)|0);
 $6 = $10;
 $11 = $4;
 $12 = $6;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP8[$13>>0]|0;
 $7 = $14;
 $15 = $3;
 $16 = $4;
 $17 = $6;
 $18 = (($16) + ($17<<1)|0);
 $19 = ((($18)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 _BITv06_skipBits($15,$21);
 $22 = $7;
 STACKTOP = sp;return ($22|0);
}
function _HUFv06_decompress1X2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $9 = sp + 28|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 _memset(($9|0),0,8194)|0;
 HEAP16[$9>>1] = 12;
 $12 = $7;
 $10 = $12;
 $13 = $7;
 $14 = $8;
 $15 = (_HUFv06_readDTableX2($9,$13,$14)|0);
 $11 = $15;
 $16 = $11;
 $17 = (_HUFv06_isError($16)|0);
 $18 = ($17|0)!=(0);
 $19 = $11;
 if ($18) {
  $4 = $19;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $20 = $8;
 $21 = ($19>>>0)>=($20>>>0);
 if ($21) {
  $4 = -14;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 } else {
  $22 = $11;
  $23 = $10;
  $24 = (($23) + ($22)|0);
  $10 = $24;
  $25 = $11;
  $26 = $8;
  $27 = (($26) - ($25))|0;
  $8 = $27;
  $28 = $5;
  $29 = $6;
  $30 = $10;
  $31 = $8;
  $32 = (_HUFv06_decompress1X2_usingDTable($28,$29,$30,$31,$9)|0);
  $4 = $32;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _HUFv06_decompress4X2_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $18 = sp + 120|0;
 $19 = sp + 104|0;
 $20 = sp + 88|0;
 $21 = sp + 72|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $39 = $9;
 $40 = ($39>>>0)<(10);
 if ($40) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $41 = $8;
 $11 = $41;
 $42 = $6;
 $12 = $42;
 $43 = $12;
 $44 = $7;
 $45 = (($43) + ($44)|0);
 $13 = $45;
 $46 = $10;
 $14 = $46;
 $47 = $14;
 $48 = ((($47)) + 2|0);
 $15 = $48;
 $49 = $10;
 $50 = HEAP16[$49>>1]|0;
 $51 = $50&65535;
 $16 = $51;
 $52 = $11;
 $53 = (_MEM_readLE16_402($52)|0);
 $54 = $53&65535;
 $22 = $54;
 $55 = $11;
 $56 = ((($55)) + 2|0);
 $57 = (_MEM_readLE16_402($56)|0);
 $58 = $57&65535;
 $23 = $58;
 $59 = $11;
 $60 = ((($59)) + 4|0);
 $61 = (_MEM_readLE16_402($60)|0);
 $62 = $61&65535;
 $24 = $62;
 $63 = $11;
 $64 = ((($63)) + 6|0);
 $26 = $64;
 $65 = $26;
 $66 = $22;
 $67 = (($65) + ($66)|0);
 $27 = $67;
 $68 = $27;
 $69 = $23;
 $70 = (($68) + ($69)|0);
 $28 = $70;
 $71 = $28;
 $72 = $24;
 $73 = (($71) + ($72)|0);
 $29 = $73;
 $74 = $7;
 $75 = (($74) + 3)|0;
 $76 = (($75>>>0) / 4)&-1;
 $30 = $76;
 $77 = $12;
 $78 = $30;
 $79 = (($77) + ($78)|0);
 $31 = $79;
 $80 = $31;
 $81 = $30;
 $82 = (($80) + ($81)|0);
 $32 = $82;
 $83 = $32;
 $84 = $30;
 $85 = (($83) + ($84)|0);
 $33 = $85;
 $86 = $12;
 $34 = $86;
 $87 = $31;
 $35 = $87;
 $88 = $32;
 $36 = $88;
 $89 = $33;
 $37 = $89;
 $90 = $9;
 $91 = $22;
 $92 = $23;
 $93 = (($91) + ($92))|0;
 $94 = $24;
 $95 = (($93) + ($94))|0;
 $96 = (($95) + 6)|0;
 $97 = (($90) - ($96))|0;
 $25 = $97;
 $98 = $25;
 $99 = $9;
 $100 = ($98>>>0)>($99>>>0);
 if ($100) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $101 = $26;
 $102 = $22;
 $103 = (_BITv06_initDStream($18,$101,$102)|0);
 $17 = $103;
 $104 = $17;
 $105 = (_HUFv06_isError($104)|0);
 $106 = ($105|0)!=(0);
 if ($106) {
  $107 = $17;
  $5 = $107;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $108 = $27;
 $109 = $23;
 $110 = (_BITv06_initDStream($19,$108,$109)|0);
 $17 = $110;
 $111 = $17;
 $112 = (_HUFv06_isError($111)|0);
 $113 = ($112|0)!=(0);
 if ($113) {
  $114 = $17;
  $5 = $114;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $115 = $28;
 $116 = $24;
 $117 = (_BITv06_initDStream($20,$115,$116)|0);
 $17 = $117;
 $118 = $17;
 $119 = (_HUFv06_isError($118)|0);
 $120 = ($119|0)!=(0);
 if ($120) {
  $121 = $17;
  $5 = $121;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $122 = $29;
 $123 = $25;
 $124 = (_BITv06_initDStream($21,$122,$123)|0);
 $17 = $124;
 $125 = $17;
 $126 = (_HUFv06_isError($125)|0);
 $127 = ($126|0)!=(0);
 if ($127) {
  $128 = $17;
  $5 = $128;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $129 = (_BITv06_reloadDStream($18)|0);
 $130 = (_BITv06_reloadDStream($19)|0);
 $131 = $129 | $130;
 $132 = (_BITv06_reloadDStream($20)|0);
 $133 = $131 | $132;
 $134 = (_BITv06_reloadDStream($21)|0);
 $135 = $133 | $134;
 $38 = $135;
 while(1) {
  $136 = $38;
  $137 = ($136|0)==(0);
  if (!($137)) {
   break;
  }
  $138 = $37;
  $139 = $13;
  $140 = ((($139)) + -7|0);
  $141 = ($138>>>0)<($140>>>0);
  if (!($141)) {
   break;
  }
  $142 = (_MEM_64bits_401()|0);
  $143 = ($142|0)!=(0);
  if ($143) {
   $144 = $15;
   $145 = $16;
   $146 = (_HUFv06_decodeSymbolX2($18,$144,$145)|0);
   $147 = $34;
   $148 = ((($147)) + 1|0);
   $34 = $148;
   HEAP8[$147>>0] = $146;
  }
  $149 = (_MEM_64bits_401()|0);
  $150 = ($149|0)!=(0);
  if ($150) {
   $151 = $15;
   $152 = $16;
   $153 = (_HUFv06_decodeSymbolX2($19,$151,$152)|0);
   $154 = $35;
   $155 = ((($154)) + 1|0);
   $35 = $155;
   HEAP8[$154>>0] = $153;
  }
  $156 = (_MEM_64bits_401()|0);
  $157 = ($156|0)!=(0);
  if ($157) {
   $158 = $15;
   $159 = $16;
   $160 = (_HUFv06_decodeSymbolX2($20,$158,$159)|0);
   $161 = $36;
   $162 = ((($161)) + 1|0);
   $36 = $162;
   HEAP8[$161>>0] = $160;
  }
  $163 = (_MEM_64bits_401()|0);
  $164 = ($163|0)!=(0);
  if ($164) {
   $165 = $15;
   $166 = $16;
   $167 = (_HUFv06_decodeSymbolX2($21,$165,$166)|0);
   $168 = $37;
   $169 = ((($168)) + 1|0);
   $37 = $169;
   HEAP8[$168>>0] = $167;
  }
  (_MEM_64bits_401()|0);
  $170 = $15;
  $171 = $16;
  $172 = (_HUFv06_decodeSymbolX2($18,$170,$171)|0);
  $173 = $34;
  $174 = ((($173)) + 1|0);
  $34 = $174;
  HEAP8[$173>>0] = $172;
  (_MEM_64bits_401()|0);
  $175 = $15;
  $176 = $16;
  $177 = (_HUFv06_decodeSymbolX2($19,$175,$176)|0);
  $178 = $35;
  $179 = ((($178)) + 1|0);
  $35 = $179;
  HEAP8[$178>>0] = $177;
  (_MEM_64bits_401()|0);
  $180 = $15;
  $181 = $16;
  $182 = (_HUFv06_decodeSymbolX2($20,$180,$181)|0);
  $183 = $36;
  $184 = ((($183)) + 1|0);
  $36 = $184;
  HEAP8[$183>>0] = $182;
  (_MEM_64bits_401()|0);
  $185 = $15;
  $186 = $16;
  $187 = (_HUFv06_decodeSymbolX2($21,$185,$186)|0);
  $188 = $37;
  $189 = ((($188)) + 1|0);
  $37 = $189;
  HEAP8[$188>>0] = $187;
  $190 = (_MEM_64bits_401()|0);
  $191 = ($190|0)!=(0);
  if ($191) {
   $192 = $15;
   $193 = $16;
   $194 = (_HUFv06_decodeSymbolX2($18,$192,$193)|0);
   $195 = $34;
   $196 = ((($195)) + 1|0);
   $34 = $196;
   HEAP8[$195>>0] = $194;
  }
  $197 = (_MEM_64bits_401()|0);
  $198 = ($197|0)!=(0);
  if ($198) {
   $199 = $15;
   $200 = $16;
   $201 = (_HUFv06_decodeSymbolX2($19,$199,$200)|0);
   $202 = $35;
   $203 = ((($202)) + 1|0);
   $35 = $203;
   HEAP8[$202>>0] = $201;
  }
  $204 = (_MEM_64bits_401()|0);
  $205 = ($204|0)!=(0);
  if ($205) {
   $206 = $15;
   $207 = $16;
   $208 = (_HUFv06_decodeSymbolX2($20,$206,$207)|0);
   $209 = $36;
   $210 = ((($209)) + 1|0);
   $36 = $210;
   HEAP8[$209>>0] = $208;
  }
  $211 = (_MEM_64bits_401()|0);
  $212 = ($211|0)!=(0);
  if ($212) {
   $213 = $15;
   $214 = $16;
   $215 = (_HUFv06_decodeSymbolX2($21,$213,$214)|0);
   $216 = $37;
   $217 = ((($216)) + 1|0);
   $37 = $217;
   HEAP8[$216>>0] = $215;
  }
  $218 = $15;
  $219 = $16;
  $220 = (_HUFv06_decodeSymbolX2($18,$218,$219)|0);
  $221 = $34;
  $222 = ((($221)) + 1|0);
  $34 = $222;
  HEAP8[$221>>0] = $220;
  $223 = $15;
  $224 = $16;
  $225 = (_HUFv06_decodeSymbolX2($19,$223,$224)|0);
  $226 = $35;
  $227 = ((($226)) + 1|0);
  $35 = $227;
  HEAP8[$226>>0] = $225;
  $228 = $15;
  $229 = $16;
  $230 = (_HUFv06_decodeSymbolX2($20,$228,$229)|0);
  $231 = $36;
  $232 = ((($231)) + 1|0);
  $36 = $232;
  HEAP8[$231>>0] = $230;
  $233 = $15;
  $234 = $16;
  $235 = (_HUFv06_decodeSymbolX2($21,$233,$234)|0);
  $236 = $37;
  $237 = ((($236)) + 1|0);
  $37 = $237;
  HEAP8[$236>>0] = $235;
  $238 = (_BITv06_reloadDStream($18)|0);
  $239 = (_BITv06_reloadDStream($19)|0);
  $240 = $238 | $239;
  $241 = (_BITv06_reloadDStream($20)|0);
  $242 = $240 | $241;
  $243 = (_BITv06_reloadDStream($21)|0);
  $244 = $242 | $243;
  $38 = $244;
 }
 $245 = $34;
 $246 = $31;
 $247 = ($245>>>0)>($246>>>0);
 if ($247) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $248 = $35;
 $249 = $32;
 $250 = ($248>>>0)>($249>>>0);
 if ($250) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $251 = $36;
 $252 = $33;
 $253 = ($251>>>0)>($252>>>0);
 if ($253) {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 $254 = $34;
 $255 = $31;
 $256 = $15;
 $257 = $16;
 (_HUFv06_decodeStreamX2($254,$18,$255,$256,$257)|0);
 $258 = $35;
 $259 = $32;
 $260 = $15;
 $261 = $16;
 (_HUFv06_decodeStreamX2($258,$19,$259,$260,$261)|0);
 $262 = $36;
 $263 = $33;
 $264 = $15;
 $265 = $16;
 (_HUFv06_decodeStreamX2($262,$20,$263,$264,$265)|0);
 $266 = $37;
 $267 = $13;
 $268 = $15;
 $269 = $16;
 (_HUFv06_decodeStreamX2($266,$21,$267,$268,$269)|0);
 $270 = (_BITv06_endOfDStream($18)|0);
 $271 = (_BITv06_endOfDStream($19)|0);
 $272 = $270 & $271;
 $273 = (_BITv06_endOfDStream($20)|0);
 $274 = $272 & $273;
 $275 = (_BITv06_endOfDStream($21)|0);
 $276 = $274 & $275;
 $38 = $276;
 $277 = $38;
 $278 = ($277|0)!=(0);
 if ($278) {
  $279 = $7;
  $5 = $279;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 } else {
  $5 = -15;
  $280 = $5;
  STACKTOP = sp;return ($280|0);
 }
 return (0)|0;
}
function _MEM_readLE16_402($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_MEM_isLittleEndian_392()|0);
 $5 = ($4|0)!=(0);
 $6 = $2;
 if ($5) {
  $7 = (_MEM_read16_403($6)|0);
  $1 = $7;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $3 = $6;
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $3;
  $12 = ((($11)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = (($10) + ($15))|0;
  $17 = $16&65535;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _MEM_read16_403($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;
 $4 = HEAP16[$2>>1]|0;
 STACKTOP = sp;return ($4|0);
}
function _HUFv06_decompress4X2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 8224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(8224|0);
 $9 = sp + 28|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 _memset(($9|0),0,8194)|0;
 HEAP16[$9>>1] = 12;
 $12 = $7;
 $10 = $12;
 $13 = $7;
 $14 = $8;
 $15 = (_HUFv06_readDTableX2($9,$13,$14)|0);
 $11 = $15;
 $16 = $11;
 $17 = (_HUFv06_isError($16)|0);
 $18 = ($17|0)!=(0);
 $19 = $11;
 if ($18) {
  $4 = $19;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $20 = $8;
 $21 = ($19>>>0)>=($20>>>0);
 if ($21) {
  $4 = -14;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 } else {
  $22 = $11;
  $23 = $10;
  $24 = (($23) + ($22)|0);
  $10 = $24;
  $25 = $11;
  $26 = $8;
  $27 = (($26) - ($25))|0;
  $8 = $27;
  $28 = $5;
  $29 = $6;
  $30 = $10;
  $31 = $8;
  $32 = (_HUFv06_decompress4X2_usingDTable($28,$29,$30,$31,$9)|0);
  $4 = $32;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _HUFv06_readDTableX4($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2128|0);
 $7 = sp + 1864|0;
 $8 = sp + 1352|0;
 $9 = sp + 1264|0;
 $10 = sp + 1192|0;
 $12 = sp + 96|0;
 $13 = sp + 88|0;
 $16 = sp + 76|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 dest=$9; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$10; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $36 = ((($10)) + 4|0);
 $11 = $36;
 $37 = $4;
 $38 = HEAP32[$37>>2]|0;
 $17 = $38;
 $39 = $4;
 $19 = $39;
 $40 = $19;
 $41 = ((($40)) + 4|0);
 $20 = $41;
 $42 = $17;
 $43 = ($42>>>0)>(16);
 if ($43) {
  $3 = -17;
  $164 = $3;
  STACKTOP = sp;return ($164|0);
 }
 $44 = $5;
 $45 = $6;
 $46 = (_HUFv06_readStats($7,256,$9,$16,$13,$44,$45)|0);
 $18 = $46;
 $47 = $18;
 $48 = (_HUFv06_isError($47)|0);
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = $18;
  $3 = $50;
  $164 = $3;
  STACKTOP = sp;return ($164|0);
 }
 $51 = HEAP32[$13>>2]|0;
 $52 = $17;
 $53 = ($51>>>0)>($52>>>0);
 if ($53) {
  $3 = -17;
  $164 = $3;
  STACKTOP = sp;return ($164|0);
 }
 $54 = HEAP32[$13>>2]|0;
 $14 = $54;
 while(1) {
  $55 = $14;
  $56 = (($9) + ($55<<2)|0);
  $57 = HEAP32[$56>>2]|0;
  $58 = ($57|0)==(0);
  if (!($58)) {
   break;
  }
  $59 = $14;
  $60 = (($59) + -1)|0;
  $14 = $60;
 }
 $22 = 0;
 $21 = 1;
 while(1) {
  $61 = $21;
  $62 = $14;
  $63 = (($62) + 1)|0;
  $64 = ($61>>>0)<($63>>>0);
  $65 = $22;
  if (!($64)) {
   break;
  }
  $23 = $65;
  $66 = $21;
  $67 = (($9) + ($66<<2)|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $22;
  $70 = (($69) + ($68))|0;
  $22 = $70;
  $71 = $23;
  $72 = $11;
  $73 = $21;
  $74 = (($72) + ($73<<2)|0);
  HEAP32[$74>>2] = $71;
  $75 = $21;
  $76 = (($75) + 1)|0;
  $21 = $76;
 }
 $77 = $11;
 HEAP32[$77>>2] = $65;
 $78 = $22;
 $15 = $78;
 $24 = 0;
 while(1) {
  $79 = $24;
  $80 = HEAP32[$16>>2]|0;
  $81 = ($79>>>0)<($80>>>0);
  if (!($81)) {
   break;
  }
  $82 = $24;
  $83 = (($7) + ($82)|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $25 = $85;
  $86 = $11;
  $87 = $25;
  $88 = (($86) + ($87<<2)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (($89) + 1)|0;
  HEAP32[$88>>2] = $90;
  $26 = $89;
  $91 = $24;
  $92 = $91&255;
  $93 = $26;
  $94 = (($8) + ($93<<1)|0);
  HEAP8[$94>>0] = $92;
  $95 = $25;
  $96 = $95&255;
  $97 = $26;
  $98 = (($8) + ($97<<1)|0);
  $99 = ((($98)) + 1|0);
  HEAP8[$99>>0] = $96;
  $100 = $24;
  $101 = (($100) + 1)|0;
  $24 = $101;
 }
 $102 = $11;
 HEAP32[$102>>2] = 0;
 $27 = $12;
 $103 = $17;
 $104 = HEAP32[$13>>2]|0;
 $105 = (($103) - ($104))|0;
 $106 = (($105) - 1)|0;
 $28 = $106;
 $29 = 0;
 $30 = 1;
 while(1) {
  $107 = $30;
  $108 = $14;
  $109 = (($108) + 1)|0;
  $110 = ($107>>>0)<($109>>>0);
  if (!($110)) {
   break;
  }
  $111 = $29;
  $31 = $111;
  $112 = $30;
  $113 = (($9) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $30;
  $116 = $28;
  $117 = (($115) + ($116))|0;
  $118 = $114 << $117;
  $119 = $29;
  $120 = (($119) + ($118))|0;
  $29 = $120;
  $121 = $31;
  $122 = $27;
  $123 = $30;
  $124 = (($122) + ($123<<2)|0);
  HEAP32[$124>>2] = $121;
  $125 = $30;
  $126 = (($125) + 1)|0;
  $30 = $126;
 }
 $127 = HEAP32[$13>>2]|0;
 $128 = (($127) + 1)|0;
 $129 = $14;
 $130 = (($128) - ($129))|0;
 $32 = $130;
 $131 = $32;
 $33 = $131;
 while(1) {
  $132 = $33;
  $133 = $17;
  $134 = $32;
  $135 = (($133) - ($134))|0;
  $136 = (($135) + 1)|0;
  $137 = ($132>>>0)<($136>>>0);
  if (!($137)) {
   break;
  }
  $138 = $33;
  $139 = (($12) + (($138*68)|0)|0);
  $34 = $139;
  $35 = 1;
  while(1) {
   $140 = $35;
   $141 = $14;
   $142 = (($141) + 1)|0;
   $143 = ($140>>>0)<($142>>>0);
   if (!($143)) {
    break;
   }
   $144 = $27;
   $145 = $35;
   $146 = (($144) + ($145<<2)|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = $33;
   $149 = $147 >>> $148;
   $150 = $34;
   $151 = $35;
   $152 = (($150) + ($151<<2)|0);
   HEAP32[$152>>2] = $149;
   $153 = $35;
   $154 = (($153) + 1)|0;
   $35 = $154;
  }
  $155 = $33;
  $156 = (($155) + 1)|0;
  $33 = $156;
 }
 $157 = $20;
 $158 = $17;
 $159 = $15;
 $160 = $14;
 $161 = HEAP32[$13>>2]|0;
 $162 = (($161) + 1)|0;
 _HUFv06_fillDTableX4($157,$158,$8,$159,$10,$12,$160,$162);
 $163 = $18;
 $3 = $163;
 $164 = $3;
 STACKTOP = sp;return ($164|0);
}
function _HUFv06_fillDTableX4($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $16 = sp + 44|0;
 $27 = sp + 144|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $30 = $15;
 $31 = $9;
 $32 = (($30) - ($31))|0;
 $17 = $32;
 $33 = $15;
 $34 = $14;
 $35 = (($33) - ($34))|0;
 $18 = $35;
 $36 = $13;
 dest=$16; src=$36; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $19 = 0;
 while(1) {
  $37 = $19;
  $38 = $11;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $40 = $10;
  $41 = $19;
  $42 = (($40) + ($41<<1)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $20 = $44;
  $45 = $10;
  $46 = $19;
  $47 = (($45) + ($46<<1)|0);
  $48 = ((($47)) + 1|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $21 = $50;
  $51 = $15;
  $52 = $21;
  $53 = (($51) - ($52))|0;
  $22 = $53;
  $54 = $21;
  $55 = (($16) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $23 = $56;
  $57 = $9;
  $58 = $22;
  $59 = (($57) - ($58))|0;
  $60 = 1 << $59;
  $24 = $60;
  $61 = $9;
  $62 = $22;
  $63 = (($61) - ($62))|0;
  $64 = $18;
  $65 = ($63>>>0)>=($64>>>0);
  L4: do {
   if ($65) {
    $66 = $22;
    $67 = $17;
    $68 = (($66) + ($67))|0;
    $26 = $68;
    $69 = $26;
    $70 = ($69|0)<(1);
    $$ = $70 ? 1 : $68;
    $26 = $$;
    $71 = $12;
    $72 = $26;
    $73 = (($71) + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $25 = $74;
    $75 = $8;
    $76 = $23;
    $77 = (($75) + ($76<<2)|0);
    $78 = $9;
    $79 = $22;
    $80 = (($78) - ($79))|0;
    $81 = $22;
    $82 = $13;
    $83 = $22;
    $84 = (($82) + (($83*68)|0)|0);
    $85 = $26;
    $86 = $10;
    $87 = $25;
    $88 = (($86) + ($87<<1)|0);
    $89 = $11;
    $90 = $25;
    $91 = (($89) - ($90))|0;
    $92 = $15;
    $93 = $20;
    _HUFv06_fillDTableX4Level2($77,$80,$81,$84,$85,$88,$91,$92,$93);
   } else {
    $94 = $20;
    _MEM_writeLE16_404($27,$94);
    $95 = $22;
    $96 = $95&255;
    $97 = ((($27)) + 2|0);
    HEAP8[$97>>0] = $96;
    $98 = ((($27)) + 3|0);
    HEAP8[$98>>0] = 1;
    $99 = $23;
    $100 = $24;
    $101 = (($99) + ($100))|0;
    $29 = $101;
    $102 = $23;
    $28 = $102;
    while(1) {
     $103 = $28;
     $104 = $29;
     $105 = ($103>>>0)<($104>>>0);
     if (!($105)) {
      break L4;
     }
     $106 = $8;
     $107 = $28;
     $108 = (($106) + ($107<<2)|0);
     ;HEAP16[$108>>1]=HEAP16[$27>>1]|0;HEAP16[$108+2>>1]=HEAP16[$27+2>>1]|0;
     $109 = $28;
     $110 = (($109) + 1)|0;
     $28 = $110;
    }
   }
  } while(0);
  $111 = $24;
  $112 = $21;
  $113 = (($16) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + ($111))|0;
  HEAP32[$113>>2] = $115;
  $116 = $19;
  $117 = (($116) + 1)|0;
  $19 = $117;
 }
 STACKTOP = sp;return;
}
function _HUFv06_fillDTableX4Level2($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $18 = sp + 140|0;
 $19 = sp + 40|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $30 = $12;
 dest=$19; src=$30; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $31 = $13;
 $32 = ($31|0)>(1);
 L1: do {
  if ($32) {
   $33 = $13;
   $34 = (($19) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $21 = $35;
   $36 = $17;
   _MEM_writeLE16_404($18,$36);
   $37 = $11;
   $38 = $37&255;
   $39 = ((($18)) + 2|0);
   HEAP8[$39>>0] = $38;
   $40 = ((($18)) + 3|0);
   HEAP8[$40>>0] = 1;
   $20 = 0;
   while(1) {
    $41 = $20;
    $42 = $21;
    $43 = ($41>>>0)<($42>>>0);
    if (!($43)) {
     break L1;
    }
    $44 = $9;
    $45 = $20;
    $46 = (($44) + ($45<<2)|0);
    ;HEAP16[$46>>1]=HEAP16[$18>>1]|0;HEAP16[$46+2>>1]=HEAP16[$18+2>>1]|0;
    $47 = $20;
    $48 = (($47) + 1)|0;
    $20 = $48;
   }
  }
 } while(0);
 $22 = 0;
 while(1) {
  $49 = $22;
  $50 = $15;
  $51 = ($49>>>0)<($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $14;
  $53 = $22;
  $54 = (($52) + ($53<<1)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $23 = $56;
  $57 = $14;
  $58 = $22;
  $59 = (($57) + ($58<<1)|0);
  $60 = ((($59)) + 1|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $24 = $62;
  $63 = $16;
  $64 = $24;
  $65 = (($63) - ($64))|0;
  $25 = $65;
  $66 = $10;
  $67 = $25;
  $68 = (($66) - ($67))|0;
  $69 = 1 << $68;
  $26 = $69;
  $70 = $24;
  $71 = (($19) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $27 = $72;
  $73 = $27;
  $28 = $73;
  $74 = $27;
  $75 = $26;
  $76 = (($74) + ($75))|0;
  $29 = $76;
  $77 = $17;
  $78 = $77&65535;
  $79 = $23;
  $80 = $79 << 8;
  $81 = (($78) + ($80))|0;
  $82 = $81&65535;
  _MEM_writeLE16_404($18,$82);
  $83 = $25;
  $84 = $11;
  $85 = (($83) + ($84))|0;
  $86 = $85&255;
  $87 = ((($18)) + 2|0);
  HEAP8[$87>>0] = $86;
  $88 = ((($18)) + 3|0);
  HEAP8[$88>>0] = 2;
  while(1) {
   $89 = $9;
   $90 = $28;
   $91 = (($90) + 1)|0;
   $28 = $91;
   $92 = (($89) + ($90<<2)|0);
   ;HEAP16[$92>>1]=HEAP16[$18>>1]|0;HEAP16[$92+2>>1]=HEAP16[$18+2>>1]|0;
   $93 = $28;
   $94 = $29;
   $95 = ($93>>>0)<($94>>>0);
   if (!($95)) {
    break;
   }
  }
  $96 = $26;
  $97 = $24;
  $98 = (($19) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + ($96))|0;
  HEAP32[$98>>2] = $100;
  $101 = $22;
  $102 = (($101) + 1)|0;
  $22 = $102;
 }
 STACKTOP = sp;return;
}
function _MEM_writeLE16_404($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_MEM_isLittleEndian_392()|0);
 $6 = ($5|0)!=(0);
 $7 = $2;
 if ($6) {
  $8 = $3;
  _MEM_write16_405($7,$8);
  STACKTOP = sp;return;
 } else {
  $4 = $7;
  $9 = $3;
  $10 = $9&255;
  $11 = $4;
  HEAP8[$11>>0] = $10;
  $12 = $3;
  $13 = $12&65535;
  $14 = $13 >> 8;
  $15 = $14&255;
  $16 = $4;
  $17 = ((($16)) + 1|0);
  HEAP8[$17>>0] = $15;
  STACKTOP = sp;return;
 }
}
function _MEM_write16_405($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $0;
 HEAP16[$3>>1] = $1;
 $4 = $2;
 ;HEAP8[$4>>0]=HEAP8[$3>>0]|0;HEAP8[$4+1>>0]=HEAP8[$3+1>>0]|0;
 STACKTOP = sp;return;
}
function _HUFv06_decompress1X4_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $17 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $19 = $8;
 $11 = $19;
 $20 = $6;
 $12 = $20;
 $21 = $12;
 $22 = $7;
 $23 = (($21) + ($22)|0);
 $13 = $23;
 $24 = $10;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $10;
 $15 = $26;
 $27 = $15;
 $28 = ((($27)) + 4|0);
 $16 = $28;
 $29 = $11;
 $30 = $9;
 $31 = (_BITv06_initDStream($17,$29,$30)|0);
 $18 = $31;
 $32 = $18;
 $33 = (_HUFv06_isError($32)|0);
 $34 = ($33|0)!=(0);
 if ($34) {
  $35 = $18;
  $5 = $35;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 }
 $36 = $12;
 $37 = $13;
 $38 = $16;
 $39 = $14;
 (_HUFv06_decodeStreamX4($36,$17,$37,$38,$39)|0);
 $40 = (_BITv06_endOfDStream($17)|0);
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $7;
  $5 = $42;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 } else {
  $5 = -15;
  $43 = $5;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function _HUFv06_decodeStreamX4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $10 = $11;
 while(1) {
  $12 = $6;
  $13 = (_BITv06_reloadDStream($12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $7;
  $17 = ((($16)) + -7|0);
  $18 = ($15>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = (_MEM_64bits_401()|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $5;
   $22 = $6;
   $23 = $8;
   $24 = $9;
   $25 = (_HUFv06_decodeSymbolX4($21,$22,$23,$24)|0);
   $26 = $5;
   $27 = (($26) + ($25)|0);
   $5 = $27;
  }
  (_MEM_64bits_401()|0);
  $28 = $5;
  $29 = $6;
  $30 = $8;
  $31 = $9;
  $32 = (_HUFv06_decodeSymbolX4($28,$29,$30,$31)|0);
  $33 = $5;
  $34 = (($33) + ($32)|0);
  $5 = $34;
  $35 = (_MEM_64bits_401()|0);
  $36 = ($35|0)!=(0);
  if ($36) {
   $37 = $5;
   $38 = $6;
   $39 = $8;
   $40 = $9;
   $41 = (_HUFv06_decodeSymbolX4($37,$38,$39,$40)|0);
   $42 = $5;
   $43 = (($42) + ($41)|0);
   $5 = $43;
  }
  $44 = $5;
  $45 = $6;
  $46 = $8;
  $47 = $9;
  $48 = (_HUFv06_decodeSymbolX4($44,$45,$46,$47)|0);
  $49 = $5;
  $50 = (($49) + ($48)|0);
  $5 = $50;
 }
 while(1) {
  $51 = $6;
  $52 = (_BITv06_reloadDStream($51)|0);
  $53 = ($52|0)==(0);
  if (!($53)) {
   break;
  }
  $54 = $5;
  $55 = $7;
  $56 = ((($55)) + -2|0);
  $57 = ($54>>>0)<=($56>>>0);
  if (!($57)) {
   break;
  }
  $58 = $5;
  $59 = $6;
  $60 = $8;
  $61 = $9;
  $62 = (_HUFv06_decodeSymbolX4($58,$59,$60,$61)|0);
  $63 = $5;
  $64 = (($63) + ($62)|0);
  $5 = $64;
 }
 while(1) {
  $65 = $5;
  $66 = $7;
  $67 = ((($66)) + -2|0);
  $68 = ($65>>>0)<=($67>>>0);
  $69 = $5;
  if (!($68)) {
   break;
  }
  $70 = $6;
  $71 = $8;
  $72 = $9;
  $73 = (_HUFv06_decodeSymbolX4($69,$70,$71,$72)|0);
  $74 = $5;
  $75 = (($74) + ($73)|0);
  $5 = $75;
 }
 $76 = $7;
 $77 = ($69>>>0)<($76>>>0);
 if (!($77)) {
  $85 = $5;
  $86 = $10;
  $87 = $85;
  $88 = $86;
  $89 = (($87) - ($88))|0;
  STACKTOP = sp;return ($89|0);
 }
 $78 = $5;
 $79 = $6;
 $80 = $8;
 $81 = $9;
 $82 = (_HUFv06_decodeLastSymbolX4($78,$79,$80,$81)|0);
 $83 = $5;
 $84 = (($83) + ($82)|0);
 $5 = $84;
 $85 = $5;
 $86 = $10;
 $87 = $85;
 $88 = $86;
 $89 = (($87) - ($88))|0;
 STACKTOP = sp;return ($89|0);
}
function _HUFv06_decodeSymbolX4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (_BITv06_lookBitsFast($9,$10)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;HEAP8[$12+1>>0]=HEAP8[$15+1>>0]|0;
 $16 = $5;
 $17 = $6;
 $18 = $8;
 $19 = (($17) + ($18<<2)|0);
 $20 = ((($19)) + 2|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 _BITv06_skipBits($16,$22);
 $23 = $6;
 $24 = $8;
 $25 = (($23) + ($24<<2)|0);
 $26 = ((($25)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 STACKTOP = sp;return ($28|0);
}
function _HUFv06_decodeLastSymbolX4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (_BITv06_lookBitsFast($9,$10)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
 $16 = $6;
 $17 = $8;
 $18 = (($16) + ($17<<2)|0);
 $19 = ((($18)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(1);
 $23 = $5;
 if ($22) {
  $24 = $6;
  $25 = $8;
  $26 = (($24) + ($25<<2)|0);
  $27 = ((($26)) + 2|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  _BITv06_skipBits($23,$29);
  STACKTOP = sp;return 1;
 }
 $30 = ((($23)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31>>>0)<(32);
 if (!($32)) {
  STACKTOP = sp;return 1;
 }
 $33 = $5;
 $34 = $6;
 $35 = $8;
 $36 = (($34) + ($35<<2)|0);
 $37 = ((($36)) + 2|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 _BITv06_skipBits($33,$39);
 $40 = $5;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42>>>0)>(32);
 if (!($43)) {
  STACKTOP = sp;return 1;
 }
 $44 = $5;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = 32;
 STACKTOP = sp;return 1;
}
function _HUFv06_decompress4X4_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $18 = sp + 120|0;
 $19 = sp + 104|0;
 $20 = sp + 88|0;
 $21 = sp + 72|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $39 = $9;
 $40 = ($39>>>0)<(10);
 if ($40) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $41 = $8;
 $11 = $41;
 $42 = $6;
 $12 = $42;
 $43 = $12;
 $44 = $7;
 $45 = (($43) + ($44)|0);
 $13 = $45;
 $46 = $10;
 $14 = $46;
 $47 = $14;
 $48 = ((($47)) + 4|0);
 $15 = $48;
 $49 = $10;
 $50 = HEAP32[$49>>2]|0;
 $16 = $50;
 $51 = $11;
 $52 = (_MEM_readLE16_402($51)|0);
 $53 = $52&65535;
 $22 = $53;
 $54 = $11;
 $55 = ((($54)) + 2|0);
 $56 = (_MEM_readLE16_402($55)|0);
 $57 = $56&65535;
 $23 = $57;
 $58 = $11;
 $59 = ((($58)) + 4|0);
 $60 = (_MEM_readLE16_402($59)|0);
 $61 = $60&65535;
 $24 = $61;
 $62 = $11;
 $63 = ((($62)) + 6|0);
 $26 = $63;
 $64 = $26;
 $65 = $22;
 $66 = (($64) + ($65)|0);
 $27 = $66;
 $67 = $27;
 $68 = $23;
 $69 = (($67) + ($68)|0);
 $28 = $69;
 $70 = $28;
 $71 = $24;
 $72 = (($70) + ($71)|0);
 $29 = $72;
 $73 = $7;
 $74 = (($73) + 3)|0;
 $75 = (($74>>>0) / 4)&-1;
 $30 = $75;
 $76 = $12;
 $77 = $30;
 $78 = (($76) + ($77)|0);
 $31 = $78;
 $79 = $31;
 $80 = $30;
 $81 = (($79) + ($80)|0);
 $32 = $81;
 $82 = $32;
 $83 = $30;
 $84 = (($82) + ($83)|0);
 $33 = $84;
 $85 = $12;
 $34 = $85;
 $86 = $31;
 $35 = $86;
 $87 = $32;
 $36 = $87;
 $88 = $33;
 $37 = $88;
 $89 = $9;
 $90 = $22;
 $91 = $23;
 $92 = (($90) + ($91))|0;
 $93 = $24;
 $94 = (($92) + ($93))|0;
 $95 = (($94) + 6)|0;
 $96 = (($89) - ($95))|0;
 $25 = $96;
 $97 = $25;
 $98 = $9;
 $99 = ($97>>>0)>($98>>>0);
 if ($99) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $100 = $26;
 $101 = $22;
 $102 = (_BITv06_initDStream($18,$100,$101)|0);
 $17 = $102;
 $103 = $17;
 $104 = (_HUFv06_isError($103)|0);
 $105 = ($104|0)!=(0);
 if ($105) {
  $106 = $17;
  $5 = $106;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $107 = $27;
 $108 = $23;
 $109 = (_BITv06_initDStream($19,$107,$108)|0);
 $17 = $109;
 $110 = $17;
 $111 = (_HUFv06_isError($110)|0);
 $112 = ($111|0)!=(0);
 if ($112) {
  $113 = $17;
  $5 = $113;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $114 = $28;
 $115 = $24;
 $116 = (_BITv06_initDStream($20,$114,$115)|0);
 $17 = $116;
 $117 = $17;
 $118 = (_HUFv06_isError($117)|0);
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = $17;
  $5 = $120;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $121 = $29;
 $122 = $25;
 $123 = (_BITv06_initDStream($21,$121,$122)|0);
 $17 = $123;
 $124 = $17;
 $125 = (_HUFv06_isError($124)|0);
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $17;
  $5 = $127;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $128 = (_BITv06_reloadDStream($18)|0);
 $129 = (_BITv06_reloadDStream($19)|0);
 $130 = $128 | $129;
 $131 = (_BITv06_reloadDStream($20)|0);
 $132 = $130 | $131;
 $133 = (_BITv06_reloadDStream($21)|0);
 $134 = $132 | $133;
 $38 = $134;
 while(1) {
  $135 = $38;
  $136 = ($135|0)==(0);
  if (!($136)) {
   break;
  }
  $137 = $37;
  $138 = $13;
  $139 = ((($138)) + -7|0);
  $140 = ($137>>>0)<($139>>>0);
  if (!($140)) {
   break;
  }
  $141 = (_MEM_64bits_401()|0);
  $142 = ($141|0)!=(0);
  if ($142) {
   $143 = $34;
   $144 = $15;
   $145 = $16;
   $146 = (_HUFv06_decodeSymbolX4($143,$18,$144,$145)|0);
   $147 = $34;
   $148 = (($147) + ($146)|0);
   $34 = $148;
  }
  $149 = (_MEM_64bits_401()|0);
  $150 = ($149|0)!=(0);
  if ($150) {
   $151 = $35;
   $152 = $15;
   $153 = $16;
   $154 = (_HUFv06_decodeSymbolX4($151,$19,$152,$153)|0);
   $155 = $35;
   $156 = (($155) + ($154)|0);
   $35 = $156;
  }
  $157 = (_MEM_64bits_401()|0);
  $158 = ($157|0)!=(0);
  if ($158) {
   $159 = $36;
   $160 = $15;
   $161 = $16;
   $162 = (_HUFv06_decodeSymbolX4($159,$20,$160,$161)|0);
   $163 = $36;
   $164 = (($163) + ($162)|0);
   $36 = $164;
  }
  $165 = (_MEM_64bits_401()|0);
  $166 = ($165|0)!=(0);
  if ($166) {
   $167 = $37;
   $168 = $15;
   $169 = $16;
   $170 = (_HUFv06_decodeSymbolX4($167,$21,$168,$169)|0);
   $171 = $37;
   $172 = (($171) + ($170)|0);
   $37 = $172;
  }
  (_MEM_64bits_401()|0);
  $173 = $34;
  $174 = $15;
  $175 = $16;
  $176 = (_HUFv06_decodeSymbolX4($173,$18,$174,$175)|0);
  $177 = $34;
  $178 = (($177) + ($176)|0);
  $34 = $178;
  (_MEM_64bits_401()|0);
  $179 = $35;
  $180 = $15;
  $181 = $16;
  $182 = (_HUFv06_decodeSymbolX4($179,$19,$180,$181)|0);
  $183 = $35;
  $184 = (($183) + ($182)|0);
  $35 = $184;
  (_MEM_64bits_401()|0);
  $185 = $36;
  $186 = $15;
  $187 = $16;
  $188 = (_HUFv06_decodeSymbolX4($185,$20,$186,$187)|0);
  $189 = $36;
  $190 = (($189) + ($188)|0);
  $36 = $190;
  (_MEM_64bits_401()|0);
  $191 = $37;
  $192 = $15;
  $193 = $16;
  $194 = (_HUFv06_decodeSymbolX4($191,$21,$192,$193)|0);
  $195 = $37;
  $196 = (($195) + ($194)|0);
  $37 = $196;
  $197 = (_MEM_64bits_401()|0);
  $198 = ($197|0)!=(0);
  if ($198) {
   $199 = $34;
   $200 = $15;
   $201 = $16;
   $202 = (_HUFv06_decodeSymbolX4($199,$18,$200,$201)|0);
   $203 = $34;
   $204 = (($203) + ($202)|0);
   $34 = $204;
  }
  $205 = (_MEM_64bits_401()|0);
  $206 = ($205|0)!=(0);
  if ($206) {
   $207 = $35;
   $208 = $15;
   $209 = $16;
   $210 = (_HUFv06_decodeSymbolX4($207,$19,$208,$209)|0);
   $211 = $35;
   $212 = (($211) + ($210)|0);
   $35 = $212;
  }
  $213 = (_MEM_64bits_401()|0);
  $214 = ($213|0)!=(0);
  if ($214) {
   $215 = $36;
   $216 = $15;
   $217 = $16;
   $218 = (_HUFv06_decodeSymbolX4($215,$20,$216,$217)|0);
   $219 = $36;
   $220 = (($219) + ($218)|0);
   $36 = $220;
  }
  $221 = (_MEM_64bits_401()|0);
  $222 = ($221|0)!=(0);
  if ($222) {
   $223 = $37;
   $224 = $15;
   $225 = $16;
   $226 = (_HUFv06_decodeSymbolX4($223,$21,$224,$225)|0);
   $227 = $37;
   $228 = (($227) + ($226)|0);
   $37 = $228;
  }
  $229 = $34;
  $230 = $15;
  $231 = $16;
  $232 = (_HUFv06_decodeSymbolX4($229,$18,$230,$231)|0);
  $233 = $34;
  $234 = (($233) + ($232)|0);
  $34 = $234;
  $235 = $35;
  $236 = $15;
  $237 = $16;
  $238 = (_HUFv06_decodeSymbolX4($235,$19,$236,$237)|0);
  $239 = $35;
  $240 = (($239) + ($238)|0);
  $35 = $240;
  $241 = $36;
  $242 = $15;
  $243 = $16;
  $244 = (_HUFv06_decodeSymbolX4($241,$20,$242,$243)|0);
  $245 = $36;
  $246 = (($245) + ($244)|0);
  $36 = $246;
  $247 = $37;
  $248 = $15;
  $249 = $16;
  $250 = (_HUFv06_decodeSymbolX4($247,$21,$248,$249)|0);
  $251 = $37;
  $252 = (($251) + ($250)|0);
  $37 = $252;
  $253 = (_BITv06_reloadDStream($18)|0);
  $254 = (_BITv06_reloadDStream($19)|0);
  $255 = $253 | $254;
  $256 = (_BITv06_reloadDStream($20)|0);
  $257 = $255 | $256;
  $258 = (_BITv06_reloadDStream($21)|0);
  $259 = $257 | $258;
  $38 = $259;
 }
 $260 = $34;
 $261 = $31;
 $262 = ($260>>>0)>($261>>>0);
 if ($262) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $263 = $35;
 $264 = $32;
 $265 = ($263>>>0)>($264>>>0);
 if ($265) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $266 = $36;
 $267 = $33;
 $268 = ($266>>>0)>($267>>>0);
 if ($268) {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 $269 = $34;
 $270 = $31;
 $271 = $15;
 $272 = $16;
 (_HUFv06_decodeStreamX4($269,$18,$270,$271,$272)|0);
 $273 = $35;
 $274 = $32;
 $275 = $15;
 $276 = $16;
 (_HUFv06_decodeStreamX4($273,$19,$274,$275,$276)|0);
 $277 = $36;
 $278 = $33;
 $279 = $15;
 $280 = $16;
 (_HUFv06_decodeStreamX4($277,$20,$278,$279,$280)|0);
 $281 = $37;
 $282 = $13;
 $283 = $15;
 $284 = $16;
 (_HUFv06_decodeStreamX4($281,$21,$282,$283,$284)|0);
 $285 = (_BITv06_endOfDStream($18)|0);
 $286 = (_BITv06_endOfDStream($19)|0);
 $287 = $285 & $286;
 $288 = (_BITv06_endOfDStream($20)|0);
 $289 = $287 & $288;
 $290 = (_BITv06_endOfDStream($21)|0);
 $291 = $289 & $290;
 $38 = $291;
 $292 = $38;
 $293 = ($292|0)!=(0);
 if ($293) {
  $294 = $7;
  $5 = $294;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 } else {
  $5 = -15;
  $295 = $5;
  STACKTOP = sp;return ($295|0);
 }
 return (0)|0;
}
function _HUFv06_decompress4X4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16416|0);
 $9 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 _memset(($9|0),0,16388)|0;
 HEAP32[$9>>2] = 12;
 $12 = $7;
 $10 = $12;
 $13 = $7;
 $14 = $8;
 $15 = (_HUFv06_readDTableX4($9,$13,$14)|0);
 $11 = $15;
 $16 = $11;
 $17 = (_HUFv06_isError($16)|0);
 $18 = ($17|0)!=(0);
 $19 = $11;
 if ($18) {
  $4 = $19;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 $20 = $8;
 $21 = ($19>>>0)>=($20>>>0);
 if ($21) {
  $4 = -14;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 } else {
  $22 = $11;
  $23 = $10;
  $24 = (($23) + ($22)|0);
  $10 = $24;
  $25 = $11;
  $26 = $8;
  $27 = (($26) - ($25))|0;
  $8 = $27;
  $28 = $5;
  $29 = $6;
  $30 = $10;
  $31 = $8;
  $32 = (_HUFv06_decompress4X4_usingDTable($28,$29,$30,$31,$9)|0);
  $4 = $32;
  $33 = $4;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function _HUFv06_decompress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $9 = sp + 16|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $14 = $6;
 $15 = ($14|0)==(0);
 if ($15) {
  $4 = -13;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 $16 = $8;
 $17 = $6;
 $18 = ($16>>>0)>($17>>>0);
 if ($18) {
  $4 = -15;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 $19 = $8;
 $20 = $6;
 $21 = ($19|0)==($20|0);
 if ($21) {
  $22 = $5;
  $23 = $7;
  $24 = $6;
  _memcpy(($22|0),($23|0),($24|0))|0;
  $25 = $6;
  $4 = $25;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 $26 = $8;
 $27 = ($26|0)==(1);
 if ($27) {
  $28 = $5;
  $29 = $7;
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = $31&255;
  $33 = $6;
  _memset(($28|0),($32|0),($33|0))|0;
  $34 = $6;
  $4 = $34;
  $85 = $4;
  STACKTOP = sp;return ($85|0);
 }
 $35 = $8;
 $36 = $35<<4;
 $37 = $6;
 $38 = (($36>>>0) / ($37>>>0))&-1;
 $10 = $38;
 $39 = $6;
 $40 = $39 >>> 8;
 $11 = $40;
 $12 = 0;
 while(1) {
  $41 = $12;
  $42 = ($41>>>0)<(3);
  if (!($42)) {
   break;
  }
  $43 = $10;
  $44 = (3356 + (($43*24)|0)|0);
  $45 = $12;
  $46 = (($44) + ($45<<3)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $10;
  $49 = (3356 + (($48*24)|0)|0);
  $50 = $12;
  $51 = (($49) + ($50<<3)|0);
  $52 = ((($51)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = $11;
  $55 = Math_imul($53, $54)|0;
  $56 = (($47) + ($55))|0;
  $57 = $12;
  $58 = (($9) + ($57<<2)|0);
  HEAP32[$58>>2] = $56;
  $59 = $12;
  $60 = (($59) + 1)|0;
  $12 = $60;
 }
 $61 = ((($9)) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 >>> 4;
 $64 = ((($9)) + 4|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = (($65) + ($63))|0;
 HEAP32[$64>>2] = $66;
 $67 = ((($9)) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $68 >>> 3;
 $70 = ((($9)) + 8|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + ($69))|0;
 HEAP32[$70>>2] = $72;
 $13 = 0;
 $73 = ((($9)) + 4|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = HEAP32[$9>>2]|0;
 $76 = ($74>>>0)<($75>>>0);
 $$ = $76 ? 1 : 0;
 $13 = $$;
 $77 = $13;
 $78 = (3740 + ($77<<2)|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = $5;
 $81 = $6;
 $82 = $7;
 $83 = $8;
 $84 = (FUNCTION_TABLE_iiiii[$79 & 7]($80,$81,$82,$83)|0);
 $4 = $84;
 $85 = $4;
 STACKTOP = sp;return ($85|0);
}
function _ZSTDv06_decompressBegin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 21536|0);
 HEAP32[$3>>2] = 5;
 $4 = $1;
 $5 = ((($4)) + 21564|0);
 HEAP32[$5>>2] = 0;
 $6 = $1;
 $7 = ((($6)) + 21520|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 21524|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 21528|0);
 HEAP32[$11>>2] = 0;
 $12 = $1;
 $13 = ((($12)) + 21532|0);
 HEAP32[$13>>2] = 0;
 $14 = $1;
 $15 = ((($14)) + 5132|0);
 HEAP32[$15>>2] = 12;
 $16 = $1;
 $17 = ((($16)) + 21568|0);
 HEAP32[$17>>2] = 0;
 STACKTOP = sp;return 0;
}
function _ZSTDv06_createDCtx() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = (_malloc(152680)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $0 = 0;
 } else {
  $5 = $1;
  (_ZSTDv06_decompressBegin($5)|0);
  $6 = $1;
  $0 = $6;
 }
 $7 = $0;
 STACKTOP = sp;return ($7|0);
}
function _ZSTDv06_freeDCtx($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 _free($2);
 STACKTOP = sp;return 0;
}
function _ZSTDv06_getFrameParams($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = $5;
 $7 = $10;
 $11 = $6;
 $12 = ($11>>>0)<(5);
 if ($12) {
  $3 = 5;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 $13 = $5;
 $14 = (_MEM_readLE32_391($13)|0);
 $15 = ($14|0)!=(-47205082);
 if ($15) {
  $3 = -2;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 $16 = $5;
 $17 = $6;
 $18 = (_ZSTDv06_frameHeaderSize($16,$17)|0);
 $8 = $18;
 $19 = $6;
 $20 = $8;
 $21 = ($19>>>0)<($20>>>0);
 if ($21) {
  $22 = $8;
  $3 = $22;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 $23 = $4;
 ;HEAP32[$23>>2]=0|0;HEAP32[$23+4>>2]=0|0;HEAP32[$23+8>>2]=0|0;HEAP32[$23+12>>2]=0|0;
 $24 = $7;
 $25 = ((($24)) + 4|0);
 $26 = HEAP8[$25>>0]|0;
 $9 = $26;
 $27 = $9;
 $28 = $27&255;
 $29 = $28 & 15;
 $30 = (($29) + 12)|0;
 $31 = $4;
 $32 = ((($31)) + 8|0);
 HEAP32[$32>>2] = $30;
 $33 = $9;
 $34 = $33&255;
 $35 = $34 & 32;
 $36 = ($35|0)!=(0);
 if ($36) {
  $3 = -5;
  $65 = $3;
  STACKTOP = sp;return ($65|0);
 }
 $37 = $9;
 $38 = $37&255;
 $39 = $38 >> 6;
 switch ($39|0) {
 case 0:  {
  $40 = $4;
  $$sink2 = $40;$61 = 0;$64 = 0;
  break;
 }
 case 1:  {
  $41 = $7;
  $42 = ((($41)) + 5|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $4;
  $$sink2 = $45;$61 = $44;$64 = 0;
  break;
 }
 case 2:  {
  $46 = $7;
  $47 = ((($46)) + 5|0);
  $48 = (_MEM_readLE16_402($47)|0);
  $49 = $48&65535;
  $50 = (($49) + 256)|0;
  $51 = ($50|0)<(0);
  $52 = $51 << 31 >> 31;
  $53 = $4;
  $$sink2 = $53;$61 = $50;$64 = $52;
  break;
 }
 case 3:  {
  $54 = $7;
  $55 = ((($54)) + 5|0);
  $56 = (_MEM_readLE64_398($55)|0);
  $57 = tempRet0;
  $58 = $4;
  $$sink2 = $58;$61 = $56;$64 = $57;
  break;
 }
 default: {
  // unreachable;
 }
 }
 $59 = $$sink2;
 $60 = $59;
 HEAP32[$60>>2] = $61;
 $62 = (($59) + 4)|0;
 $63 = $62;
 HEAP32[$63>>2] = $64;
 $3 = 0;
 $65 = $3;
 STACKTOP = sp;return ($65|0);
}
function _ZSTDv06_frameHeaderSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $4;
 $7 = ($6>>>0)<(5);
 if ($7) {
  $2 = -14;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 } else {
  $8 = $3;
  $9 = ((($8)) + 4|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = $11 >> 6;
  $5 = $12;
  $13 = $5;
  $14 = (3752 + ($13<<2)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (5 + ($15))|0;
  $2 = $16;
  $17 = $2;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _ZSTDv06_getcBlockSize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $7 = $9;
 $10 = $5;
 $11 = ($10>>>0)<(3);
 if ($11) {
  $3 = -14;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 $12 = $7;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 >> 6;
 $16 = $6;
 HEAP32[$16>>2] = $15;
 $17 = $7;
 $18 = ((($17)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $7;
 $22 = ((($21)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 8;
 $26 = (($20) + ($25))|0;
 $27 = $7;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 & 7;
 $31 = $30 << 16;
 $32 = (($26) + ($31))|0;
 $8 = $32;
 $33 = $6;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(2);
 $36 = $8;
 $37 = $35 ? $36 : 0;
 $38 = $6;
 $39 = ((($38)) + 4|0);
 HEAP32[$39>>2] = $37;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(3);
 if ($42) {
  $3 = 0;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 $43 = $6;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(2);
 if ($45) {
  $3 = 1;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 } else {
  $46 = $8;
  $3 = $46;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _ZSTDv06_decodeLiteralsBlock($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $20 = $5;
 $7 = $20;
 $21 = $6;
 $22 = ($21>>>0)<(3);
 if ($22) {
  $3 = -15;
  $366 = $3;
  STACKTOP = sp;return ($366|0);
 }
 $23 = $7;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 >> 6;
 switch ($26|0) {
 case 0:  {
  $10 = 0;
  $27 = $7;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 >> 4;
  $31 = $30 & 3;
  $11 = $31;
  $32 = $6;
  $33 = ($32>>>0)<(5);
  if ($33) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $34 = $11;
  switch ($34|0) {
  case 3:  {
   $11 = 5;
   $89 = $7;
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = $91 & 15;
   $93 = $92 << 14;
   $94 = $7;
   $95 = ((($94)) + 1|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $97 << 6;
   $99 = (($93) + ($98))|0;
   $100 = $7;
   $101 = ((($100)) + 2|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $103 >> 2;
   $105 = (($99) + ($104))|0;
   $8 = $105;
   $106 = $7;
   $107 = ((($106)) + 2|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $109 & 3;
   $111 = $110 << 16;
   $112 = $7;
   $113 = ((($112)) + 3|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = $115 << 8;
   $117 = (($111) + ($116))|0;
   $118 = $7;
   $119 = ((($118)) + 4|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = (($117) + ($121))|0;
   $9 = $122;
   break;
  }
  case 2:  {
   $11 = 4;
   $61 = $7;
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $63 & 15;
   $65 = $64 << 10;
   $66 = $7;
   $67 = ((($66)) + 1|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = $69 << 2;
   $71 = (($65) + ($70))|0;
   $72 = $7;
   $73 = ((($72)) + 2|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = $75 >> 6;
   $77 = (($71) + ($76))|0;
   $8 = $77;
   $78 = $7;
   $79 = ((($78)) + 2|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $81 & 63;
   $83 = $82 << 8;
   $84 = $7;
   $85 = ((($84)) + 3|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = (($83) + ($87))|0;
   $9 = $88;
   break;
  }
  default: {
   $11 = 3;
   $35 = $7;
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $37 & 16;
   $10 = $38;
   $39 = $7;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $41 & 15;
   $43 = $42 << 6;
   $44 = $7;
   $45 = ((($44)) + 1|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $47 >> 2;
   $49 = (($43) + ($48))|0;
   $8 = $49;
   $50 = $7;
   $51 = ((($50)) + 1|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 & 3;
   $55 = $54 << 8;
   $56 = $7;
   $57 = ((($56)) + 2|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (($55) + ($59))|0;
   $9 = $60;
  }
  }
  $123 = $8;
  $124 = ($123>>>0)>(131072);
  if ($124) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $125 = $9;
  $126 = $11;
  $127 = (($125) + ($126))|0;
  $128 = $6;
  $129 = ($127>>>0)>($128>>>0);
  if ($129) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $130 = $10;
  $131 = ($130|0)!=(0);
  $132 = $4;
  $133 = ((($132)) + 21580|0);
  $134 = $8;
  $135 = $7;
  $136 = $11;
  $137 = (($135) + ($136)|0);
  $138 = $9;
  if ($131) {
   $139 = (_HUFv06_decompress1X2($133,$134,$137,$138)|0);
   $141 = $139;
  } else {
   $140 = (_HUFv06_decompress($133,$134,$137,$138)|0);
   $141 = $140;
  }
  $142 = (_ERR_isError_388($141)|0);
  $143 = ($142|0)!=(0);
  if ($143) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  } else {
   $144 = $4;
   $145 = ((($144)) + 21580|0);
   $146 = $4;
   $147 = ((($146)) + 21572|0);
   HEAP32[$147>>2] = $145;
   $148 = $8;
   $149 = $4;
   $150 = ((($149)) + 21576|0);
   HEAP32[$150>>2] = $148;
   $151 = $4;
   $152 = ((($151)) + 21580|0);
   $153 = $4;
   $154 = ((($153)) + 21576|0);
   $155 = HEAP32[$154>>2]|0;
   $156 = (($152) + ($155)|0);
   ;HEAP8[$156>>0]=0|0;HEAP8[$156+1>>0]=0|0;HEAP8[$156+2>>0]=0|0;HEAP8[$156+3>>0]=0|0;HEAP8[$156+4>>0]=0|0;HEAP8[$156+5>>0]=0|0;HEAP8[$156+6>>0]=0|0;HEAP8[$156+7>>0]=0|0;
   $157 = $9;
   $158 = $11;
   $159 = (($157) + ($158))|0;
   $3 = $159;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  break;
 }
 case 1:  {
  $160 = $7;
  $161 = HEAP8[$160>>0]|0;
  $162 = $161&255;
  $163 = $162 >> 4;
  $164 = $163 & 3;
  $14 = $164;
  $165 = $14;
  $166 = ($165|0)!=(1);
  if ($166) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $167 = $4;
  $168 = ((($167)) + 21568|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = ($169|0)!=(0);
  if (!($170)) {
   $3 = -20;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $14 = 3;
  $171 = $7;
  $172 = HEAP8[$171>>0]|0;
  $173 = $172&255;
  $174 = $173 & 15;
  $175 = $174 << 6;
  $176 = $7;
  $177 = ((($176)) + 1|0);
  $178 = HEAP8[$177>>0]|0;
  $179 = $178&255;
  $180 = $179 >> 2;
  $181 = (($175) + ($180))|0;
  $12 = $181;
  $182 = $7;
  $183 = ((($182)) + 1|0);
  $184 = HEAP8[$183>>0]|0;
  $185 = $184&255;
  $186 = $185 & 3;
  $187 = $186 << 8;
  $188 = $7;
  $189 = ((($188)) + 2|0);
  $190 = HEAP8[$189>>0]|0;
  $191 = $190&255;
  $192 = (($187) + ($191))|0;
  $13 = $192;
  $193 = $13;
  $194 = $14;
  $195 = (($193) + ($194))|0;
  $196 = $6;
  $197 = ($195>>>0)>($196>>>0);
  if ($197) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $198 = $4;
  $199 = ((($198)) + 21580|0);
  $200 = $12;
  $201 = $7;
  $202 = $14;
  $203 = (($201) + ($202)|0);
  $204 = $13;
  $205 = $4;
  $206 = ((($205)) + 5132|0);
  $207 = (_HUFv06_decompress1X4_usingDTable($199,$200,$203,$204,$206)|0);
  $15 = $207;
  $208 = $15;
  $209 = (_ERR_isError_388($208)|0);
  $210 = ($209|0)!=(0);
  if ($210) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  } else {
   $211 = $4;
   $212 = ((($211)) + 21580|0);
   $213 = $4;
   $214 = ((($213)) + 21572|0);
   HEAP32[$214>>2] = $212;
   $215 = $12;
   $216 = $4;
   $217 = ((($216)) + 21576|0);
   HEAP32[$217>>2] = $215;
   $218 = $4;
   $219 = ((($218)) + 21580|0);
   $220 = $4;
   $221 = ((($220)) + 21576|0);
   $222 = HEAP32[$221>>2]|0;
   $223 = (($219) + ($222)|0);
   ;HEAP8[$223>>0]=0|0;HEAP8[$223+1>>0]=0|0;HEAP8[$223+2>>0]=0|0;HEAP8[$223+3>>0]=0|0;HEAP8[$223+4>>0]=0|0;HEAP8[$223+5>>0]=0|0;HEAP8[$223+6>>0]=0|0;HEAP8[$223+7>>0]=0|0;
   $224 = $13;
   $225 = $14;
   $226 = (($224) + ($225))|0;
   $3 = $226;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  break;
 }
 case 2:  {
  $227 = $7;
  $228 = HEAP8[$227>>0]|0;
  $229 = $228&255;
  $230 = $229 >> 4;
  $231 = $230 & 3;
  $17 = $231;
  $232 = $17;
  switch ($232|0) {
  case 3:  {
   $247 = $7;
   $248 = HEAP8[$247>>0]|0;
   $249 = $248&255;
   $250 = $249 & 15;
   $251 = $250 << 16;
   $252 = $7;
   $253 = ((($252)) + 1|0);
   $254 = HEAP8[$253>>0]|0;
   $255 = $254&255;
   $256 = $255 << 8;
   $257 = (($251) + ($256))|0;
   $258 = $7;
   $259 = ((($258)) + 2|0);
   $260 = HEAP8[$259>>0]|0;
   $261 = $260&255;
   $262 = (($257) + ($261))|0;
   $16 = $262;
   break;
  }
  case 2:  {
   $237 = $7;
   $238 = HEAP8[$237>>0]|0;
   $239 = $238&255;
   $240 = $239 & 15;
   $241 = $240 << 8;
   $242 = $7;
   $243 = ((($242)) + 1|0);
   $244 = HEAP8[$243>>0]|0;
   $245 = $244&255;
   $246 = (($241) + ($245))|0;
   $16 = $246;
   break;
  }
  default: {
   $17 = 1;
   $233 = $7;
   $234 = HEAP8[$233>>0]|0;
   $235 = $234&255;
   $236 = $235 & 31;
   $16 = $236;
  }
  }
  $263 = $17;
  $264 = $16;
  $265 = (($263) + ($264))|0;
  $266 = (($265) + 8)|0;
  $267 = $6;
  $268 = ($266>>>0)>($267>>>0);
  if (!($268)) {
   $296 = $7;
   $297 = $17;
   $298 = (($296) + ($297)|0);
   $299 = $4;
   $300 = ((($299)) + 21572|0);
   HEAP32[$300>>2] = $298;
   $301 = $16;
   $302 = $4;
   $303 = ((($302)) + 21576|0);
   HEAP32[$303>>2] = $301;
   $304 = $17;
   $305 = $16;
   $306 = (($304) + ($305))|0;
   $3 = $306;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  $269 = $16;
  $270 = $17;
  $271 = (($269) + ($270))|0;
  $272 = $6;
  $273 = ($271>>>0)>($272>>>0);
  if ($273) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  } else {
   $274 = $4;
   $275 = ((($274)) + 21580|0);
   $276 = $7;
   $277 = $17;
   $278 = (($276) + ($277)|0);
   $279 = $16;
   _memcpy(($275|0),($278|0),($279|0))|0;
   $280 = $4;
   $281 = ((($280)) + 21580|0);
   $282 = $4;
   $283 = ((($282)) + 21572|0);
   HEAP32[$283>>2] = $281;
   $284 = $16;
   $285 = $4;
   $286 = ((($285)) + 21576|0);
   HEAP32[$286>>2] = $284;
   $287 = $4;
   $288 = ((($287)) + 21580|0);
   $289 = $4;
   $290 = ((($289)) + 21576|0);
   $291 = HEAP32[$290>>2]|0;
   $292 = (($288) + ($291)|0);
   ;HEAP8[$292>>0]=0|0;HEAP8[$292+1>>0]=0|0;HEAP8[$292+2>>0]=0|0;HEAP8[$292+3>>0]=0|0;HEAP8[$292+4>>0]=0|0;HEAP8[$292+5>>0]=0|0;HEAP8[$292+6>>0]=0|0;HEAP8[$292+7>>0]=0|0;
   $293 = $17;
   $294 = $16;
   $295 = (($293) + ($294))|0;
   $3 = $295;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  break;
 }
 case 3:  {
  $307 = $7;
  $308 = HEAP8[$307>>0]|0;
  $309 = $308&255;
  $310 = $309 >> 4;
  $311 = $310 & 3;
  $19 = $311;
  $312 = $19;
  switch ($312|0) {
  case 3:  {
   $327 = $7;
   $328 = HEAP8[$327>>0]|0;
   $329 = $328&255;
   $330 = $329 & 15;
   $331 = $330 << 16;
   $332 = $7;
   $333 = ((($332)) + 1|0);
   $334 = HEAP8[$333>>0]|0;
   $335 = $334&255;
   $336 = $335 << 8;
   $337 = (($331) + ($336))|0;
   $338 = $7;
   $339 = ((($338)) + 2|0);
   $340 = HEAP8[$339>>0]|0;
   $341 = $340&255;
   $342 = (($337) + ($341))|0;
   $18 = $342;
   $343 = $6;
   $344 = ($343>>>0)<(4);
   if ($344) {
    $3 = -15;
    $366 = $3;
    STACKTOP = sp;return ($366|0);
   }
   break;
  }
  case 2:  {
   $317 = $7;
   $318 = HEAP8[$317>>0]|0;
   $319 = $318&255;
   $320 = $319 & 15;
   $321 = $320 << 8;
   $322 = $7;
   $323 = ((($322)) + 1|0);
   $324 = HEAP8[$323>>0]|0;
   $325 = $324&255;
   $326 = (($321) + ($325))|0;
   $18 = $326;
   break;
  }
  default: {
   $19 = 1;
   $313 = $7;
   $314 = HEAP8[$313>>0]|0;
   $315 = $314&255;
   $316 = $315 & 31;
   $18 = $316;
  }
  }
  $345 = $18;
  $346 = ($345>>>0)>(131072);
  if ($346) {
   $3 = -15;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  } else {
   $347 = $4;
   $348 = ((($347)) + 21580|0);
   $349 = $7;
   $350 = $19;
   $351 = (($349) + ($350)|0);
   $352 = HEAP8[$351>>0]|0;
   $353 = $352&255;
   $354 = $353&255;
   $355 = $18;
   $356 = (($355) + 8)|0;
   _memset(($348|0),($354|0),($356|0))|0;
   $357 = $4;
   $358 = ((($357)) + 21580|0);
   $359 = $4;
   $360 = ((($359)) + 21572|0);
   HEAP32[$360>>2] = $358;
   $361 = $18;
   $362 = $4;
   $363 = ((($362)) + 21576|0);
   HEAP32[$363>>2] = $361;
   $364 = $19;
   $365 = (($364) + 1)|0;
   $3 = $365;
   $366 = $3;
   STACKTOP = sp;return ($366|0);
  }
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function _ZSTDv06_buildSeqTable($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $12 = sp + 32|0;
 $19 = sp + 4|0;
 $20 = sp + 48|0;
 $10 = $0;
 $11 = $1;
 HEAP32[$12>>2] = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $22 = $11;
 L1: do {
  switch ($22|0) {
  case 1:  {
   $23 = $15;
   $24 = ($23|0)!=(0);
   if (!($24)) {
    $9 = -14;
    break L1;
   }
   $25 = $14;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = HEAP32[$12>>2]|0;
   $29 = ($27>>>0)>($28>>>0);
   if ($29) {
    $9 = -15;
    break L1;
   } else {
    $30 = $10;
    $31 = $14;
    $32 = HEAP8[$31>>0]|0;
    (_FSEv06_buildDTable_rle($30,$32)|0);
    $9 = 1;
    break L1;
   }
   break;
  }
  case 0:  {
   $33 = $10;
   $34 = $16;
   $35 = HEAP32[$12>>2]|0;
   $36 = $17;
   (_FSEv06_buildDTable($33,$34,$35,$36)|0);
   $9 = 0;
   break;
  }
  case 2:  {
   $37 = $18;
   $38 = ($37|0)!=(0);
   if ($38) {
    $9 = 0;
    break L1;
   } else {
    $9 = -15;
    break L1;
   }
   break;
  }
  default: {
   $39 = $14;
   $40 = $15;
   $41 = (_FSEv06_readNCount($20,$12,$19,$39,$40)|0);
   $21 = $41;
   $42 = $21;
   $43 = (_ERR_isError_388($42)|0);
   $44 = ($43|0)!=(0);
   if ($44) {
    $9 = -15;
    break L1;
   }
   $45 = HEAP32[$19>>2]|0;
   $46 = $13;
   $47 = ($45>>>0)>($46>>>0);
   if ($47) {
    $9 = -15;
    break L1;
   } else {
    $48 = $10;
    $49 = HEAP32[$12>>2]|0;
    $50 = HEAP32[$19>>2]|0;
    (_FSEv06_buildDTable($48,$20,$49,$50)|0);
    $51 = $21;
    $9 = $51;
    break L1;
   }
  }
  }
 } while(0);
 $52 = $9;
 STACKTOP = sp;return ($52|0);
}
function _ZSTDv06_decodeSeqHeaders($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $25 = $13;
 $15 = $25;
 $26 = $15;
 $27 = $14;
 $28 = (($26) + ($27)|0);
 $16 = $28;
 $29 = $15;
 $17 = $29;
 $30 = $14;
 $31 = ($30>>>0)<(1);
 if ($31) {
  $7 = -14;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 $32 = $17;
 $33 = ((($32)) + 1|0);
 $17 = $33;
 $34 = HEAP8[$32>>0]|0;
 $35 = $34&255;
 $18 = $35;
 $36 = $18;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $38 = $8;
  HEAP32[$38>>2] = 0;
  $7 = 1;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 $39 = $18;
 $40 = ($39|0)>(127);
 do {
  if ($40) {
   $41 = $18;
   $42 = ($41|0)==(255);
   $43 = $17;
   if ($42) {
    $44 = ((($43)) + 2|0);
    $45 = $16;
    $46 = ($44>>>0)>($45>>>0);
    if (!($46)) {
     $47 = $17;
     $48 = (_MEM_readLE16_402($47)|0);
     $49 = $48&65535;
     $50 = (($49) + 32512)|0;
     $18 = $50;
     $51 = $17;
     $52 = ((($51)) + 2|0);
     $17 = $52;
     break;
    }
    $7 = -14;
    $138 = $7;
    STACKTOP = sp;return ($138|0);
   } else {
    $53 = $16;
    $54 = ($43>>>0)>=($53>>>0);
    if (!($54)) {
     $55 = $18;
     $56 = (($55) - 128)|0;
     $57 = $56 << 8;
     $58 = $17;
     $59 = ((($58)) + 1|0);
     $17 = $59;
     $60 = HEAP8[$58>>0]|0;
     $61 = $60&255;
     $62 = (($57) + ($61))|0;
     $18 = $62;
     break;
    }
    $7 = -14;
    $138 = $7;
    STACKTOP = sp;return ($138|0);
   }
  }
 } while(0);
 $63 = $18;
 $64 = $8;
 HEAP32[$64>>2] = $63;
 $65 = $17;
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = $67 >> 6;
 $19 = $68;
 $69 = $17;
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = $71 >> 4;
 $73 = $72 & 3;
 $20 = $73;
 $74 = $17;
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $76 >> 2;
 $78 = $77 & 3;
 $21 = $78;
 $79 = $17;
 $80 = ((($79)) + 1|0);
 $17 = $80;
 $81 = $17;
 $82 = $16;
 $83 = ((($82)) + -3|0);
 $84 = ($81>>>0)>($83>>>0);
 if ($84) {
  $7 = -14;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 $85 = $9;
 $86 = $19;
 $87 = $17;
 $88 = $16;
 $89 = $17;
 $90 = $88;
 $91 = $89;
 $92 = (($90) - ($91))|0;
 $93 = $12;
 $94 = (_ZSTDv06_buildSeqTable($85,$86,35,9,$87,$92,6424,6,$93)|0);
 $22 = $94;
 $95 = $22;
 $96 = (_ERR_isError_388($95)|0);
 $97 = ($96|0)!=(0);
 if ($97) {
  $7 = -15;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 $98 = $22;
 $99 = $17;
 $100 = (($99) + ($98)|0);
 $17 = $100;
 $101 = $11;
 $102 = $20;
 $103 = $17;
 $104 = $16;
 $105 = $17;
 $106 = $104;
 $107 = $105;
 $108 = (($106) - ($107))|0;
 $109 = $12;
 $110 = (_ZSTDv06_buildSeqTable($101,$102,28,8,$103,$108,6496,5,$109)|0);
 $23 = $110;
 $111 = $23;
 $112 = (_ERR_isError_388($111)|0);
 $113 = ($112|0)!=(0);
 if ($113) {
  $7 = -15;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 $114 = $23;
 $115 = $17;
 $116 = (($115) + ($114)|0);
 $17 = $116;
 $117 = $10;
 $118 = $21;
 $119 = $17;
 $120 = $16;
 $121 = $17;
 $122 = $120;
 $123 = $121;
 $124 = (($122) - ($123))|0;
 $125 = $12;
 $126 = (_ZSTDv06_buildSeqTable($117,$118,52,9,$119,$124,6554,6,$125)|0);
 $24 = $126;
 $127 = $24;
 $128 = (_ERR_isError_388($127)|0);
 $129 = ($128|0)!=(0);
 if ($129) {
  $7 = -15;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 } else {
  $130 = $24;
  $131 = $17;
  $132 = (($131) + ($130)|0);
  $17 = $132;
  $133 = $17;
  $134 = $15;
  $135 = $133;
  $136 = $134;
  $137 = (($135) - ($136))|0;
  $7 = $137;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 return (0)|0;
}
function _ZSTDv06_execSequence($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $24 = $9;
 $25 = HEAP32[$2>>2]|0;
 $26 = (($24) + ($25)|0);
 $16 = $26;
 $27 = HEAP32[$2>>2]|0;
 $28 = ((($2)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + ($29))|0;
 $17 = $30;
 $31 = $9;
 $32 = $17;
 $33 = (($31) + ($32)|0);
 $18 = $33;
 $34 = $10;
 $35 = ((($34)) + -8|0);
 $19 = $35;
 $36 = $11;
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$2>>2]|0;
 $39 = (($37) + ($38)|0);
 $20 = $39;
 $40 = $16;
 $41 = ((($2)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (0 - ($42))|0;
 $44 = (($40) + ($43)|0);
 $21 = $44;
 $45 = $16;
 $46 = $19;
 $47 = ($45>>>0)>($46>>>0);
 if ($47) {
  $8 = -13;
  $206 = $8;
  STACKTOP = sp;return ($206|0);
 }
 $48 = $18;
 $49 = $10;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  $8 = -13;
  $206 = $8;
  STACKTOP = sp;return ($206|0);
 }
 $51 = $20;
 $52 = $12;
 $53 = ($51>>>0)>($52>>>0);
 if ($53) {
  $8 = -15;
  $206 = $8;
  STACKTOP = sp;return ($206|0);
 }
 $54 = $9;
 $55 = $11;
 $56 = HEAP32[$55>>2]|0;
 $57 = HEAP32[$2>>2]|0;
 _ZSTDv06_wildcopy($54,$56,$57);
 $58 = $16;
 $9 = $58;
 $59 = $20;
 $60 = $11;
 HEAP32[$60>>2] = $59;
 $61 = ((($2)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $16;
 $64 = $13;
 $65 = $63;
 $66 = $64;
 $67 = (($65) - ($66))|0;
 $68 = ($62>>>0)>($67>>>0);
 do {
  if ($68) {
   $69 = ((($2)) + 8|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = $16;
   $72 = $14;
   $73 = $71;
   $74 = $72;
   $75 = (($73) - ($74))|0;
   $76 = ($70>>>0)>($75>>>0);
   if ($76) {
    $8 = -15;
    $206 = $8;
    STACKTOP = sp;return ($206|0);
   }
   $77 = $15;
   $78 = $13;
   $79 = $21;
   $80 = $78;
   $81 = $79;
   $82 = (($80) - ($81))|0;
   $83 = (0 - ($82))|0;
   $84 = (($77) + ($83)|0);
   $21 = $84;
   $85 = $21;
   $86 = ((($2)) + 4|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = (($85) + ($87)|0);
   $89 = $15;
   $90 = ($88>>>0)<=($89>>>0);
   if ($90) {
    $91 = $16;
    $92 = $21;
    $93 = ((($2)) + 4|0);
    $94 = HEAP32[$93>>2]|0;
    _memmove(($91|0),($92|0),($94|0))|0;
    $95 = $17;
    $8 = $95;
    $206 = $8;
    STACKTOP = sp;return ($206|0);
   }
   $96 = $15;
   $97 = $21;
   $98 = $96;
   $99 = $97;
   $100 = (($98) - ($99))|0;
   $22 = $100;
   $101 = $16;
   $102 = $21;
   $103 = $22;
   _memmove(($101|0),($102|0),($103|0))|0;
   $104 = $16;
   $105 = $22;
   $106 = (($104) + ($105)|0);
   $9 = $106;
   $107 = $22;
   $108 = ((($2)) + 4|0);
   $109 = HEAP32[$108>>2]|0;
   $110 = (($109) - ($107))|0;
   HEAP32[$108>>2] = $110;
   $111 = $13;
   $21 = $111;
   $112 = $9;
   $113 = $19;
   $114 = ($112>>>0)>($113>>>0);
   if (!($114)) {
    $115 = ((($2)) + 4|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116>>>0)<(3);
    if (!($117)) {
     break;
    }
   }
   while(1) {
    $118 = $9;
    $119 = $18;
    $120 = ($118>>>0)<($119>>>0);
    if (!($120)) {
     break;
    }
    $121 = $21;
    $122 = ((($121)) + 1|0);
    $21 = $122;
    $123 = HEAP8[$121>>0]|0;
    $124 = $9;
    $125 = ((($124)) + 1|0);
    $9 = $125;
    HEAP8[$124>>0] = $123;
   }
   $126 = $17;
   $8 = $126;
   $206 = $8;
   STACKTOP = sp;return ($206|0);
  }
 } while(0);
 $127 = ((($2)) + 8|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ($128>>>0)<(8);
 if ($129) {
  $130 = ((($2)) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = (3768 + ($131<<2)|0);
  $133 = HEAP32[$132>>2]|0;
  $23 = $133;
  $134 = $21;
  $135 = HEAP8[$134>>0]|0;
  $136 = $9;
  HEAP8[$136>>0] = $135;
  $137 = $21;
  $138 = ((($137)) + 1|0);
  $139 = HEAP8[$138>>0]|0;
  $140 = $9;
  $141 = ((($140)) + 1|0);
  HEAP8[$141>>0] = $139;
  $142 = $21;
  $143 = ((($142)) + 2|0);
  $144 = HEAP8[$143>>0]|0;
  $145 = $9;
  $146 = ((($145)) + 2|0);
  HEAP8[$146>>0] = $144;
  $147 = $21;
  $148 = ((($147)) + 3|0);
  $149 = HEAP8[$148>>0]|0;
  $150 = $9;
  $151 = ((($150)) + 3|0);
  HEAP8[$151>>0] = $149;
  $152 = ((($2)) + 8|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = (3800 + ($153<<2)|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $21;
  $157 = (($156) + ($155)|0);
  $21 = $157;
  $158 = $9;
  $159 = ((($158)) + 4|0);
  $160 = $21;
  _ZSTDv06_copy4($159,$160);
  $161 = $23;
  $162 = $21;
  $163 = (0 - ($161))|0;
  $164 = (($162) + ($163)|0);
  $21 = $164;
 } else {
  $165 = $9;
  $166 = $21;
  _ZSTDv06_copy8($165,$166);
 }
 $167 = $9;
 $168 = ((($167)) + 8|0);
 $9 = $168;
 $169 = $21;
 $170 = ((($169)) + 8|0);
 $21 = $170;
 $171 = $18;
 $172 = $10;
 $173 = ((($172)) + -13|0);
 $174 = ($171>>>0)>($173>>>0);
 $175 = $9;
 L35: do {
  if ($174) {
   $176 = $19;
   $177 = ($175>>>0)<($176>>>0);
   if ($177) {
    $178 = $9;
    $179 = $21;
    $180 = $19;
    $181 = $9;
    $182 = $180;
    $183 = $181;
    $184 = (($182) - ($183))|0;
    _ZSTDv06_wildcopy($178,$179,$184);
    $185 = $19;
    $186 = $9;
    $187 = $185;
    $188 = $186;
    $189 = (($187) - ($188))|0;
    $190 = $21;
    $191 = (($190) + ($189)|0);
    $21 = $191;
    $192 = $19;
    $9 = $192;
   }
   while(1) {
    $193 = $9;
    $194 = $18;
    $195 = ($193>>>0)<($194>>>0);
    if (!($195)) {
     break L35;
    }
    $196 = $21;
    $197 = ((($196)) + 1|0);
    $21 = $197;
    $198 = HEAP8[$196>>0]|0;
    $199 = $9;
    $200 = ((($199)) + 1|0);
    $9 = $200;
    HEAP8[$199>>0] = $198;
   }
  } else {
   $201 = $21;
   $202 = ((($2)) + 4|0);
   $203 = HEAP32[$202>>2]|0;
   $204 = (($203) - 8)|0;
   _ZSTDv06_wildcopy($175,$201,$204);
  }
 } while(0);
 $205 = $17;
 $8 = $205;
 $206 = $8;
 STACKTOP = sp;return ($206|0);
}
function _ZSTDv06_wildcopy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $6 = $9;
 $10 = $3;
 $7 = $10;
 $11 = $7;
 $12 = $5;
 $13 = (($11) + ($12)|0);
 $8 = $13;
 while(1) {
  $14 = $7;
  $15 = $6;
  _ZSTDv06_copy8($14,$15);
  $16 = $7;
  $17 = ((($16)) + 8|0);
  $7 = $17;
  $18 = $6;
  $19 = ((($18)) + 8|0);
  $6 = $19;
  $20 = $7;
  $21 = $8;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ZSTDv06_copy4($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;
 STACKTOP = sp;return;
}
function _ZSTDv06_copy8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$4+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$4+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$4+7>>0]=HEAP8[$5+7>>0]|0;
 STACKTOP = sp;return;
}
function _ZSTDv06_checkContinuity($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 21520|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)!=($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 21520|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 21532|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = $2;
 $16 = ((($15)) + 21520|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 21524|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $17;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = (0 - ($23))|0;
 $25 = (($14) + ($24)|0);
 $26 = $2;
 $27 = ((($26)) + 21528|0);
 HEAP32[$27>>2] = $25;
 $28 = $3;
 $29 = $2;
 $30 = ((($29)) + 21524|0);
 HEAP32[$30>>2] = $28;
 $31 = $3;
 $32 = $2;
 $33 = ((($32)) + 21520|0);
 HEAP32[$33>>2] = $31;
 STACKTOP = sp;return;
}
function _ZSTDv06_decompressBlock_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $11 = $13;
 $14 = $10;
 $15 = ($14>>>0)>=(131072);
 if ($15) {
  $5 = -14;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 $16 = $6;
 $17 = $9;
 $18 = $10;
 $19 = (_ZSTDv06_decodeLiteralsBlock($16,$17,$18)|0);
 $12 = $19;
 $20 = $12;
 $21 = (_ERR_isError_388($20)|0);
 $22 = ($21|0)!=(0);
 $23 = $12;
 if ($22) {
  $5 = $23;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 } else {
  $24 = $11;
  $25 = (($24) + ($23)|0);
  $11 = $25;
  $26 = $12;
  $27 = $10;
  $28 = (($27) - ($26))|0;
  $10 = $28;
  $29 = $6;
  $30 = $7;
  $31 = $8;
  $32 = $11;
  $33 = $10;
  $34 = (_ZSTDv06_decompressSequences($29,$30,$31,$32,$33)|0);
  $5 = $34;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _ZSTDv06_decompressSequences($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $$byval_copy = sp + 164|0;
 $16 = sp + 116|0;
 $24 = sp + 84|0;
 $26 = sp + 68|0;
 $27 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $32 = $9;
 $11 = $32;
 $33 = $11;
 $34 = $10;
 $35 = (($33) + ($34)|0);
 $12 = $35;
 $36 = $7;
 $13 = $36;
 $37 = $13;
 $38 = $8;
 $39 = (($37) + ($38)|0);
 $14 = $39;
 $40 = $13;
 $15 = $40;
 $41 = $6;
 $42 = ((($41)) + 21572|0);
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$16>>2] = $43;
 $44 = HEAP32[$16>>2]|0;
 $45 = $6;
 $46 = ((($45)) + 21576|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($44) + ($47)|0);
 $17 = $48;
 $49 = $6;
 $18 = $49;
 $50 = $6;
 $51 = ((($50)) + 3080|0);
 $19 = $51;
 $52 = $6;
 $53 = ((($52)) + 2052|0);
 $20 = $53;
 $54 = $6;
 $55 = ((($54)) + 21524|0);
 $56 = HEAP32[$55>>2]|0;
 $21 = $56;
 $57 = $6;
 $58 = ((($57)) + 21528|0);
 $59 = HEAP32[$58>>2]|0;
 $22 = $59;
 $60 = $6;
 $61 = ((($60)) + 21532|0);
 $62 = HEAP32[$61>>2]|0;
 $23 = $62;
 $63 = $18;
 $64 = $19;
 $65 = $20;
 $66 = $6;
 $67 = ((($66)) + 21568|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = $11;
 $70 = $10;
 $71 = (_ZSTDv06_decodeSeqHeaders($24,$63,$64,$65,$68,$69,$70)|0);
 $25 = $71;
 $72 = $25;
 $73 = (_ERR_isError_388($72)|0);
 $74 = ($73|0)!=(0);
 $75 = $25;
 if ($74) {
  $5 = $75;
  $151 = $5;
  STACKTOP = sp;return ($151|0);
 }
 $76 = $11;
 $77 = (($76) + ($75)|0);
 $11 = $77;
 $78 = $6;
 $79 = ((($78)) + 21568|0);
 HEAP32[$79>>2] = 0;
 $80 = HEAP32[$24>>2]|0;
 $81 = ($80|0)!=(0);
 if ($81) {
  ;HEAP32[$26>>2]=0|0;HEAP32[$26+4>>2]=0|0;HEAP32[$26+8>>2]=0|0;
  $82 = ((($26)) + 8|0);
  HEAP32[$82>>2] = 1;
  $28 = 0;
  while(1) {
   $83 = $28;
   $84 = ($83>>>0)<(3);
   if (!($84)) {
    break;
   }
   $85 = ((($27)) + 40|0);
   $86 = $28;
   $87 = (($85) + ($86<<2)|0);
   HEAP32[$87>>2] = 1;
   $88 = $28;
   $89 = (($88) + 1)|0;
   $28 = $89;
  }
  $90 = $11;
  $91 = $12;
  $92 = $11;
  $93 = $91;
  $94 = $92;
  $95 = (($93) - ($94))|0;
  $96 = (_BITv06_initDStream($27,$90,$95)|0);
  $29 = $96;
  $97 = $29;
  $98 = (_ERR_isError_388($97)|0);
  $99 = ($98|0)!=(0);
  if ($99) {
   $5 = -15;
   $151 = $5;
   STACKTOP = sp;return ($151|0);
  }
  $100 = ((($27)) + 16|0);
  $101 = $18;
  _FSEv06_initDState($100,$27,$101);
  $102 = ((($27)) + 24|0);
  $103 = $20;
  _FSEv06_initDState($102,$27,$103);
  $104 = ((($27)) + 32|0);
  $105 = $19;
  _FSEv06_initDState($104,$27,$105);
  while(1) {
   $106 = (_BITv06_reloadDStream($27)|0);
   $107 = ($106>>>0)<=(2);
   $108 = HEAP32[$24>>2]|0;
   $109 = ($108|0)!=(0);
   $110 = $107 ? $109 : 0;
   $111 = HEAP32[$24>>2]|0;
   if (!($110)) {
    break;
   }
   $112 = (($111) + -1)|0;
   HEAP32[$24>>2] = $112;
   _ZSTDv06_decodeSequence($26,$27);
   $113 = $15;
   $114 = $14;
   $115 = $17;
   $116 = $21;
   $117 = $22;
   $118 = $23;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$26>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$26+8>>2]|0;
   $119 = (_ZSTDv06_execSequence($113,$114,$$byval_copy,$16,$115,$116,$117,$118)|0);
   $30 = $119;
   $120 = $30;
   $121 = (_ERR_isError_388($120)|0);
   $122 = ($121|0)!=(0);
   $123 = $30;
   if ($122) {
    label = 12;
    break;
   }
   $124 = $15;
   $125 = (($124) + ($123)|0);
   $15 = $125;
  }
  if ((label|0) == 12) {
   $5 = $123;
   $151 = $5;
   STACKTOP = sp;return ($151|0);
  }
  $126 = ($111|0)!=(0);
  if ($126) {
   $5 = -15;
   $151 = $5;
   STACKTOP = sp;return ($151|0);
  }
 }
 $127 = $17;
 $128 = HEAP32[$16>>2]|0;
 $129 = $127;
 $130 = $128;
 $131 = (($129) - ($130))|0;
 $31 = $131;
 $132 = HEAP32[$16>>2]|0;
 $133 = $17;
 $134 = ($132>>>0)>($133>>>0);
 if ($134) {
  $5 = -15;
  $151 = $5;
  STACKTOP = sp;return ($151|0);
 }
 $135 = $15;
 $136 = $31;
 $137 = (($135) + ($136)|0);
 $138 = $14;
 $139 = ($137>>>0)>($138>>>0);
 if ($139) {
  $5 = -13;
  $151 = $5;
  STACKTOP = sp;return ($151|0);
 } else {
  $140 = $15;
  $141 = HEAP32[$16>>2]|0;
  $142 = $31;
  _memcpy(($140|0),($141|0),($142|0))|0;
  $143 = $31;
  $144 = $15;
  $145 = (($144) + ($143)|0);
  $15 = $145;
  $146 = $15;
  $147 = $13;
  $148 = $146;
  $149 = $147;
  $150 = (($148) - ($149))|0;
  $5 = $150;
  $151 = $5;
  STACKTOP = sp;return ($151|0);
 }
 return (0)|0;
}
function _ZSTDv06_decodeSequence($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $13 = $3;
 $14 = ((($13)) + 16|0);
 $15 = (_FSEv06_peekSymbol($14)|0);
 $16 = $15&255;
 $4 = $16;
 $17 = $3;
 $18 = ((($17)) + 32|0);
 $19 = (_FSEv06_peekSymbol($18)|0);
 $20 = $19&255;
 $5 = $20;
 $21 = $3;
 $22 = ((($21)) + 24|0);
 $23 = (_FSEv06_peekSymbol($22)|0);
 $24 = $23&255;
 $6 = $24;
 $25 = $4;
 $26 = (3832 + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $7 = $27;
 $28 = $5;
 $29 = (3976 + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $8 = $30;
 $31 = $6;
 $9 = $31;
 $32 = $7;
 $33 = $8;
 $34 = (($32) + ($33))|0;
 $35 = $9;
 $36 = (($34) + ($35))|0;
 $10 = $36;
 $37 = $6;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $6;
  $40 = (4188 + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $3;
  $43 = $9;
  $44 = (_BITv06_readBits($42,$43)|0);
  $45 = (($41) + ($44))|0;
  $11 = $45;
  $46 = (_MEM_32bits_397()|0);
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $3;
   (_BITv06_reloadDStream($48)|0);
  }
 } else {
  $11 = 0;
 }
 $49 = $11;
 $50 = ($49>>>0)<(3);
 do {
  if ($50) {
   $51 = $4;
   $52 = ($51|0)==(0);
   $53 = $11;
   $54 = ($53>>>0)<=(1);
   $or$cond = $52 & $54;
   if ($or$cond) {
    $55 = $11;
    $56 = (1 - ($55))|0;
    $11 = $56;
   }
   $57 = $11;
   $58 = ($57|0)!=(0);
   $59 = $3;
   $60 = ((($59)) + 40|0);
   if (!($58)) {
    $82 = HEAP32[$60>>2]|0;
    $11 = $82;
    break;
   }
   $61 = $11;
   $62 = (($60) + ($61<<2)|0);
   $63 = HEAP32[$62>>2]|0;
   $12 = $63;
   $64 = $11;
   $65 = ($64|0)!=(1);
   if ($65) {
    $66 = $3;
    $67 = ((($66)) + 40|0);
    $68 = ((($67)) + 4|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $3;
    $71 = ((($70)) + 40|0);
    $72 = ((($71)) + 8|0);
    HEAP32[$72>>2] = $69;
   }
   $73 = $3;
   $74 = ((($73)) + 40|0);
   $75 = HEAP32[$74>>2]|0;
   $76 = $3;
   $77 = ((($76)) + 40|0);
   $78 = ((($77)) + 4|0);
   HEAP32[$78>>2] = $75;
   $79 = $12;
   $11 = $79;
   $80 = $3;
   $81 = ((($80)) + 40|0);
   HEAP32[$81>>2] = $79;
  } else {
   $83 = $11;
   $84 = (($83) - 2)|0;
   $11 = $84;
   $85 = $3;
   $86 = ((($85)) + 40|0);
   $87 = ((($86)) + 4|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $3;
   $90 = ((($89)) + 40|0);
   $91 = ((($90)) + 8|0);
   HEAP32[$91>>2] = $88;
   $92 = $3;
   $93 = ((($92)) + 40|0);
   $94 = HEAP32[$93>>2]|0;
   $95 = $3;
   $96 = ((($95)) + 40|0);
   $97 = ((($96)) + 4|0);
   HEAP32[$97>>2] = $94;
   $98 = $11;
   $99 = $3;
   $100 = ((($99)) + 40|0);
   HEAP32[$100>>2] = $98;
  }
 } while(0);
 $101 = $11;
 $102 = $2;
 $103 = ((($102)) + 8|0);
 HEAP32[$103>>2] = $101;
 $104 = $5;
 $105 = (4304 + ($104<<2)|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = (($106) + 3)|0;
 $108 = $5;
 $109 = ($108>>>0)>(31);
 if ($109) {
  $110 = $3;
  $111 = $8;
  $112 = (_BITv06_readBits($110,$111)|0);
  $114 = $112;
 } else {
  $114 = 0;
 }
 $113 = (($107) + ($114))|0;
 $115 = $2;
 $116 = ((($115)) + 4|0);
 HEAP32[$116>>2] = $113;
 $117 = (_MEM_32bits_397()|0);
 $118 = ($117|0)!=(0);
 if ($118) {
  $119 = $8;
  $120 = $7;
  $121 = (($119) + ($120))|0;
  $122 = ($121>>>0)>(24);
  if ($122) {
   $123 = $3;
   (_BITv06_reloadDStream($123)|0);
  }
 }
 $124 = $4;
 $125 = (4516 + ($124<<2)|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = $4;
 $128 = ($127>>>0)>(15);
 if ($128) {
  $129 = $3;
  $130 = $7;
  $131 = (_BITv06_readBits($129,$130)|0);
  $133 = $131;
 } else {
  $133 = 0;
 }
 $132 = (($126) + ($133))|0;
 $134 = $2;
 HEAP32[$134>>2] = $132;
 $135 = (_MEM_32bits_397()|0);
 $136 = ($135|0)!=(0);
 $137 = $10;
 $138 = ($137>>>0)>(31);
 $or$cond3 = $136 | $138;
 if ($or$cond3) {
  $139 = $3;
  (_BITv06_reloadDStream($139)|0);
 }
 $140 = $3;
 $141 = ((($140)) + 16|0);
 $142 = $3;
 _FSEv06_updateState($141,$142);
 $143 = $3;
 $144 = ((($143)) + 32|0);
 $145 = $3;
 _FSEv06_updateState($144,$145);
 $146 = (_MEM_32bits_397()|0);
 $147 = ($146|0)!=(0);
 if (!($147)) {
  $149 = $3;
  $150 = ((($149)) + 24|0);
  $151 = $3;
  _FSEv06_updateState($150,$151);
  STACKTOP = sp;return;
 }
 $148 = $3;
 (_BITv06_reloadDStream($148)|0);
 $149 = $3;
 $150 = ((($149)) + 24|0);
 $151 = $3;
 _FSEv06_updateState($150,$151);
 STACKTOP = sp;return;
}
function _FSEv06_peekSymbol($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7<<2)|0);
 ;HEAP16[$2>>1]=HEAP16[$8>>1]|0;HEAP16[$2+2>>1]=HEAP16[$8+2>>1]|0;
 $9 = ((($2)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 STACKTOP = sp;return ($10|0);
}
function _FSEv06_updateState($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + ($11<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$12>>1]|0;HEAP16[$4+2>>1]=HEAP16[$12+2>>1]|0;
 $13 = ((($4)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $5 = $15;
 $16 = $3;
 $17 = $5;
 $18 = (_BITv06_readBits($16,$17)|0);
 $6 = $18;
 $19 = HEAP16[$4>>1]|0;
 $20 = $19&65535;
 $21 = $6;
 $22 = (($20) + ($21))|0;
 $23 = $2;
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function _ZSTDv06_decompressFrame($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $17 = sp + 16|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $21 = $9;
 $11 = $21;
 $22 = $11;
 $23 = $10;
 $24 = (($22) + ($23)|0);
 $12 = $24;
 $25 = $7;
 $13 = $25;
 $26 = $13;
 $14 = $26;
 $27 = $13;
 $28 = $8;
 $29 = (($27) + ($28)|0);
 $15 = $29;
 $30 = $10;
 $16 = $30;
 ;HEAP32[$17>>2]=0|0;HEAP32[$17+4>>2]=0|0;
 $31 = $10;
 $32 = ($31>>>0)<(8);
 do {
  if ($32) {
   $5 = -14;
  } else {
   $33 = $9;
   $34 = (_ZSTDv06_frameHeaderSize($33,5)|0);
   $18 = $34;
   $35 = $18;
   $36 = (_ERR_isError_388($35)|0);
   $37 = ($36|0)!=(0);
   if ($37) {
    $38 = $18;
    $5 = $38;
    break;
   }
   $39 = $10;
   $40 = $18;
   $41 = (($40) + 3)|0;
   $42 = ($39>>>0)<($41>>>0);
   if ($42) {
    $5 = -14;
    break;
   }
   $43 = $6;
   $44 = $9;
   $45 = $18;
   $46 = (_ZSTDv06_decodeFrameHeader($43,$44,$45)|0);
   $47 = ($46|0)!=(0);
   if ($47) {
    $5 = -15;
    break;
   }
   $48 = $18;
   $49 = $11;
   $50 = (($49) + ($48)|0);
   $11 = $50;
   $51 = $18;
   $52 = $16;
   $53 = (($52) - ($51))|0;
   $16 = $53;
   L13: while(1) {
    $19 = 0;
    $54 = $11;
    $55 = $12;
    $56 = $11;
    $57 = $55;
    $58 = $56;
    $59 = (($57) - ($58))|0;
    $60 = (_ZSTDv06_getcBlockSize($54,$59,$17)|0);
    $20 = $60;
    $61 = $20;
    $62 = (_ERR_isError_388($61)|0);
    $63 = ($62|0)!=(0);
    if ($63) {
     label = 11;
     break;
    }
    $65 = $11;
    $66 = ((($65)) + 3|0);
    $11 = $66;
    $67 = $16;
    $68 = (($67) - 3)|0;
    $16 = $68;
    $69 = $20;
    $70 = $16;
    $71 = ($69>>>0)>($70>>>0);
    if ($71) {
     label = 13;
     break;
    }
    $72 = HEAP32[$17>>2]|0;
    switch ($72|0) {
    case 2:  {
     label = 17;
     break L13;
     break;
    }
    case 0:  {
     $73 = $6;
     $74 = $14;
     $75 = $15;
     $76 = $14;
     $77 = $75;
     $78 = $76;
     $79 = (($77) - ($78))|0;
     $80 = $11;
     $81 = $20;
     $82 = (_ZSTDv06_decompressBlock_internal($73,$74,$79,$80,$81)|0);
     $19 = $82;
     break;
    }
    case 1:  {
     $83 = $14;
     $84 = $15;
     $85 = $14;
     $86 = $84;
     $87 = $85;
     $88 = (($86) - ($87))|0;
     $89 = $11;
     $90 = $20;
     $91 = (_ZSTDv06_copyRawBlock($83,$88,$89,$90)|0);
     $19 = $91;
     break;
    }
    case 3:  {
     $92 = $16;
     $93 = ($92|0)!=(0);
     if ($93) {
      label = 19;
      break L13;
     }
     break;
    }
    default: {
     label = 20;
     break L13;
    }
    }
    $94 = $20;
    $95 = ($94|0)==(0);
    if ($95) {
     label = 25;
     break;
    }
    $96 = $19;
    $97 = (_ERR_isError_388($96)|0);
    $98 = ($97|0)!=(0);
    $99 = $19;
    if ($98) {
     label = 23;
     break;
    }
    $100 = $14;
    $101 = (($100) + ($99)|0);
    $14 = $101;
    $102 = $20;
    $103 = $11;
    $104 = (($103) + ($102)|0);
    $11 = $104;
    $105 = $20;
    $106 = $16;
    $107 = (($106) - ($105))|0;
    $16 = $107;
   }
   if ((label|0) == 11) {
    $64 = $20;
    $5 = $64;
    break;
   }
   else if ((label|0) == 13) {
    $5 = -14;
    break;
   }
   else if ((label|0) == 17) {
    $5 = -1;
    break;
   }
   else if ((label|0) == 19) {
    $5 = -14;
    break;
   }
   else if ((label|0) == 20) {
    $5 = -1;
    break;
   }
   else if ((label|0) == 23) {
    $5 = $99;
    break;
   }
   else if ((label|0) == 25) {
    $108 = $14;
    $109 = $13;
    $110 = $108;
    $111 = $109;
    $112 = (($110) - ($111))|0;
    $5 = $112;
    break;
   }
  }
 } while(0);
 $113 = $5;
 STACKTOP = sp;return ($113|0);
}
function _ZSTDv06_decodeFrameHeader($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 21544|0);
 $10 = $5;
 $11 = $6;
 $12 = (_ZSTDv06_getFrameParams($9,$10,$11)|0);
 $7 = $12;
 $13 = (_MEM_32bits_397()|0);
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = $4;
  $16 = ((($15)) + 21544|0);
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18>>>0)>(25);
  if ($19) {
   $3 = -6;
   $21 = $3;
   STACKTOP = sp;return ($21|0);
  }
 }
 $20 = $7;
 $3 = $20;
 $21 = $3;
 STACKTOP = sp;return ($21|0);
}
function _ZSTDv06_copyRawBlock($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $8;
 $10 = $6;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $4 = -13;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 } else {
  $12 = $5;
  $13 = $7;
  $14 = $8;
  _memcpy(($12|0),($13|0),($14|0))|0;
  $15 = $8;
  $4 = $15;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _ZSTDv06_decompress_usingDict($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $12;
 $16 = $13;
 (_ZSTDv06_decompressBegin_usingDict($14,$15,$16)|0);
 $17 = $7;
 $18 = $8;
 _ZSTDv06_checkContinuity($17,$18);
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $24 = (_ZSTDv06_decompressFrame($19,$20,$21,$22,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _ZSTDv06_decompressBegin_usingDict($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = (_ZSTDv06_decompressBegin($9)|0);
 $7 = $10;
 $11 = $7;
 $12 = (_ERR_isError_388($11)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $7;
  $3 = $14;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 $15 = $5;
 $16 = ($15|0)!=(0|0);
 $17 = $6;
 $18 = ($17|0)!=(0);
 $or$cond = $16 & $18;
 if ($or$cond) {
  $19 = $4;
  $20 = $5;
  $21 = $6;
  $22 = (_ZSTDv06_decompress_insertDictionary($19,$20,$21)|0);
  $8 = $22;
  $23 = $8;
  $24 = (_ERR_isError_388($23)|0);
  $25 = ($24|0)!=(0);
  if ($25) {
   $3 = -20;
   $26 = $3;
   STACKTOP = sp;return ($26|0);
  }
 }
 $3 = 0;
 $26 = $3;
 STACKTOP = sp;return ($26|0);
}
function _ZSTDv06_decompress_insertDictionary($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $5;
 $10 = (_MEM_readLE32_391($9)|0);
 $8 = $10;
 $11 = $8;
 $12 = ($11|0)!=(-332356554);
 if ($12) {
  $13 = $4;
  $14 = $5;
  $15 = $6;
  _ZSTDv06_refDictContent($13,$14,$15);
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 $16 = $5;
 $17 = ((($16)) + 4|0);
 $5 = $17;
 $18 = $6;
 $19 = (($18) - 4)|0;
 $6 = $19;
 $20 = $4;
 $21 = $5;
 $22 = $6;
 $23 = (_ZSTDv06_loadEntropy($20,$21,$22)|0);
 $7 = $23;
 $24 = $7;
 $25 = (_ERR_isError_388($24)|0);
 $26 = ($25|0)!=(0);
 if ($26) {
  $3 = -20;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 } else {
  $27 = $5;
  $28 = $7;
  $29 = (($27) + ($28)|0);
  $5 = $29;
  $30 = $7;
  $31 = $6;
  $32 = (($31) - ($30))|0;
  $6 = $32;
  $33 = $4;
  $34 = $5;
  $35 = $6;
  _ZSTDv06_refDictContent($33,$34,$35);
  $3 = 0;
  $36 = $3;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _ZSTDv06_refDictContent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 21520|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ((($9)) + 21532|0);
 HEAP32[$10>>2] = $8;
 $11 = $4;
 $12 = $3;
 $13 = ((($12)) + 21520|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 21524|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (0 - ($20))|0;
 $22 = (($11) + ($21)|0);
 $23 = $3;
 $24 = ((($23)) + 21528|0);
 HEAP32[$24>>2] = $22;
 $25 = $4;
 $26 = $3;
 $27 = ((($26)) + 21524|0);
 HEAP32[$27>>2] = $25;
 $28 = $4;
 $29 = $5;
 $30 = (($28) + ($29)|0);
 $31 = $3;
 $32 = ((($31)) + 21520|0);
 HEAP32[$32>>2] = $30;
 STACKTOP = sp;return;
}
function _ZSTDv06_loadEntropy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $11 = sp + 250|0;
 $12 = sp + 32|0;
 $13 = sp + 28|0;
 $15 = sp + 144|0;
 $16 = sp + 20|0;
 $17 = sp + 16|0;
 $19 = sp + 72|0;
 $20 = sp + 8|0;
 $21 = sp + 4|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $23 = $4;
 $24 = ((($23)) + 5132|0);
 $25 = $5;
 $26 = $6;
 $27 = (_HUFv06_readDTableX4($24,$25,$26)|0);
 $7 = $27;
 $28 = $7;
 $29 = (_ERR_isError_388($28)|0);
 $30 = ($29|0)!=(0);
 if ($30) {
  $3 = -20;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 }
 $31 = $5;
 $32 = $7;
 $33 = (($31) + ($32)|0);
 $5 = $33;
 $34 = $7;
 $35 = $6;
 $36 = (($35) - ($34))|0;
 $6 = $36;
 HEAP32[$12>>2] = 28;
 $37 = $5;
 $38 = $6;
 $39 = (_FSEv06_readNCount($11,$12,$13,$37,$38)|0);
 $8 = $39;
 $40 = $8;
 $41 = (_ERR_isError_388($40)|0);
 $42 = ($41|0)!=(0);
 if ($42) {
  $3 = -20;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 }
 $43 = HEAP32[$13>>2]|0;
 $44 = ($43>>>0)>(8);
 if ($44) {
  $3 = -20;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 }
 $45 = $4;
 $46 = ((($45)) + 2052|0);
 $47 = HEAP32[$12>>2]|0;
 $48 = HEAP32[$13>>2]|0;
 $49 = (_FSEv06_buildDTable($46,$11,$47,$48)|0);
 $14 = $49;
 $50 = $14;
 $51 = (_ERR_isError_388($50)|0);
 $52 = ($51|0)!=(0);
 if ($52) {
  $3 = -20;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 }
 $53 = $5;
 $54 = $8;
 $55 = (($53) + ($54)|0);
 $5 = $55;
 $56 = $8;
 $57 = $6;
 $58 = (($57) - ($56))|0;
 $6 = $58;
 HEAP32[$16>>2] = 52;
 $59 = $5;
 $60 = $6;
 $61 = (_FSEv06_readNCount($15,$16,$17,$59,$60)|0);
 $9 = $61;
 $62 = $9;
 $63 = (_ERR_isError_388($62)|0);
 $64 = ($63|0)!=(0);
 if ($64) {
  $3 = -20;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 }
 $65 = HEAP32[$17>>2]|0;
 $66 = ($65>>>0)>(9);
 if ($66) {
  $3 = -20;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 }
 $67 = $4;
 $68 = ((($67)) + 3080|0);
 $69 = HEAP32[$16>>2]|0;
 $70 = HEAP32[$17>>2]|0;
 $71 = (_FSEv06_buildDTable($68,$15,$69,$70)|0);
 $18 = $71;
 $72 = $18;
 $73 = (_ERR_isError_388($72)|0);
 $74 = ($73|0)!=(0);
 if ($74) {
  $3 = -20;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 }
 $75 = $5;
 $76 = $9;
 $77 = (($75) + ($76)|0);
 $5 = $77;
 $78 = $9;
 $79 = $6;
 $80 = (($79) - ($78))|0;
 $6 = $80;
 HEAP32[$20>>2] = 35;
 $81 = $5;
 $82 = $6;
 $83 = (_FSEv06_readNCount($19,$20,$21,$81,$82)|0);
 $10 = $83;
 $84 = $10;
 $85 = (_ERR_isError_388($84)|0);
 $86 = ($85|0)!=(0);
 if ($86) {
  $3 = -20;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 }
 $87 = HEAP32[$21>>2]|0;
 $88 = ($87>>>0)>(9);
 if ($88) {
  $3 = -20;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 }
 $89 = $4;
 $90 = HEAP32[$20>>2]|0;
 $91 = HEAP32[$21>>2]|0;
 $92 = (_FSEv06_buildDTable($89,$19,$90,$91)|0);
 $22 = $92;
 $93 = $22;
 $94 = (_ERR_isError_388($93)|0);
 $95 = ($94|0)!=(0);
 if ($95) {
  $3 = -20;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 } else {
  $96 = $4;
  $97 = ((($96)) + 21568|0);
  HEAP32[$97>>2] = 1;
  $98 = $7;
  $99 = $8;
  $100 = (($98) + ($99))|0;
  $101 = $9;
  $102 = (($100) + ($101))|0;
  $103 = $10;
  $104 = (($102) + ($103))|0;
  $3 = $104;
  $105 = $3;
  STACKTOP = sp;return ($105|0);
 }
 return (0)|0;
}
function _ZSTDv06_findFrameCompressedSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $7 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $5 = $10;
 $11 = $4;
 $6 = $11;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;
 $12 = $3;
 $13 = (_ZSTDv06_frameHeaderSize($12,5)|0);
 $8 = $13;
 $14 = $8;
 $15 = (_ERR_isError_388($14)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $8;
  $2 = $17;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 $18 = $3;
 $19 = (_MEM_readLE32_391($18)|0);
 $20 = ($19|0)!=(-47205082);
 if ($20) {
  $2 = -2;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 $21 = $4;
 $22 = $8;
 $23 = (($22) + 3)|0;
 $24 = ($21>>>0)<($23>>>0);
 if ($24) {
  $2 = -14;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 $25 = $8;
 $26 = $5;
 $27 = (($26) + ($25)|0);
 $5 = $27;
 $28 = $8;
 $29 = $6;
 $30 = (($29) - ($28))|0;
 $6 = $30;
 while(1) {
  $31 = $5;
  $32 = $6;
  $33 = (_ZSTDv06_getcBlockSize($31,$32,$7)|0);
  $9 = $33;
  $34 = $9;
  $35 = (_ERR_isError_388($34)|0);
  $36 = ($35|0)!=(0);
  if ($36) {
   label = 9;
   break;
  }
  $38 = $5;
  $39 = ((($38)) + 3|0);
  $5 = $39;
  $40 = $6;
  $41 = (($40) - 3)|0;
  $6 = $41;
  $42 = $9;
  $43 = $6;
  $44 = ($42>>>0)>($43>>>0);
  if ($44) {
   label = 11;
   break;
  }
  $45 = $9;
  $46 = ($45|0)==(0);
  if ($46) {
   label = 14;
   break;
  }
  $47 = $9;
  $48 = $5;
  $49 = (($48) + ($47)|0);
  $5 = $49;
  $50 = $9;
  $51 = $6;
  $52 = (($51) - ($50))|0;
  $6 = $52;
 }
 if ((label|0) == 9) {
  $37 = $9;
  $2 = $37;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 11) {
  $2 = -14;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 14) {
  $53 = $5;
  $54 = $3;
  $55 = $53;
  $56 = $54;
  $57 = (($55) - ($56))|0;
  $2 = $57;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function _ZBUFFv06_freeDCtx($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $5 = $2;
  $6 = HEAP32[$5>>2]|0;
  (_ZSTDv06_freeDCtx($6)|0);
  $7 = $2;
  $8 = ((($7)) + 28|0);
  $9 = HEAP32[$8>>2]|0;
  _free($9);
  $10 = $2;
  $11 = ((($10)) + 40|0);
  $12 = HEAP32[$11>>2]|0;
  _free($12);
  $13 = $2;
  _free($13);
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _FSEv07_isError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_430($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _ERR_isError_430($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2>>>0)>(4294967271);
 $4 = $3&1;
 STACKTOP = sp;return ($4|0);
}
function _HUFv07_isError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_ERR_isError_430($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _FSEv07_readNCount($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $24 = $9;
 $11 = $24;
 $25 = $11;
 $26 = $10;
 $27 = (($25) + ($26)|0);
 $12 = $27;
 $28 = $11;
 $13 = $28;
 $19 = 0;
 $20 = 0;
 $29 = $10;
 $30 = ($29>>>0)<(4);
 if ($30) {
  $5 = -14;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $31 = $13;
 $32 = (_MEM_readLE32_433($31)|0);
 $17 = $32;
 $33 = $17;
 $34 = $33 & 15;
 $35 = (($34) + 5)|0;
 $14 = $35;
 $36 = $14;
 $37 = ($36|0)>(15);
 if ($37) {
  $5 = -17;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $38 = $17;
 $39 = $38 >>> 4;
 $17 = $39;
 $18 = 4;
 $40 = $14;
 $41 = $8;
 HEAP32[$41>>2] = $40;
 $42 = $14;
 $43 = 1 << $42;
 $44 = (($43) + 1)|0;
 $15 = $44;
 $45 = $14;
 $46 = 1 << $45;
 $16 = $46;
 $47 = $14;
 $48 = (($47) + 1)|0;
 $14 = $48;
 L9: while(1) {
  $49 = $15;
  $50 = ($49|0)>(1);
  if (!($50)) {
   break;
  }
  $51 = $19;
  $52 = $7;
  $53 = HEAP32[$52>>2]|0;
  $54 = ($51>>>0)<=($53>>>0);
  if (!($54)) {
   break;
  }
  $55 = $20;
  $56 = ($55|0)!=(0);
  do {
   if ($56) {
    $57 = $19;
    $21 = $57;
    while(1) {
     $58 = $17;
     $59 = $58 & 65535;
     $60 = ($59|0)==(65535);
     if (!($60)) {
      break;
     }
     $61 = $21;
     $62 = (($61) + 24)|0;
     $21 = $62;
     $63 = $13;
     $64 = $12;
     $65 = ((($64)) + -5|0);
     $66 = ($63>>>0)<($65>>>0);
     if ($66) {
      $67 = $13;
      $68 = ((($67)) + 2|0);
      $13 = $68;
      $69 = $13;
      $70 = (_MEM_readLE32_433($69)|0);
      $71 = $18;
      $72 = $70 >>> $71;
      $17 = $72;
      continue;
     } else {
      $73 = $17;
      $74 = $73 >>> 16;
      $17 = $74;
      $75 = $18;
      $76 = (($75) + 16)|0;
      $18 = $76;
      continue;
     }
    }
    while(1) {
     $77 = $17;
     $78 = $77 & 3;
     $79 = ($78|0)==(3);
     if (!($79)) {
      break;
     }
     $80 = $21;
     $81 = (($80) + 3)|0;
     $21 = $81;
     $82 = $17;
     $83 = $82 >>> 2;
     $17 = $83;
     $84 = $18;
     $85 = (($84) + 2)|0;
     $18 = $85;
    }
    $86 = $17;
    $87 = $86 & 3;
    $88 = $21;
    $89 = (($88) + ($87))|0;
    $21 = $89;
    $90 = $18;
    $91 = (($90) + 2)|0;
    $18 = $91;
    $92 = $21;
    $93 = $7;
    $94 = HEAP32[$93>>2]|0;
    $95 = ($92>>>0)>($94>>>0);
    if ($95) {
     label = 17;
     break L9;
    }
    while(1) {
     $96 = $19;
     $97 = $21;
     $98 = ($96>>>0)<($97>>>0);
     if (!($98)) {
      break;
     }
     $99 = $6;
     $100 = $19;
     $101 = (($100) + 1)|0;
     $19 = $101;
     $102 = (($99) + ($100<<1)|0);
     HEAP16[$102>>1] = 0;
    }
    $103 = $13;
    $104 = $12;
    $105 = ((($104)) + -7|0);
    $106 = ($103>>>0)<=($105>>>0);
    if (!($106)) {
     $107 = $13;
     $108 = $18;
     $109 = $108 >> 3;
     $110 = (($107) + ($109)|0);
     $111 = $12;
     $112 = ((($111)) + -4|0);
     $113 = ($110>>>0)<=($112>>>0);
     if (!($113)) {
      $124 = $17;
      $125 = $124 >>> 2;
      $17 = $125;
      break;
     }
    }
    $114 = $18;
    $115 = $114 >> 3;
    $116 = $13;
    $117 = (($116) + ($115)|0);
    $13 = $117;
    $118 = $18;
    $119 = $118 & 7;
    $18 = $119;
    $120 = $13;
    $121 = (_MEM_readLE32_433($120)|0);
    $122 = $18;
    $123 = $121 >>> $122;
    $17 = $123;
   }
  } while(0);
  $126 = $16;
  $127 = $126<<1;
  $128 = (($127) - 1)|0;
  $129 = $15;
  $130 = (($128) - ($129))|0;
  $131 = $130&65535;
  $22 = $131;
  $132 = $17;
  $133 = $16;
  $134 = (($133) - 1)|0;
  $135 = $132 & $134;
  $136 = $22;
  $137 = $136 << 16 >> 16;
  $138 = ($135>>>0)<($137>>>0);
  $139 = $17;
  $140 = $16;
  if ($138) {
   $141 = (($140) - 1)|0;
   $142 = $139 & $141;
   $143 = $142&65535;
   $23 = $143;
   $144 = $14;
   $145 = (($144) - 1)|0;
   $146 = $18;
   $147 = (($146) + ($145))|0;
   $18 = $147;
  } else {
   $148 = $140<<1;
   $149 = (($148) - 1)|0;
   $150 = $139 & $149;
   $151 = $150&65535;
   $23 = $151;
   $152 = $23;
   $153 = $152 << 16 >> 16;
   $154 = $16;
   $155 = ($153|0)>=($154|0);
   if ($155) {
    $156 = $22;
    $157 = $156 << 16 >> 16;
    $158 = $23;
    $159 = $158 << 16 >> 16;
    $160 = (($159) - ($157))|0;
    $161 = $160&65535;
    $23 = $161;
   }
   $162 = $14;
   $163 = $18;
   $164 = (($163) + ($162))|0;
   $18 = $164;
  }
  $165 = $23;
  $166 = (($165) + -1)<<16>>16;
  $23 = $166;
  $167 = $23;
  $168 = (_FSEv07_abs($167)|0);
  $169 = $168 << 16 >> 16;
  $170 = $15;
  $171 = (($170) - ($169))|0;
  $15 = $171;
  $172 = $23;
  $173 = $6;
  $174 = $19;
  $175 = (($174) + 1)|0;
  $19 = $175;
  $176 = (($173) + ($174<<1)|0);
  HEAP16[$176>>1] = $172;
  $177 = $23;
  $178 = ($177<<16>>16)!=(0);
  $179 = $178 ^ 1;
  $180 = $179&1;
  $20 = $180;
  while(1) {
   $181 = $15;
   $182 = $16;
   $183 = ($181|0)<($182|0);
   if (!($183)) {
    break;
   }
   $184 = $14;
   $185 = (($184) + -1)|0;
   $14 = $185;
   $186 = $16;
   $187 = $186 >> 1;
   $16 = $187;
  }
  $188 = $13;
  $189 = $12;
  $190 = ((($189)) + -7|0);
  $191 = ($188>>>0)<=($190>>>0);
  if ($191) {
   label = 34;
  } else {
   $192 = $13;
   $193 = $18;
   $194 = $193 >> 3;
   $195 = (($192) + ($194)|0);
   $196 = $12;
   $197 = ((($196)) + -4|0);
   $198 = ($195>>>0)<=($197>>>0);
   if ($198) {
    label = 34;
   } else {
    $205 = $12;
    $206 = ((($205)) + -4|0);
    $207 = $13;
    $208 = $206;
    $209 = $207;
    $210 = (($208) - ($209))|0;
    $211 = $210<<3;
    $212 = $18;
    $213 = (($212) - ($211))|0;
    $18 = $213;
    $214 = $12;
    $215 = ((($214)) + -4|0);
    $13 = $215;
   }
  }
  if ((label|0) == 34) {
   label = 0;
   $199 = $18;
   $200 = $199 >> 3;
   $201 = $13;
   $202 = (($201) + ($200)|0);
   $13 = $202;
   $203 = $18;
   $204 = $203 & 7;
   $18 = $204;
  }
  $216 = $13;
  $217 = (_MEM_readLE32_433($216)|0);
  $218 = $18;
  $219 = $218 & 31;
  $220 = $217 >>> $219;
  $17 = $220;
 }
 if ((label|0) == 17) {
  $5 = -19;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $221 = $15;
 $222 = ($221|0)!=(1);
 if ($222) {
  $5 = -1;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 $223 = $19;
 $224 = (($223) - 1)|0;
 $225 = $7;
 HEAP32[$225>>2] = $224;
 $226 = $18;
 $227 = (($226) + 7)|0;
 $228 = $227 >> 3;
 $229 = $13;
 $230 = (($229) + ($228)|0);
 $13 = $230;
 $231 = $13;
 $232 = $11;
 $233 = $231;
 $234 = $232;
 $235 = (($233) - ($234))|0;
 $236 = $10;
 $237 = ($235>>>0)>($236>>>0);
 if ($237) {
  $5 = -14;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 } else {
  $238 = $13;
  $239 = $11;
  $240 = $238;
  $241 = $239;
  $242 = (($240) - ($241))|0;
  $5 = $242;
  $243 = $5;
  STACKTOP = sp;return ($243|0);
 }
 return (0)|0;
}
function _MEM_readLE32_433($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_isLittleEndian_434()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read32_435($5)|0);
 if ($4) {
  $1 = $6;
 } else {
  $7 = (_MEM_swap32_436($6)|0);
  $1 = $7;
 }
 $8 = $1;
 STACKTOP = sp;return ($8|0);
}
function _FSEv07_abs($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = $2 << 16 >> 16;
 $4 = ($3|0)<(0);
 $5 = $1;
 $6 = $5 << 16 >> 16;
 $7 = (0 - ($6))|0;
 $8 = $4 ? $7 : $6;
 $9 = $8&65535;
 STACKTOP = sp;return ($9|0);
}
function _MEM_isLittleEndian_434() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[4660]|0;
 $1 = $0&255;
 return ($1|0);
}
function _MEM_read32_435($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$3+3>>0]|0;
 $4 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _MEM_swap32_436($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (_llvm_bswap_i32(($2|0))|0);
 STACKTOP = sp;return ($3|0);
}
function _HUFv07_readStats($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $26 = $13;
 $16 = $26;
 $27 = $14;
 $28 = ($27|0)!=(0);
 if (!($28)) {
  $7 = -14;
  $174 = $7;
  STACKTOP = sp;return ($174|0);
 }
 $29 = $16;
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 $17 = $31;
 $32 = $17;
 $33 = ($32>>>0)>=(128);
 $34 = $17;
 L5: do {
  if ($33) {
   $35 = ($34>>>0)>=(242);
   $36 = $17;
   if ($35) {
    $37 = (($36) - 242)|0;
    $38 = (4664 + ($37<<2)|0);
    $39 = HEAP32[$38>>2]|0;
    $18 = $39;
    $40 = $8;
    $41 = $9;
    _memset(($40|0),1,($41|0))|0;
    $17 = 0;
    break;
   }
   $42 = (($36) - 127)|0;
   $18 = $42;
   $43 = $18;
   $44 = (($43) + 1)|0;
   $45 = (($44>>>0) / 2)&-1;
   $17 = $45;
   $46 = $17;
   $47 = (($46) + 1)|0;
   $48 = $14;
   $49 = ($47>>>0)>($48>>>0);
   if ($49) {
    $7 = -14;
    $174 = $7;
    STACKTOP = sp;return ($174|0);
   }
   $50 = $18;
   $51 = $9;
   $52 = ($50>>>0)>=($51>>>0);
   if ($52) {
    $7 = -15;
    $174 = $7;
    STACKTOP = sp;return ($174|0);
   }
   $53 = $16;
   $54 = ((($53)) + 1|0);
   $16 = $54;
   $19 = 0;
   while(1) {
    $55 = $19;
    $56 = $18;
    $57 = ($55>>>0)<($56>>>0);
    if (!($57)) {
     break L5;
    }
    $58 = $16;
    $59 = $19;
    $60 = (($59>>>0) / 2)&-1;
    $61 = (($58) + ($60)|0);
    $62 = HEAP8[$61>>0]|0;
    $63 = $62&255;
    $64 = $63 >> 4;
    $65 = $64&255;
    $66 = $8;
    $67 = $19;
    $68 = (($66) + ($67)|0);
    HEAP8[$68>>0] = $65;
    $69 = $16;
    $70 = $19;
    $71 = (($70>>>0) / 2)&-1;
    $72 = (($69) + ($71)|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    $75 = $74 & 15;
    $76 = $75&255;
    $77 = $8;
    $78 = $19;
    $79 = (($78) + 1)|0;
    $80 = (($77) + ($79)|0);
    HEAP8[$80>>0] = $76;
    $81 = $19;
    $82 = (($81) + 2)|0;
    $19 = $82;
   }
  } else {
   $83 = (($34) + 1)|0;
   $84 = $14;
   $85 = ($83>>>0)>($84>>>0);
   if ($85) {
    $7 = -14;
    $174 = $7;
    STACKTOP = sp;return ($174|0);
   }
   $86 = $8;
   $87 = $9;
   $88 = (($87) - 1)|0;
   $89 = $16;
   $90 = ((($89)) + 1|0);
   $91 = $17;
   $92 = (_FSEv07_decompress($86,$88,$90,$91)|0);
   $18 = $92;
   $93 = $18;
   $94 = (_FSEv07_isError($93)|0);
   $95 = ($94|0)!=(0);
   if ($95) {
    $96 = $18;
    $7 = $96;
    $174 = $7;
    STACKTOP = sp;return ($174|0);
   }
  }
 } while(0);
 $97 = $10;
 dest=$97; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $15 = 0;
 $20 = 0;
 while(1) {
  $98 = $20;
  $99 = $18;
  $100 = ($98>>>0)<($99>>>0);
  if (!($100)) {
   break;
  }
  $101 = $8;
  $102 = $20;
  $103 = (($101) + ($102)|0);
  $104 = HEAP8[$103>>0]|0;
  $105 = $104&255;
  $106 = ($105|0)>=(16);
  if ($106) {
   label = 20;
   break;
  }
  $107 = $10;
  $108 = $8;
  $109 = $20;
  $110 = (($108) + ($109)|0);
  $111 = HEAP8[$110>>0]|0;
  $112 = $111&255;
  $113 = (($107) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + 1)|0;
  HEAP32[$113>>2] = $115;
  $116 = $8;
  $117 = $20;
  $118 = (($116) + ($117)|0);
  $119 = HEAP8[$118>>0]|0;
  $120 = $119&255;
  $121 = 1 << $120;
  $122 = $121 >> 1;
  $123 = $15;
  $124 = (($123) + ($122))|0;
  $15 = $124;
  $125 = $20;
  $126 = (($125) + 1)|0;
  $20 = $126;
 }
 if ((label|0) == 20) {
  $7 = -15;
  $174 = $7;
  STACKTOP = sp;return ($174|0);
 }
 $127 = $15;
 $128 = ($127|0)==(0);
 if ($128) {
  $7 = -15;
  $174 = $7;
  STACKTOP = sp;return ($174|0);
 }
 $129 = $15;
 $130 = (_BITv07_highbit32($129)|0);
 $131 = (($130) + 1)|0;
 $21 = $131;
 $132 = $21;
 $133 = ($132>>>0)>(16);
 if ($133) {
  $7 = -15;
  $174 = $7;
  STACKTOP = sp;return ($174|0);
 }
 $134 = $21;
 $135 = $12;
 HEAP32[$135>>2] = $134;
 $136 = $21;
 $137 = 1 << $136;
 $22 = $137;
 $138 = $22;
 $139 = $15;
 $140 = (($138) - ($139))|0;
 $23 = $140;
 $141 = $23;
 $142 = (_BITv07_highbit32($141)|0);
 $143 = 1 << $142;
 $24 = $143;
 $144 = $23;
 $145 = (_BITv07_highbit32($144)|0);
 $146 = (($145) + 1)|0;
 $25 = $146;
 $147 = $24;
 $148 = $23;
 $149 = ($147|0)!=($148|0);
 if ($149) {
  $7 = -15;
  $174 = $7;
  STACKTOP = sp;return ($174|0);
 }
 $150 = $25;
 $151 = $150&255;
 $152 = $8;
 $153 = $18;
 $154 = (($152) + ($153)|0);
 HEAP8[$154>>0] = $151;
 $155 = $10;
 $156 = $25;
 $157 = (($155) + ($156<<2)|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = (($158) + 1)|0;
 HEAP32[$157>>2] = $159;
 $160 = $10;
 $161 = ((($160)) + 4|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162>>>0)<(2);
 if (!($163)) {
  $164 = $10;
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 & 1;
  $168 = ($167|0)!=(0);
  if (!($168)) {
   $169 = $18;
   $170 = (($169) + 1)|0;
   $171 = $11;
   HEAP32[$171>>2] = $170;
   $172 = $17;
   $173 = (($172) + 1)|0;
   $7 = $173;
   $174 = $7;
   STACKTOP = sp;return ($174|0);
  }
 }
 $7 = -15;
 $174 = $7;
 STACKTOP = sp;return ($174|0);
}
function _FSEv07_decompress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16944|0);
 $11 = sp + 16432|0;
 $12 = sp + 16|0;
 $13 = sp + 12|0;
 $14 = sp + 8|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $17 = $7;
 $9 = $17;
 $18 = $9;
 $10 = $18;
 HEAP32[$14>>2] = 255;
 $19 = $8;
 $20 = ($19>>>0)<(2);
 if ($20) {
  $4 = -14;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 $21 = $9;
 $22 = $8;
 $23 = (_FSEv07_readNCount($11,$14,$13,$21,$22)|0);
 $15 = $23;
 $24 = $15;
 $25 = (_ERR_isError_430($24)|0);
 $26 = ($25|0)!=(0);
 $27 = $15;
 if ($26) {
  $4 = $27;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 $28 = $8;
 $29 = ($27>>>0)>=($28>>>0);
 if ($29) {
  $4 = -14;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 $30 = $15;
 $31 = $10;
 $32 = (($31) + ($30)|0);
 $10 = $32;
 $33 = $15;
 $34 = $8;
 $35 = (($34) - ($33))|0;
 $8 = $35;
 $36 = HEAP32[$14>>2]|0;
 $37 = HEAP32[$13>>2]|0;
 $38 = (_FSEv07_buildDTable($12,$11,$36,$37)|0);
 $16 = $38;
 $39 = $16;
 $40 = (_ERR_isError_430($39)|0);
 $41 = ($40|0)!=(0);
 if ($41) {
  $42 = $16;
  $4 = $42;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 } else {
  $43 = $5;
  $44 = $6;
  $45 = $10;
  $46 = $8;
  $47 = (_FSEv07_decompress_usingDTable($43,$44,$45,$46,$12)|0);
  $4 = $47;
  $48 = $4;
  STACKTOP = sp;return ($48|0);
 }
 return (0)|0;
}
function _BITv07_highbit32($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = (Math_clz32(($2|0))|0);
 $4 = (31 - ($3))|0;
 STACKTOP = sp;return ($4|0);
}
function _FSEv07_buildDTable($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$sink = 0, $$sink2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $11 = sp + 80|0;
 $15 = sp + 72|0;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $26 = $5;
 $27 = ((($26)) + 4|0);
 $9 = $27;
 $28 = $9;
 $10 = $28;
 $29 = $7;
 $30 = (($29) + 1)|0;
 $12 = $30;
 $31 = $8;
 $32 = 1 << $31;
 $13 = $32;
 $33 = $13;
 $34 = (($33) - 1)|0;
 $14 = $34;
 $35 = $7;
 $36 = ($35>>>0)>(255);
 if ($36) {
  $4 = -18;
  $163 = $4;
  STACKTOP = sp;return ($163|0);
 }
 $37 = $8;
 $38 = ($37>>>0)>(12);
 if ($38) {
  $4 = -17;
  $163 = $4;
  STACKTOP = sp;return ($163|0);
 }
 $39 = $8;
 $40 = $39&65535;
 HEAP16[$15>>1] = $40;
 $41 = ((($15)) + 2|0);
 HEAP16[$41>>1] = 1;
 $42 = $8;
 $43 = (($42) - 1)|0;
 $44 = 1 << $43;
 $45 = $44&65535;
 $16 = $45;
 $17 = 0;
 while(1) {
  $46 = $17;
  $47 = $12;
  $48 = ($46>>>0)<($47>>>0);
  if (!($48)) {
   break;
  }
  $49 = $6;
  $50 = $17;
  $51 = (($49) + ($50<<1)|0);
  $52 = HEAP16[$51>>1]|0;
  $53 = $52 << 16 >> 16;
  $54 = ($53|0)==(-1);
  if ($54) {
   $55 = $17;
   $56 = $55&255;
   $57 = $10;
   $58 = $14;
   $59 = (($58) + -1)|0;
   $14 = $59;
   $60 = (($57) + ($58<<2)|0);
   $61 = ((($60)) + 2|0);
   HEAP8[$61>>0] = $56;
   $62 = $17;
   $$sink = 1;$$sink2 = $62;
  } else {
   $63 = $6;
   $64 = $17;
   $65 = (($63) + ($64<<1)|0);
   $66 = HEAP16[$65>>1]|0;
   $67 = $66 << 16 >> 16;
   $68 = $16;
   $69 = $68 << 16 >> 16;
   $70 = ($67|0)>=($69|0);
   if ($70) {
    $71 = ((($15)) + 2|0);
    HEAP16[$71>>1] = 0;
   }
   $72 = $6;
   $73 = $17;
   $74 = (($72) + ($73<<1)|0);
   $75 = HEAP16[$74>>1]|0;
   $76 = $17;
   $$sink = $75;$$sink2 = $76;
  }
  $77 = (($11) + ($$sink2<<1)|0);
  HEAP16[$77>>1] = $$sink;
  $78 = $17;
  $79 = (($78) + 1)|0;
  $17 = $79;
 }
 $80 = $5;
 ;HEAP16[$80>>1]=HEAP16[$15>>1]|0;HEAP16[$80+2>>1]=HEAP16[$15+2>>1]|0;
 $81 = $13;
 $82 = (($81) - 1)|0;
 $18 = $82;
 $83 = $13;
 $84 = $83 >>> 1;
 $85 = $13;
 $86 = $85 >>> 3;
 $87 = (($84) + ($86))|0;
 $88 = (($87) + 3)|0;
 $19 = $88;
 $21 = 0;
 $20 = 0;
 while(1) {
  $89 = $20;
  $90 = $12;
  $91 = ($89>>>0)<($90>>>0);
  if (!($91)) {
   break;
  }
  $22 = 0;
  while(1) {
   $92 = $22;
   $93 = $6;
   $94 = $20;
   $95 = (($93) + ($94<<1)|0);
   $96 = HEAP16[$95>>1]|0;
   $97 = $96 << 16 >> 16;
   $98 = ($92|0)<($97|0);
   $99 = $20;
   if (!($98)) {
    break;
   }
   $100 = $99&255;
   $101 = $10;
   $102 = $21;
   $103 = (($101) + ($102<<2)|0);
   $104 = ((($103)) + 2|0);
   HEAP8[$104>>0] = $100;
   $105 = $21;
   $106 = $19;
   $107 = (($105) + ($106))|0;
   $108 = $18;
   $109 = $107 & $108;
   $21 = $109;
   while(1) {
    $110 = $21;
    $111 = $14;
    $112 = ($110>>>0)>($111>>>0);
    if (!($112)) {
     break;
    }
    $113 = $21;
    $114 = $19;
    $115 = (($113) + ($114))|0;
    $116 = $18;
    $117 = $115 & $116;
    $21 = $117;
   }
   $118 = $22;
   $119 = (($118) + 1)|0;
   $22 = $119;
  }
  $120 = (($99) + 1)|0;
  $20 = $120;
 }
 $121 = $21;
 $122 = ($121|0)!=(0);
 if ($122) {
  $4 = -1;
  $163 = $4;
  STACKTOP = sp;return ($163|0);
 }
 $23 = 0;
 while(1) {
  $123 = $23;
  $124 = $13;
  $125 = ($123>>>0)<($124>>>0);
  if (!($125)) {
   break;
  }
  $126 = $10;
  $127 = $23;
  $128 = (($126) + ($127<<2)|0);
  $129 = ((($128)) + 2|0);
  $130 = HEAP8[$129>>0]|0;
  $24 = $130;
  $131 = $24;
  $132 = $131&255;
  $133 = (($11) + ($132<<1)|0);
  $134 = HEAP16[$133>>1]|0;
  $135 = (($134) + 1)<<16>>16;
  HEAP16[$133>>1] = $135;
  $25 = $134;
  $136 = $8;
  $137 = $25;
  $138 = $137&65535;
  $139 = (_BITv07_highbit32($138)|0);
  $140 = (($136) - ($139))|0;
  $141 = $140&255;
  $142 = $10;
  $143 = $23;
  $144 = (($142) + ($143<<2)|0);
  $145 = ((($144)) + 3|0);
  HEAP8[$145>>0] = $141;
  $146 = $25;
  $147 = $146&65535;
  $148 = $10;
  $149 = $23;
  $150 = (($148) + ($149<<2)|0);
  $151 = ((($150)) + 3|0);
  $152 = HEAP8[$151>>0]|0;
  $153 = $152&255;
  $154 = $147 << $153;
  $155 = $13;
  $156 = (($154) - ($155))|0;
  $157 = $156&65535;
  $158 = $10;
  $159 = $23;
  $160 = (($158) + ($159<<2)|0);
  HEAP16[$160>>1] = $157;
  $161 = $23;
  $162 = (($161) + 1)|0;
  $23 = $162;
 }
 $4 = 0;
 $163 = $4;
 STACKTOP = sp;return ($163|0);
}
function _FSEv07_decompress_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $$sink1 = 0, $$sink10 = 0, $$sink11 = 0, $$sink12 = 0, $$sink13 = 0, $$sink14 = 0, $$sink15 = 0, $$sink16 = 0, $$sink2 = 0, $$sink3 = 0, $$sink4 = 0, $$sink5 = 0, $$sink6 = 0, $$sink7 = 0, $$sink9 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $16 = sp + 136|0;
 $17 = sp + 128|0;
 $18 = sp + 120|0;
 $31 = sp + 56|0;
 $32 = sp + 48|0;
 $33 = sp + 40|0;
 $36 = $0;
 $37 = $1;
 $38 = $2;
 $39 = $3;
 $40 = $4;
 $44 = $40;
 $41 = $44;
 $45 = $41;
 $42 = $45;
 $46 = $42;
 $47 = ((($46)) + 2|0);
 $48 = HEAP16[$47>>1]|0;
 $49 = $48&65535;
 $43 = $49;
 $50 = $43;
 $51 = ($50|0)!=(0);
 $52 = $36;
 $53 = $37;
 $54 = $38;
 $55 = $39;
 $56 = $40;
 if ($51) {
  $21 = $52;
  $22 = $53;
  $23 = $54;
  $24 = $55;
  $25 = $56;
  $26 = 1;
  $57 = $21;
  $27 = $57;
  $58 = $27;
  $28 = $58;
  $59 = $28;
  $60 = $22;
  $61 = (($59) + ($60)|0);
  $29 = $61;
  $62 = $29;
  $63 = ((($62)) + -3|0);
  $30 = $63;
  $64 = $23;
  $65 = $24;
  $66 = (_BITv07_initDStream($31,$64,$65)|0);
  $34 = $66;
  $67 = $34;
  $68 = (_ERR_isError_430($67)|0);
  $69 = ($68|0)!=(0);
  do {
   if ($69) {
    $70 = $34;
    $20 = $70;
   } else {
    $71 = $25;
    _FSEv07_initDState($32,$31,$71);
    $72 = $25;
    _FSEv07_initDState($33,$31,$72);
    while(1) {
     $73 = (_BITv07_reloadDStream($31)|0);
     $74 = ($73|0)==(0);
     if (!($74)) {
      break;
     }
     $75 = $28;
     $76 = $30;
     $77 = ($75>>>0)<($76>>>0);
     if (!($77)) {
      break;
     }
     $78 = $26;
     $79 = ($78|0)!=(0);
     if ($79) {
      $80 = (_FSEv07_decodeSymbolFast($32,$31)|0);
      $$sink = $80;
     } else {
      $81 = (_FSEv07_decodeSymbol($32,$31)|0);
      $$sink = $81;
     }
     $82 = $$sink&255;
     $83 = $82&255;
     $84 = $28;
     HEAP8[$84>>0] = $83;
     $85 = $26;
     $86 = ($85|0)!=(0);
     if ($86) {
      $87 = (_FSEv07_decodeSymbolFast($33,$31)|0);
      $$sink1 = $87;
     } else {
      $88 = (_FSEv07_decodeSymbol($33,$31)|0);
      $$sink1 = $88;
     }
     $89 = $$sink1&255;
     $90 = $89&255;
     $91 = $28;
     $92 = ((($91)) + 1|0);
     HEAP8[$92>>0] = $90;
     $93 = (_BITv07_reloadDStream($31)|0);
     $94 = ($93>>>0)>(0);
     if ($94) {
      label = 14;
      break;
     }
     $97 = $26;
     $98 = ($97|0)!=(0);
     if ($98) {
      $99 = (_FSEv07_decodeSymbolFast($32,$31)|0);
      $$sink2 = $99;
     } else {
      $100 = (_FSEv07_decodeSymbol($32,$31)|0);
      $$sink2 = $100;
     }
     $101 = $$sink2&255;
     $102 = $101&255;
     $103 = $28;
     $104 = ((($103)) + 2|0);
     HEAP8[$104>>0] = $102;
     $105 = $26;
     $106 = ($105|0)!=(0);
     if ($106) {
      $107 = (_FSEv07_decodeSymbolFast($33,$31)|0);
      $$sink3 = $107;
     } else {
      $108 = (_FSEv07_decodeSymbol($33,$31)|0);
      $$sink3 = $108;
     }
     $109 = $$sink3&255;
     $110 = $109&255;
     $111 = $28;
     $112 = ((($111)) + 3|0);
     HEAP8[$112>>0] = $110;
     $113 = $28;
     $114 = ((($113)) + 4|0);
     $28 = $114;
    }
    if ((label|0) == 14) {
     $95 = $28;
     $96 = ((($95)) + 2|0);
     $28 = $96;
    }
    while(1) {
     $115 = $28;
     $116 = $29;
     $117 = ((($116)) + -2|0);
     $118 = ($115>>>0)>($117>>>0);
     if ($118) {
      label = 23;
      break;
     }
     $119 = $26;
     $120 = ($119|0)!=(0);
     if ($120) {
      $121 = (_FSEv07_decodeSymbolFast($32,$31)|0);
      $$sink4 = $121;
     } else {
      $122 = (_FSEv07_decodeSymbol($32,$31)|0);
      $$sink4 = $122;
     }
     $123 = $$sink4&255;
     $124 = $123&255;
     $125 = $28;
     $126 = ((($125)) + 1|0);
     $28 = $126;
     HEAP8[$125>>0] = $124;
     $127 = (_BITv07_reloadDStream($31)|0);
     $128 = ($127|0)==(3);
     if ($128) {
      label = 28;
      break;
     }
     $137 = $28;
     $138 = $29;
     $139 = ((($138)) + -2|0);
     $140 = ($137>>>0)>($139>>>0);
     if ($140) {
      label = 33;
      break;
     }
     $141 = $26;
     $142 = ($141|0)!=(0);
     if ($142) {
      $143 = (_FSEv07_decodeSymbolFast($33,$31)|0);
      $$sink6 = $143;
     } else {
      $144 = (_FSEv07_decodeSymbol($33,$31)|0);
      $$sink6 = $144;
     }
     $145 = $$sink6&255;
     $146 = $145&255;
     $147 = $28;
     $148 = ((($147)) + 1|0);
     $28 = $148;
     HEAP8[$147>>0] = $146;
     $149 = (_BITv07_reloadDStream($31)|0);
     $150 = ($149|0)==(3);
     if ($150) {
      label = 38;
      break;
     }
    }
    if ((label|0) == 23) {
     $20 = -13;
     break;
    }
    else if ((label|0) == 28) {
     $129 = $26;
     $130 = ($129|0)!=(0);
     if ($130) {
      $131 = (_FSEv07_decodeSymbolFast($33,$31)|0);
      $$sink5 = $131;
     } else {
      $132 = (_FSEv07_decodeSymbol($33,$31)|0);
      $$sink5 = $132;
     }
     $133 = $$sink5&255;
     $134 = $133&255;
     $135 = $28;
     $136 = ((($135)) + 1|0);
     $28 = $136;
     HEAP8[$135>>0] = $134;
    }
    else if ((label|0) == 33) {
     $20 = -13;
     break;
    }
    else if ((label|0) == 38) {
     $151 = $26;
     $152 = ($151|0)!=(0);
     if ($152) {
      $153 = (_FSEv07_decodeSymbolFast($32,$31)|0);
      $$sink7 = $153;
     } else {
      $154 = (_FSEv07_decodeSymbol($32,$31)|0);
      $$sink7 = $154;
     }
     $155 = $$sink7&255;
     $156 = $155&255;
     $157 = $28;
     $158 = ((($157)) + 1|0);
     $28 = $158;
     HEAP8[$157>>0] = $156;
    }
    $159 = $28;
    $160 = $27;
    $161 = $159;
    $162 = $160;
    $163 = (($161) - ($162))|0;
    $20 = $163;
   }
  } while(0);
  $164 = $20;
  $35 = $164;
  $273 = $35;
  STACKTOP = sp;return ($273|0);
 } else {
  $6 = $52;
  $7 = $53;
  $8 = $54;
  $9 = $55;
  $10 = $56;
  $11 = 0;
  $165 = $6;
  $12 = $165;
  $166 = $12;
  $13 = $166;
  $167 = $13;
  $168 = $7;
  $169 = (($167) + ($168)|0);
  $14 = $169;
  $170 = $14;
  $171 = ((($170)) + -3|0);
  $15 = $171;
  $172 = $8;
  $173 = $9;
  $174 = (_BITv07_initDStream($16,$172,$173)|0);
  $19 = $174;
  $175 = $19;
  $176 = (_ERR_isError_430($175)|0);
  $177 = ($176|0)!=(0);
  do {
   if ($177) {
    $178 = $19;
    $5 = $178;
   } else {
    $179 = $10;
    _FSEv07_initDState($17,$16,$179);
    $180 = $10;
    _FSEv07_initDState($18,$16,$180);
    while(1) {
     $181 = (_BITv07_reloadDStream($16)|0);
     $182 = ($181|0)==(0);
     if (!($182)) {
      break;
     }
     $183 = $13;
     $184 = $15;
     $185 = ($183>>>0)<($184>>>0);
     if (!($185)) {
      break;
     }
     $186 = $11;
     $187 = ($186|0)!=(0);
     if ($187) {
      $188 = (_FSEv07_decodeSymbolFast($17,$16)|0);
      $$sink9 = $188;
     } else {
      $189 = (_FSEv07_decodeSymbol($17,$16)|0);
      $$sink9 = $189;
     }
     $190 = $$sink9&255;
     $191 = $190&255;
     $192 = $13;
     HEAP8[$192>>0] = $191;
     $193 = $11;
     $194 = ($193|0)!=(0);
     if ($194) {
      $195 = (_FSEv07_decodeSymbolFast($18,$16)|0);
      $$sink10 = $195;
     } else {
      $196 = (_FSEv07_decodeSymbol($18,$16)|0);
      $$sink10 = $196;
     }
     $197 = $$sink10&255;
     $198 = $197&255;
     $199 = $13;
     $200 = ((($199)) + 1|0);
     HEAP8[$200>>0] = $198;
     $201 = (_BITv07_reloadDStream($16)|0);
     $202 = ($201>>>0)>(0);
     if ($202) {
      label = 56;
      break;
     }
     $205 = $11;
     $206 = ($205|0)!=(0);
     if ($206) {
      $207 = (_FSEv07_decodeSymbolFast($17,$16)|0);
      $$sink11 = $207;
     } else {
      $208 = (_FSEv07_decodeSymbol($17,$16)|0);
      $$sink11 = $208;
     }
     $209 = $$sink11&255;
     $210 = $209&255;
     $211 = $13;
     $212 = ((($211)) + 2|0);
     HEAP8[$212>>0] = $210;
     $213 = $11;
     $214 = ($213|0)!=(0);
     if ($214) {
      $215 = (_FSEv07_decodeSymbolFast($18,$16)|0);
      $$sink12 = $215;
     } else {
      $216 = (_FSEv07_decodeSymbol($18,$16)|0);
      $$sink12 = $216;
     }
     $217 = $$sink12&255;
     $218 = $217&255;
     $219 = $13;
     $220 = ((($219)) + 3|0);
     HEAP8[$220>>0] = $218;
     $221 = $13;
     $222 = ((($221)) + 4|0);
     $13 = $222;
    }
    if ((label|0) == 56) {
     $203 = $13;
     $204 = ((($203)) + 2|0);
     $13 = $204;
    }
    while(1) {
     $223 = $13;
     $224 = $14;
     $225 = ((($224)) + -2|0);
     $226 = ($223>>>0)>($225>>>0);
     if ($226) {
      label = 65;
      break;
     }
     $227 = $11;
     $228 = ($227|0)!=(0);
     if ($228) {
      $229 = (_FSEv07_decodeSymbolFast($17,$16)|0);
      $$sink13 = $229;
     } else {
      $230 = (_FSEv07_decodeSymbol($17,$16)|0);
      $$sink13 = $230;
     }
     $231 = $$sink13&255;
     $232 = $231&255;
     $233 = $13;
     $234 = ((($233)) + 1|0);
     $13 = $234;
     HEAP8[$233>>0] = $232;
     $235 = (_BITv07_reloadDStream($16)|0);
     $236 = ($235|0)==(3);
     if ($236) {
      label = 70;
      break;
     }
     $245 = $13;
     $246 = $14;
     $247 = ((($246)) + -2|0);
     $248 = ($245>>>0)>($247>>>0);
     if ($248) {
      label = 75;
      break;
     }
     $249 = $11;
     $250 = ($249|0)!=(0);
     if ($250) {
      $251 = (_FSEv07_decodeSymbolFast($18,$16)|0);
      $$sink15 = $251;
     } else {
      $252 = (_FSEv07_decodeSymbol($18,$16)|0);
      $$sink15 = $252;
     }
     $253 = $$sink15&255;
     $254 = $253&255;
     $255 = $13;
     $256 = ((($255)) + 1|0);
     $13 = $256;
     HEAP8[$255>>0] = $254;
     $257 = (_BITv07_reloadDStream($16)|0);
     $258 = ($257|0)==(3);
     if ($258) {
      label = 80;
      break;
     }
    }
    if ((label|0) == 65) {
     $5 = -13;
     break;
    }
    else if ((label|0) == 70) {
     $237 = $11;
     $238 = ($237|0)!=(0);
     if ($238) {
      $239 = (_FSEv07_decodeSymbolFast($18,$16)|0);
      $$sink14 = $239;
     } else {
      $240 = (_FSEv07_decodeSymbol($18,$16)|0);
      $$sink14 = $240;
     }
     $241 = $$sink14&255;
     $242 = $241&255;
     $243 = $13;
     $244 = ((($243)) + 1|0);
     $13 = $244;
     HEAP8[$243>>0] = $242;
    }
    else if ((label|0) == 75) {
     $5 = -13;
     break;
    }
    else if ((label|0) == 80) {
     $259 = $11;
     $260 = ($259|0)!=(0);
     if ($260) {
      $261 = (_FSEv07_decodeSymbolFast($17,$16)|0);
      $$sink16 = $261;
     } else {
      $262 = (_FSEv07_decodeSymbol($17,$16)|0);
      $$sink16 = $262;
     }
     $263 = $$sink16&255;
     $264 = $263&255;
     $265 = $13;
     $266 = ((($265)) + 1|0);
     $13 = $266;
     HEAP8[$265>>0] = $264;
    }
    $267 = $13;
    $268 = $12;
    $269 = $267;
    $270 = $268;
    $271 = (($269) - ($270))|0;
    $5 = $271;
   }
  } while(0);
  $272 = $5;
  $35 = $272;
  $273 = $35;
  STACKTOP = sp;return ($273|0);
 }
 return (0)|0;
}
function _BITv07_initDStream($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9>>>0)<(1);
 if ($10) {
  $11 = $4;
  ;HEAP32[$11>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;HEAP32[$11+12>>2]=0|0;
  $3 = -14;
  $132 = $3;
  STACKTOP = sp;return ($132|0);
 }
 $12 = $6;
 $13 = ($12>>>0)>=(4);
 $14 = $5;
 $15 = $4;
 $16 = ((($15)) + 12|0);
 HEAP32[$16>>2] = $14;
 do {
  if ($13) {
   $17 = $5;
   $18 = $6;
   $19 = (($17) + ($18)|0);
   $20 = ((($19)) + -4|0);
   $21 = $4;
   $22 = ((($21)) + 8|0);
   HEAP32[$22>>2] = $20;
   $23 = $4;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (_MEM_readLEST_438($25)|0);
   $27 = $4;
   HEAP32[$27>>2] = $26;
   $28 = $5;
   $29 = $6;
   $30 = (($29) - 1)|0;
   $31 = (($28) + ($30)|0);
   $32 = HEAP8[$31>>0]|0;
   $7 = $32;
   $33 = $7;
   $34 = $33&255;
   $35 = ($34|0)!=(0);
   if ($35) {
    $36 = $7;
    $37 = $36&255;
    $38 = (_BITv07_highbit32($37)|0);
    $39 = (8 - ($38))|0;
    $42 = $39;
   } else {
    $42 = 0;
   }
   $40 = $4;
   $41 = ((($40)) + 4|0);
   HEAP32[$41>>2] = $42;
   $43 = $7;
   $44 = $43&255;
   $45 = ($44|0)==(0);
   if ($45) {
    $3 = -1;
    $132 = $3;
    STACKTOP = sp;return ($132|0);
   }
  } else {
   $46 = $4;
   $47 = ((($46)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = $4;
   $50 = ((($49)) + 8|0);
   HEAP32[$50>>2] = $48;
   $51 = $4;
   $52 = ((($51)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $4;
   HEAP32[$56>>2] = $55;
   $57 = $6;
   switch ($57|0) {
   case 7:  {
    $58 = $5;
    $59 = ((($58)) + 6|0);
    $60 = HEAP8[$59>>0]|0;
    $61 = $60&255;
    $62 = $61 << 16;
    $63 = $4;
    $64 = HEAP32[$63>>2]|0;
    $65 = (($64) + ($62))|0;
    HEAP32[$63>>2] = $65;
    label = 10;
    break;
   }
   case 6:  {
    label = 10;
    break;
   }
   case 5:  {
    label = 11;
    break;
   }
   case 4:  {
    label = 12;
    break;
   }
   case 3:  {
    label = 13;
    break;
   }
   case 2:  {
    label = 14;
    break;
   }
   default: {
   }
   }
   if ((label|0) == 10) {
    $66 = $5;
    $67 = ((($66)) + 5|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68&255;
    $70 = $69 << 8;
    $71 = $4;
    $72 = HEAP32[$71>>2]|0;
    $73 = (($72) + ($70))|0;
    HEAP32[$71>>2] = $73;
    label = 11;
   }
   if ((label|0) == 11) {
    $74 = $5;
    $75 = ((($74)) + 4|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $76&255;
    $78 = $77 << 0;
    $79 = $4;
    $80 = HEAP32[$79>>2]|0;
    $81 = (($80) + ($78))|0;
    HEAP32[$79>>2] = $81;
    label = 12;
   }
   if ((label|0) == 12) {
    $82 = $5;
    $83 = ((($82)) + 3|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = $85 << 24;
    $87 = $4;
    $88 = HEAP32[$87>>2]|0;
    $89 = (($88) + ($86))|0;
    HEAP32[$87>>2] = $89;
    label = 13;
   }
   if ((label|0) == 13) {
    $90 = $5;
    $91 = ((($90)) + 2|0);
    $92 = HEAP8[$91>>0]|0;
    $93 = $92&255;
    $94 = $93 << 16;
    $95 = $4;
    $96 = HEAP32[$95>>2]|0;
    $97 = (($96) + ($94))|0;
    HEAP32[$95>>2] = $97;
    label = 14;
   }
   if ((label|0) == 14) {
    $98 = $5;
    $99 = ((($98)) + 1|0);
    $100 = HEAP8[$99>>0]|0;
    $101 = $100&255;
    $102 = $101 << 8;
    $103 = $4;
    $104 = HEAP32[$103>>2]|0;
    $105 = (($104) + ($102))|0;
    HEAP32[$103>>2] = $105;
   }
   $106 = $5;
   $107 = $6;
   $108 = (($107) - 1)|0;
   $109 = (($106) + ($108)|0);
   $110 = HEAP8[$109>>0]|0;
   $8 = $110;
   $111 = $8;
   $112 = $111&255;
   $113 = ($112|0)!=(0);
   if ($113) {
    $114 = $8;
    $115 = $114&255;
    $116 = (_BITv07_highbit32($115)|0);
    $117 = (8 - ($116))|0;
    $120 = $117;
   } else {
    $120 = 0;
   }
   $118 = $4;
   $119 = ((($118)) + 4|0);
   HEAP32[$119>>2] = $120;
   $121 = $8;
   $122 = $121&255;
   $123 = ($122|0)==(0);
   if (!($123)) {
    $124 = $6;
    $125 = (4 - ($124))|0;
    $126 = $125<<3;
    $127 = $4;
    $128 = ((($127)) + 4|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (($129) + ($126))|0;
    HEAP32[$128>>2] = $130;
    break;
   }
   $3 = -1;
   $132 = $3;
   STACKTOP = sp;return ($132|0);
  }
 } while(0);
 $131 = $6;
 $3 = $131;
 $132 = $3;
 STACKTOP = sp;return ($132|0);
}
function _FSEv07_initDState($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $5;
 $6 = $8;
 $9 = $6;
 $7 = $9;
 $10 = $4;
 $11 = $7;
 $12 = HEAP16[$11>>1]|0;
 $13 = $12&65535;
 $14 = (_BITv07_readBits($10,$13)|0);
 $15 = $3;
 HEAP32[$15>>2] = $14;
 $16 = $4;
 (_BITv07_reloadDStream($16)|0);
 $17 = $5;
 $18 = ((($17)) + 4|0);
 $19 = $3;
 $20 = ((($19)) + 4|0);
 HEAP32[$20>>2] = $18;
 STACKTOP = sp;return;
}
function _BITv07_reloadDStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7>>>0)>(32);
 if ($8) {
  $1 = 3;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $9 = $2;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($14)) + 4|0);
 $16 = ($11>>>0)>=($15>>>0);
 $17 = $2;
 if ($16) {
  $18 = ((($17)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = $19 >>> 3;
  $21 = $2;
  $22 = ((($21)) + 8|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (0 - ($20))|0;
  $25 = (($23) + ($24)|0);
  HEAP32[$22>>2] = $25;
  $26 = $2;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 7;
  HEAP32[$27>>2] = $29;
  $30 = $2;
  $31 = ((($30)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (_MEM_readLEST_438($32)|0);
  $34 = $2;
  HEAP32[$34>>2] = $33;
  $1 = 0;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $35 = ((($17)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $2;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($36|0)==($39|0);
 $41 = $2;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 if (!($40)) {
  $45 = $43 >>> 3;
  $3 = $45;
  $4 = 0;
  $46 = $2;
  $47 = ((($46)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $3;
  $50 = (0 - ($49))|0;
  $51 = (($48) + ($50)|0);
  $52 = $2;
  $53 = ((($52)) + 12|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($51>>>0)<($54>>>0);
  if ($55) {
   $56 = $2;
   $57 = ((($56)) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = $2;
   $60 = ((($59)) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $58;
   $63 = $61;
   $64 = (($62) - ($63))|0;
   $3 = $64;
   $4 = 1;
  }
  $65 = $3;
  $66 = $2;
  $67 = ((($66)) + 8|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = (0 - ($65))|0;
  $70 = (($68) + ($69)|0);
  HEAP32[$67>>2] = $70;
  $71 = $3;
  $72 = $71<<3;
  $73 = $2;
  $74 = ((($73)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (($75) - ($72))|0;
  HEAP32[$74>>2] = $76;
  $77 = $2;
  $78 = ((($77)) + 8|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = (_MEM_readLEST_438($79)|0);
  $81 = $2;
  HEAP32[$81>>2] = $80;
  $82 = $4;
  $1 = $82;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 $44 = ($43>>>0)<(32);
 if ($44) {
  $1 = 1;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 } else {
  $1 = 2;
  $83 = $1;
  STACKTOP = sp;return ($83|0);
 }
 return (0)|0;
}
function _FSEv07_decodeSymbolFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$13>>1]|0;HEAP16[$4+2>>1]=HEAP16[$13+2>>1]|0;
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $5 = $16;
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $3;
 $20 = $5;
 $21 = (_BITv07_readBitsFast($19,$20)|0);
 $7 = $21;
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = $7;
 $25 = (($23) + ($24))|0;
 $26 = $2;
 HEAP32[$26>>2] = $25;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _FSEv07_decodeSymbol($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = ((($8)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $2;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($10) + ($12<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$13>>1]|0;HEAP16[$4+2>>1]=HEAP16[$13+2>>1]|0;
 $14 = ((($4)) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $5 = $16;
 $17 = ((($4)) + 2|0);
 $18 = HEAP8[$17>>0]|0;
 $6 = $18;
 $19 = $3;
 $20 = $5;
 $21 = (_BITv07_readBits($19,$20)|0);
 $7 = $21;
 $22 = HEAP16[$4>>1]|0;
 $23 = $22&65535;
 $24 = $7;
 $25 = (($23) + ($24))|0;
 $26 = $2;
 HEAP32[$26>>2] = $25;
 $27 = $6;
 STACKTOP = sp;return ($27|0);
}
function _BITv07_readBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BITv07_lookBits($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BITv07_skipBits($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _BITv07_lookBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $11 >>> 1;
 $13 = $3;
 $14 = (31 - ($13))|0;
 $15 = $14 & 31;
 $16 = $12 >>> $15;
 STACKTOP = sp;return ($16|0);
}
function _BITv07_skipBits($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + ($4))|0;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function _BITv07_readBitsFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_BITv07_lookBitsFast($5,$6)|0);
 $4 = $7;
 $8 = $2;
 $9 = $3;
 _BITv07_skipBits($8,$9);
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _BITv07_lookBitsFast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 31;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 31;
 $11 = $6 << $10;
 $12 = $3;
 $13 = (32 - ($12))|0;
 $14 = $13 & 31;
 $15 = $11 >>> $14;
 STACKTOP = sp;return ($15|0);
}
function _MEM_readLEST_438($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = (_MEM_32bits_439()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 if ($4) {
  $6 = (_MEM_readLE32_433($5)|0);
  $1 = $6;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 } else {
  $7 = (_MEM_readLE64_440($5)|0);
  $8 = tempRet0;
  $1 = $7;
  $9 = $1;
  STACKTOP = sp;return ($9|0);
 }
 return (0)|0;
}
function _MEM_32bits_439() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1;
}
function _MEM_readLE64_440($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = $0;
 $3 = (_MEM_isLittleEndian_434()|0);
 $4 = ($3|0)!=(0);
 $5 = $2;
 $6 = (_MEM_read64_441($5)|0);
 $7 = tempRet0;
 if ($4) {
  $8 = $1;
  $9 = $8;
  HEAP32[$9>>2] = $6;
  $10 = (($8) + 4)|0;
  $11 = $10;
  HEAP32[$11>>2] = $7;
 } else {
  $12 = (_MEM_swap64_442($6,$7)|0);
  $13 = tempRet0;
  $14 = $1;
  $15 = $14;
  HEAP32[$15>>2] = $12;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
 }
 $18 = $1;
 $19 = $18;
 $20 = HEAP32[$19>>2]|0;
 $21 = (($18) + 4)|0;
 $22 = $21;
 $23 = HEAP32[$22>>2]|0;
 tempRet0 = ($23);
 STACKTOP = sp;return ($20|0);
}
function _MEM_read64_441($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$2+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$2+3>>0]=HEAP8[$3+3>>0]|0;HEAP8[$2+4>>0]=HEAP8[$3+4>>0]|0;HEAP8[$2+5>>0]=HEAP8[$3+5>>0]|0;HEAP8[$2+6>>0]=HEAP8[$3+6>>0]|0;HEAP8[$2+7>>0]=HEAP8[$3+7>>0]|0;
 $4 = $2;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) + 4)|0;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 tempRet0 = ($9);
 STACKTOP = sp;return ($6|0);
}
function _MEM_swap64_442($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $2;
 $4 = $3;
 HEAP32[$4>>2] = $0;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = $1;
 $7 = $2;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($7) + 4)|0;
 $11 = $10;
 $12 = HEAP32[$11>>2]|0;
 $13 = (_llvm_bswap_i64(($9|0),($12|0))|0);
 $14 = tempRet0;
 tempRet0 = ($14);
 STACKTOP = sp;return ($13|0);
}
function _FSEv07_buildDTable_rle($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $4 = $8;
 $9 = $4;
 $5 = $9;
 $10 = $2;
 $11 = ((($10)) + 4|0);
 $6 = $11;
 $12 = $6;
 $7 = $12;
 $13 = $5;
 HEAP16[$13>>1] = 0;
 $14 = $5;
 $15 = ((($14)) + 2|0);
 HEAP16[$15>>1] = 0;
 $16 = $7;
 HEAP16[$16>>1] = 0;
 $17 = $3;
 $18 = $7;
 $19 = ((($18)) + 2|0);
 HEAP8[$19>>0] = $17;
 $20 = $7;
 $21 = ((($20)) + 3|0);
 HEAP8[$21>>0] = 0;
 STACKTOP = sp;return 0;
}
function _HUFv07_readDTableX2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(400|0);
 $7 = sp + 144|0;
 $8 = sp + 48|0;
 $9 = sp + 44|0;
 $10 = sp + 40|0;
 $14 = sp + 136|0;
 $22 = sp + 132|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 HEAP32[$9>>2] = 0;
 HEAP32[$10>>2] = 0;
 $23 = $4;
 $24 = ((($23)) + 4|0);
 $12 = $24;
 $25 = $12;
 $13 = $25;
 $26 = $5;
 $27 = $6;
 $28 = (_HUFv07_readStats($7,256,$8,$10,$9,$26,$27)|0);
 $11 = $28;
 $29 = $11;
 $30 = (_HUFv07_isError($29)|0);
 $31 = ($30|0)!=(0);
 if ($31) {
  $32 = $11;
  $3 = $32;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $33 = $4;
 _HUFv07_getDTableDesc($14,$33);
 $34 = HEAP32[$9>>2]|0;
 $35 = HEAP8[$14>>0]|0;
 $36 = $35&255;
 $37 = (($36) + 1)|0;
 $38 = ($34>>>0)>($37>>>0);
 if ($38) {
  $3 = -17;
  $103 = $3;
  STACKTOP = sp;return ($103|0);
 }
 $39 = ((($14)) + 1|0);
 HEAP8[$39>>0] = 0;
 $40 = HEAP32[$9>>2]|0;
 $41 = $40&255;
 $42 = ((($14)) + 2|0);
 HEAP8[$42>>0] = $41;
 $43 = $4;
 ;HEAP8[$43>>0]=HEAP8[$14>>0]|0;HEAP8[$43+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$43+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$43+3>>0]=HEAP8[$14+3>>0]|0;
 $16 = 0;
 $15 = 1;
 while(1) {
  $44 = $15;
  $45 = HEAP32[$9>>2]|0;
  $46 = (($45) + 1)|0;
  $47 = ($44>>>0)<($46>>>0);
  if (!($47)) {
   break;
  }
  $48 = $16;
  $17 = $48;
  $49 = $15;
  $50 = (($8) + ($49<<2)|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = $15;
  $53 = (($52) - 1)|0;
  $54 = $51 << $53;
  $55 = $16;
  $56 = (($55) + ($54))|0;
  $16 = $56;
  $57 = $17;
  $58 = $15;
  $59 = (($8) + ($58<<2)|0);
  HEAP32[$59>>2] = $57;
  $60 = $15;
  $61 = (($60) + 1)|0;
  $15 = $61;
 }
 $18 = 0;
 while(1) {
  $62 = $18;
  $63 = HEAP32[$10>>2]|0;
  $64 = ($62>>>0)<($63>>>0);
  if (!($64)) {
   break;
  }
  $65 = $18;
  $66 = (($7) + ($65)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $19 = $68;
  $69 = $19;
  $70 = 1 << $69;
  $71 = $70 >> 1;
  $20 = $71;
  $72 = $18;
  $73 = $72&255;
  HEAP8[$22>>0] = $73;
  $74 = HEAP32[$9>>2]|0;
  $75 = (($74) + 1)|0;
  $76 = $19;
  $77 = (($75) - ($76))|0;
  $78 = $77&255;
  $79 = ((($22)) + 1|0);
  HEAP8[$79>>0] = $78;
  $80 = $19;
  $81 = (($8) + ($80<<2)|0);
  $82 = HEAP32[$81>>2]|0;
  $21 = $82;
  while(1) {
   $83 = $21;
   $84 = $19;
   $85 = (($8) + ($84<<2)|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $20;
   $88 = (($86) + ($87))|0;
   $89 = ($83>>>0)<($88>>>0);
   if (!($89)) {
    break;
   }
   $90 = $13;
   $91 = $21;
   $92 = (($90) + ($91<<1)|0);
   ;HEAP8[$92>>0]=HEAP8[$22>>0]|0;HEAP8[$92+1>>0]=HEAP8[$22+1>>0]|0;
   $93 = $21;
   $94 = (($93) + 1)|0;
   $21 = $94;
  }
  $95 = $20;
  $96 = $19;
  $97 = (($8) + ($96<<2)|0);
  $98 = HEAP32[$97>>2]|0;
  $99 = (($98) + ($95))|0;
  HEAP32[$97>>2] = $99;
  $100 = $18;
  $101 = (($100) + 1)|0;
  $18 = $101;
 }
 $102 = $11;
 $3 = $102;
 $103 = $3;
 STACKTOP = sp;return ($103|0);
}
function _HUFv07_getDTableDesc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $1;
 $4 = $2;
 ;HEAP8[$3>>0]=HEAP8[$4>>0]|0;HEAP8[$3+1>>0]=HEAP8[$4+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$4+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$4+3>>0]|0;
 ;HEAP8[$0>>0]=HEAP8[$3>>0]|0;HEAP8[$0+1>>0]=HEAP8[$3+1>>0]|0;HEAP8[$0+2>>0]=HEAP8[$3+2>>0]|0;HEAP8[$0+3>>0]=HEAP8[$3+3>>0]|0;
 STACKTOP = sp;return;
}
function _HUFv07_decompress1X2_usingDTable_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $15 = sp + 8|0;
 $16 = sp + 64|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $19 = $6;
 $11 = $19;
 $20 = $11;
 $21 = $7;
 $22 = (($20) + ($21)|0);
 $12 = $22;
 $23 = $10;
 $24 = ((($23)) + 4|0);
 $13 = $24;
 $25 = $13;
 $14 = $25;
 $26 = $10;
 _HUFv07_getDTableDesc($16,$26);
 $27 = ((($16)) + 2|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $17 = $29;
 $30 = $8;
 $31 = $9;
 $32 = (_BITv07_initDStream($15,$30,$31)|0);
 $18 = $32;
 $33 = $18;
 $34 = (_HUFv07_isError($33)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  $36 = $18;
  $5 = $36;
  $44 = $5;
  STACKTOP = sp;return ($44|0);
 }
 $37 = $11;
 $38 = $12;
 $39 = $14;
 $40 = $17;
 (_HUFv07_decodeStreamX2($37,$15,$38,$39,$40)|0);
 $41 = (_BITv07_endOfDStream($15)|0);
 $42 = ($41|0)!=(0);
 if ($42) {
  $43 = $7;
  $5 = $43;
  $44 = $5;
  STACKTOP = sp;return ($44|0);
 } else {
  $5 = -15;
  $44 = $5;
  STACKTOP = sp;return ($44|0);
 }
 return (0)|0;
}
function _HUFv07_decodeStreamX2($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $10 = $11;
 while(1) {
  $12 = $6;
  $13 = (_BITv07_reloadDStream($12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $7;
  $17 = ((($16)) + -4|0);
  $18 = ($15>>>0)<=($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = (_MEM_64bits_443()|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $6;
   $22 = $8;
   $23 = $9;
   $24 = (_HUFv07_decodeSymbolX2($21,$22,$23)|0);
   $25 = $5;
   $26 = ((($25)) + 1|0);
   $5 = $26;
   HEAP8[$25>>0] = $24;
  }
  (_MEM_64bits_443()|0);
  $27 = $6;
  $28 = $8;
  $29 = $9;
  $30 = (_HUFv07_decodeSymbolX2($27,$28,$29)|0);
  $31 = $5;
  $32 = ((($31)) + 1|0);
  $5 = $32;
  HEAP8[$31>>0] = $30;
  $33 = (_MEM_64bits_443()|0);
  $34 = ($33|0)!=(0);
  if ($34) {
   $35 = $6;
   $36 = $8;
   $37 = $9;
   $38 = (_HUFv07_decodeSymbolX2($35,$36,$37)|0);
   $39 = $5;
   $40 = ((($39)) + 1|0);
   $5 = $40;
   HEAP8[$39>>0] = $38;
  }
  $41 = $6;
  $42 = $8;
  $43 = $9;
  $44 = (_HUFv07_decodeSymbolX2($41,$42,$43)|0);
  $45 = $5;
  $46 = ((($45)) + 1|0);
  $5 = $46;
  HEAP8[$45>>0] = $44;
 }
 while(1) {
  $47 = $6;
  $48 = (_BITv07_reloadDStream($47)|0);
  $49 = ($48|0)==(0);
  if (!($49)) {
   break;
  }
  $50 = $5;
  $51 = $7;
  $52 = ($50>>>0)<($51>>>0);
  if (!($52)) {
   break;
  }
  $53 = $6;
  $54 = $8;
  $55 = $9;
  $56 = (_HUFv07_decodeSymbolX2($53,$54,$55)|0);
  $57 = $5;
  $58 = ((($57)) + 1|0);
  $5 = $58;
  HEAP8[$57>>0] = $56;
 }
 while(1) {
  $59 = $5;
  $60 = $7;
  $61 = ($59>>>0)<($60>>>0);
  if (!($61)) {
   break;
  }
  $62 = $6;
  $63 = $8;
  $64 = $9;
  $65 = (_HUFv07_decodeSymbolX2($62,$63,$64)|0);
  $66 = $5;
  $67 = ((($66)) + 1|0);
  $5 = $67;
  HEAP8[$66>>0] = $65;
 }
 $68 = $7;
 $69 = $10;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 STACKTOP = sp;return ($72|0);
}
function _BITv07_endOfDStream($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)==($7|0);
 if (!($8)) {
  $14 = 0;
  $13 = $14&1;
  STACKTOP = sp;return ($13|0);
 }
 $9 = $1;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(32);
 $14 = $12;
 $13 = $14&1;
 STACKTOP = sp;return ($13|0);
}
function _MEM_64bits_443() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _HUFv07_decodeSymbolX2($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = $3;
 $9 = $5;
 $10 = (_BITv07_lookBitsFast($8,$9)|0);
 $6 = $10;
 $11 = $4;
 $12 = $6;
 $13 = (($11) + ($12<<1)|0);
 $14 = HEAP8[$13>>0]|0;
 $7 = $14;
 $15 = $3;
 $16 = $4;
 $17 = $6;
 $18 = (($16) + ($17<<1)|0);
 $19 = ((($18)) + 1|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 _BITv07_skipBits($15,$21);
 $22 = $7;
 STACKTOP = sp;return ($22|0);
}
function _HUFv07_decompress1X2_DCtx($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $11 = $13;
 $14 = $6;
 $15 = $9;
 $16 = $10;
 $17 = (_HUFv07_readDTableX2($14,$15,$16)|0);
 $12 = $17;
 $18 = $12;
 $19 = (_HUFv07_isError($18)|0);
 $20 = ($19|0)!=(0);
 $21 = $12;
 if ($20) {
  $5 = $21;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 $22 = $10;
 $23 = ($21>>>0)>=($22>>>0);
 if ($23) {
  $5 = -14;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 } else {
  $24 = $12;
  $25 = $11;
  $26 = (($25) + ($24)|0);
  $11 = $26;
  $27 = $12;
  $28 = $10;
  $29 = (($28) - ($27))|0;
  $10 = $29;
  $30 = $7;
  $31 = $8;
  $32 = $11;
  $33 = $10;
  $34 = $6;
  $35 = (_HUFv07_decompress1X2_usingDTable_internal($30,$31,$32,$33,$34)|0);
  $5 = $35;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _HUFv07_decompress4X2_usingDTable_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $16 = sp + 136|0;
 $17 = sp + 120|0;
 $18 = sp + 104|0;
 $19 = sp + 88|0;
 $37 = sp + 196|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $43 = $9;
 $44 = ($43>>>0)<(10);
 if ($44) {
  $5 = -15;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 }
 $45 = $8;
 $11 = $45;
 $46 = $6;
 $12 = $46;
 $47 = $12;
 $48 = $7;
 $49 = (($47) + ($48)|0);
 $13 = $49;
 $50 = $10;
 $51 = ((($50)) + 4|0);
 $14 = $51;
 $52 = $14;
 $15 = $52;
 $53 = $11;
 $54 = (_MEM_readLE16_444($53)|0);
 $55 = $54&65535;
 $20 = $55;
 $56 = $11;
 $57 = ((($56)) + 2|0);
 $58 = (_MEM_readLE16_444($57)|0);
 $59 = $58&65535;
 $21 = $59;
 $60 = $11;
 $61 = ((($60)) + 4|0);
 $62 = (_MEM_readLE16_444($61)|0);
 $63 = $62&65535;
 $22 = $63;
 $64 = $9;
 $65 = $20;
 $66 = $21;
 $67 = (($65) + ($66))|0;
 $68 = $22;
 $69 = (($67) + ($68))|0;
 $70 = (($69) + 6)|0;
 $71 = (($64) - ($70))|0;
 $23 = $71;
 $72 = $11;
 $73 = ((($72)) + 6|0);
 $24 = $73;
 $74 = $24;
 $75 = $20;
 $76 = (($74) + ($75)|0);
 $25 = $76;
 $77 = $25;
 $78 = $21;
 $79 = (($77) + ($78)|0);
 $26 = $79;
 $80 = $26;
 $81 = $22;
 $82 = (($80) + ($81)|0);
 $27 = $82;
 $83 = $7;
 $84 = (($83) + 3)|0;
 $85 = (($84>>>0) / 4)&-1;
 $28 = $85;
 $86 = $12;
 $87 = $28;
 $88 = (($86) + ($87)|0);
 $29 = $88;
 $89 = $29;
 $90 = $28;
 $91 = (($89) + ($90)|0);
 $30 = $91;
 $92 = $30;
 $93 = $28;
 $94 = (($92) + ($93)|0);
 $31 = $94;
 $95 = $12;
 $32 = $95;
 $96 = $29;
 $33 = $96;
 $97 = $30;
 $34 = $97;
 $98 = $31;
 $35 = $98;
 $99 = $10;
 _HUFv07_getDTableDesc($37,$99);
 $100 = ((($37)) + 2|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $38 = $102;
 $103 = $23;
 $104 = $9;
 $105 = ($103>>>0)>($104>>>0);
 if ($105) {
  $5 = -15;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 }
 $106 = $24;
 $107 = $20;
 $108 = (_BITv07_initDStream($16,$106,$107)|0);
 $39 = $108;
 $109 = $39;
 $110 = (_HUFv07_isError($109)|0);
 $111 = ($110|0)!=(0);
 if ($111) {
  $112 = $39;
  $5 = $112;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 }
 $113 = $25;
 $114 = $21;
 $115 = (_BITv07_initDStream($17,$113,$114)|0);
 $40 = $115;
 $116 = $40;
 $117 = (_HUFv07_isError($116)|0);
 $118 = ($117|0)!=(0);
 if ($118) {
  $119 = $40;
  $5 = $119;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 }
 $120 = $26;
 $121 = $22;
 $122 = (_BITv07_initDStream($18,$120,$121)|0);
 $41 = $122;
 $123 = $41;
 $124 = (_HUFv07_isError($123)|0);
 $125 = ($124|0)!=(0);
 if ($125) {
  $126 = $41;
  $5 = $126;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 }
 $127 = $27;
 $128 = $23;
 $129 = (_BITv07_initDStream($19,$127,$128)|0);
 $42 = $129;
 $130 = $42;
 $131 = (_HUFv07_isError($130)|0);
 $132 = ($131|0)!=(0);
 if ($132) {
  $133 = $42;
  $5 = $133;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 }
 $134 = (_BITv07_reloadDStream($16)|0);
 $135 = (_BITv07_reloadDStream($17)|0);
 $136 = $134 | $135;
 $137 = (_BITv07_reloadDStream($18)|0);
 $138 = $136 | $137;
 $139 = (_BITv07_reloadDStream($19)|0);
 $140 = $138 | $139;
 $36 = $140;
 while(1) {
  $141 = $36;
  $142 = ($141|0)==(0);
  if (!($142)) {
   break;
  }
  $143 = $35;
  $144 = $13;
  $145 = ((($144)) + -7|0);
  $146 = ($143>>>0)<($145>>>0);
  if (!($146)) {
   break;
  }
  $147 = (_MEM_64bits_443()|0);
  $148 = ($147|0)!=(0);
  if ($148) {
   $149 = $15;
   $150 = $38;
   $151 = (_HUFv07_decodeSymbolX2($16,$149,$150)|0);
   $152 = $32;
   $153 = ((($152)) + 1|0);
   $32 = $153;
   HEAP8[$152>>0] = $151;
  }
  $154 = (_MEM_64bits_443()|0);
  $155 = ($154|0)!=(0);
  if ($155) {
   $156 = $15;
   $157 = $38;
   $158 = (_HUFv07_decodeSymbolX2($17,$156,$157)|0);
   $159 = $33;
   $160 = ((($159)) + 1|0);
   $33 = $160;
   HEAP8[$159>>0] = $158;
  }
  $161 = (_MEM_64bits_443()|0);
  $162 = ($161|0)!=(0);
  if ($162) {
   $163 = $15;
   $164 = $38;
   $165 = (_HUFv07_decodeSymbolX2($18,$163,$164)|0);
   $166 = $34;
   $167 = ((($166)) + 1|0);
   $34 = $167;
   HEAP8[$166>>0] = $165;
  }
  $168 = (_MEM_64bits_443()|0);
  $169 = ($168|0)!=(0);
  if ($169) {
   $170 = $15;
   $171 = $38;
   $172 = (_HUFv07_decodeSymbolX2($19,$170,$171)|0);
   $173 = $35;
   $174 = ((($173)) + 1|0);
   $35 = $174;
   HEAP8[$173>>0] = $172;
  }
  (_MEM_64bits_443()|0);
  $175 = $15;
  $176 = $38;
  $177 = (_HUFv07_decodeSymbolX2($16,$175,$176)|0);
  $178 = $32;
  $179 = ((($178)) + 1|0);
  $32 = $179;
  HEAP8[$178>>0] = $177;
  (_MEM_64bits_443()|0);
  $180 = $15;
  $181 = $38;
  $182 = (_HUFv07_decodeSymbolX2($17,$180,$181)|0);
  $183 = $33;
  $184 = ((($183)) + 1|0);
  $33 = $184;
  HEAP8[$183>>0] = $182;
  (_MEM_64bits_443()|0);
  $185 = $15;
  $186 = $38;
  $187 = (_HUFv07_decodeSymbolX2($18,$185,$186)|0);
  $188 = $34;
  $189 = ((($188)) + 1|0);
  $34 = $189;
  HEAP8[$188>>0] = $187;
  (_MEM_64bits_443()|0);
  $190 = $15;
  $191 = $38;
  $192 = (_HUFv07_decodeSymbolX2($19,$190,$191)|0);
  $193 = $35;
  $194 = ((($193)) + 1|0);
  $35 = $194;
  HEAP8[$193>>0] = $192;
  $195 = (_MEM_64bits_443()|0);
  $196 = ($195|0)!=(0);
  if ($196) {
   $197 = $15;
   $198 = $38;
   $199 = (_HUFv07_decodeSymbolX2($16,$197,$198)|0);
   $200 = $32;
   $201 = ((($200)) + 1|0);
   $32 = $201;
   HEAP8[$200>>0] = $199;
  }
  $202 = (_MEM_64bits_443()|0);
  $203 = ($202|0)!=(0);
  if ($203) {
   $204 = $15;
   $205 = $38;
   $206 = (_HUFv07_decodeSymbolX2($17,$204,$205)|0);
   $207 = $33;
   $208 = ((($207)) + 1|0);
   $33 = $208;
   HEAP8[$207>>0] = $206;
  }
  $209 = (_MEM_64bits_443()|0);
  $210 = ($209|0)!=(0);
  if ($210) {
   $211 = $15;
   $212 = $38;
   $213 = (_HUFv07_decodeSymbolX2($18,$211,$212)|0);
   $214 = $34;
   $215 = ((($214)) + 1|0);
   $34 = $215;
   HEAP8[$214>>0] = $213;
  }
  $216 = (_MEM_64bits_443()|0);
  $217 = ($216|0)!=(0);
  if ($217) {
   $218 = $15;
   $219 = $38;
   $220 = (_HUFv07_decodeSymbolX2($19,$218,$219)|0);
   $221 = $35;
   $222 = ((($221)) + 1|0);
   $35 = $222;
   HEAP8[$221>>0] = $220;
  }
  $223 = $15;
  $224 = $38;
  $225 = (_HUFv07_decodeSymbolX2($16,$223,$224)|0);
  $226 = $32;
  $227 = ((($226)) + 1|0);
  $32 = $227;
  HEAP8[$226>>0] = $225;
  $228 = $15;
  $229 = $38;
  $230 = (_HUFv07_decodeSymbolX2($17,$228,$229)|0);
  $231 = $33;
  $232 = ((($231)) + 1|0);
  $33 = $232;
  HEAP8[$231>>0] = $230;
  $233 = $15;
  $234 = $38;
  $235 = (_HUFv07_decodeSymbolX2($18,$233,$234)|0);
  $236 = $34;
  $237 = ((($236)) + 1|0);
  $34 = $237;
  HEAP8[$236>>0] = $235;
  $238 = $15;
  $239 = $38;
  $240 = (_HUFv07_decodeSymbolX2($19,$238,$239)|0);
  $241 = $35;
  $242 = ((($241)) + 1|0);
  $35 = $242;
  HEAP8[$241>>0] = $240;
  $243 = (_BITv07_reloadDStream($16)|0);
  $244 = (_BITv07_reloadDStream($17)|0);
  $245 = $243 | $244;
  $246 = (_BITv07_reloadDStream($18)|0);
  $247 = $245 | $246;
  $248 = (_BITv07_reloadDStream($19)|0);
  $249 = $247 | $248;
  $36 = $249;
 }
 $250 = $32;
 $251 = $29;
 $252 = ($250>>>0)>($251>>>0);
 if ($252) {
  $5 = -15;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 }
 $253 = $33;
 $254 = $30;
 $255 = ($253>>>0)>($254>>>0);
 if ($255) {
  $5 = -15;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 }
 $256 = $34;
 $257 = $31;
 $258 = ($256>>>0)>($257>>>0);
 if ($258) {
  $5 = -15;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 }
 $259 = $32;
 $260 = $29;
 $261 = $15;
 $262 = $38;
 (_HUFv07_decodeStreamX2($259,$16,$260,$261,$262)|0);
 $263 = $33;
 $264 = $30;
 $265 = $15;
 $266 = $38;
 (_HUFv07_decodeStreamX2($263,$17,$264,$265,$266)|0);
 $267 = $34;
 $268 = $31;
 $269 = $15;
 $270 = $38;
 (_HUFv07_decodeStreamX2($267,$18,$268,$269,$270)|0);
 $271 = $35;
 $272 = $13;
 $273 = $15;
 $274 = $38;
 (_HUFv07_decodeStreamX2($271,$19,$272,$273,$274)|0);
 $275 = (_BITv07_endOfDStream($16)|0);
 $276 = (_BITv07_endOfDStream($17)|0);
 $277 = $275 & $276;
 $278 = (_BITv07_endOfDStream($18)|0);
 $279 = $277 & $278;
 $280 = (_BITv07_endOfDStream($19)|0);
 $281 = $279 & $280;
 $36 = $281;
 $282 = $36;
 $283 = ($282|0)!=(0);
 if ($283) {
  $284 = $7;
  $5 = $284;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 } else {
  $5 = -15;
  $285 = $5;
  STACKTOP = sp;return ($285|0);
 }
 return (0)|0;
}
function _MEM_readLE16_444($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $4 = (_MEM_isLittleEndian_434()|0);
 $5 = ($4|0)!=(0);
 $6 = $2;
 if ($5) {
  $7 = (_MEM_read16_445($6)|0);
  $1 = $7;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 } else {
  $3 = $6;
  $8 = $3;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = $3;
  $12 = ((($11)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13&255;
  $15 = $14 << 8;
  $16 = (($10) + ($15))|0;
  $17 = $16&65535;
  $1 = $17;
  $18 = $1;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _MEM_read16_445($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $1 = $0;
 $3 = $1;
 ;HEAP8[$2>>0]=HEAP8[$3>>0]|0;HEAP8[$2+1>>0]=HEAP8[$3+1>>0]|0;
 $4 = HEAP16[$2>>1]|0;
 STACKTOP = sp;return ($4|0);
}
function _HUFv07_decompress4X2_DCtx($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $11 = $13;
 $14 = $6;
 $15 = $9;
 $16 = $10;
 $17 = (_HUFv07_readDTableX2($14,$15,$16)|0);
 $12 = $17;
 $18 = $12;
 $19 = (_HUFv07_isError($18)|0);
 $20 = ($19|0)!=(0);
 $21 = $12;
 if ($20) {
  $5 = $21;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 $22 = $10;
 $23 = ($21>>>0)>=($22>>>0);
 if ($23) {
  $5 = -14;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 } else {
  $24 = $12;
  $25 = $11;
  $26 = (($25) + ($24)|0);
  $11 = $26;
  $27 = $12;
  $28 = $10;
  $29 = (($28) - ($27))|0;
  $10 = $29;
  $30 = $7;
  $31 = $8;
  $32 = $11;
  $33 = $10;
  $34 = $6;
  $35 = (_HUFv07_decompress4X2_usingDTable_internal($30,$31,$32,$33,$34)|0);
  $5 = $35;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _HUFv07_readDTableX4($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2128|0);
 $7 = sp + 1864|0;
 $8 = sp + 1352|0;
 $9 = sp + 1264|0;
 $10 = sp + 1192|0;
 $12 = sp + 96|0;
 $13 = sp + 88|0;
 $16 = sp + 76|0;
 $17 = sp + 1348|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 dest=$9; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 dest=$10; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $37 = ((($10)) + 4|0);
 $11 = $37;
 $38 = $4;
 _HUFv07_getDTableDesc($17,$38);
 $39 = HEAP8[$17>>0]|0;
 $40 = $39&255;
 $18 = $40;
 $41 = $4;
 $42 = ((($41)) + 4|0);
 $20 = $42;
 $43 = $20;
 $21 = $43;
 $44 = $18;
 $45 = ($44>>>0)>(16);
 if ($45) {
  $3 = -17;
  $171 = $3;
  STACKTOP = sp;return ($171|0);
 }
 $46 = $5;
 $47 = $6;
 $48 = (_HUFv07_readStats($7,256,$9,$16,$13,$46,$47)|0);
 $19 = $48;
 $49 = $19;
 $50 = (_HUFv07_isError($49)|0);
 $51 = ($50|0)!=(0);
 if ($51) {
  $52 = $19;
  $3 = $52;
  $171 = $3;
  STACKTOP = sp;return ($171|0);
 }
 $53 = HEAP32[$13>>2]|0;
 $54 = $18;
 $55 = ($53>>>0)>($54>>>0);
 if ($55) {
  $3 = -17;
  $171 = $3;
  STACKTOP = sp;return ($171|0);
 }
 $56 = HEAP32[$13>>2]|0;
 $14 = $56;
 while(1) {
  $57 = $14;
  $58 = (($9) + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0);
  if (!($60)) {
   break;
  }
  $61 = $14;
  $62 = (($61) + -1)|0;
  $14 = $62;
 }
 $23 = 0;
 $22 = 1;
 while(1) {
  $63 = $22;
  $64 = $14;
  $65 = (($64) + 1)|0;
  $66 = ($63>>>0)<($65>>>0);
  $67 = $23;
  if (!($66)) {
   break;
  }
  $24 = $67;
  $68 = $22;
  $69 = (($9) + ($68<<2)|0);
  $70 = HEAP32[$69>>2]|0;
  $71 = $23;
  $72 = (($71) + ($70))|0;
  $23 = $72;
  $73 = $24;
  $74 = $11;
  $75 = $22;
  $76 = (($74) + ($75<<2)|0);
  HEAP32[$76>>2] = $73;
  $77 = $22;
  $78 = (($77) + 1)|0;
  $22 = $78;
 }
 $79 = $11;
 HEAP32[$79>>2] = $67;
 $80 = $23;
 $15 = $80;
 $25 = 0;
 while(1) {
  $81 = $25;
  $82 = HEAP32[$16>>2]|0;
  $83 = ($81>>>0)<($82>>>0);
  if (!($83)) {
   break;
  }
  $84 = $25;
  $85 = (($7) + ($84)|0);
  $86 = HEAP8[$85>>0]|0;
  $87 = $86&255;
  $26 = $87;
  $88 = $11;
  $89 = $26;
  $90 = (($88) + ($89<<2)|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($91) + 1)|0;
  HEAP32[$90>>2] = $92;
  $27 = $91;
  $93 = $25;
  $94 = $93&255;
  $95 = $27;
  $96 = (($8) + ($95<<1)|0);
  HEAP8[$96>>0] = $94;
  $97 = $26;
  $98 = $97&255;
  $99 = $27;
  $100 = (($8) + ($99<<1)|0);
  $101 = ((($100)) + 1|0);
  HEAP8[$101>>0] = $98;
  $102 = $25;
  $103 = (($102) + 1)|0;
  $25 = $103;
 }
 $104 = $11;
 HEAP32[$104>>2] = 0;
 $28 = $12;
 $105 = $18;
 $106 = HEAP32[$13>>2]|0;
 $107 = (($105) - ($106))|0;
 $108 = (($107) - 1)|0;
 $29 = $108;
 $30 = 0;
 $31 = 1;
 while(1) {
  $109 = $31;
  $110 = $14;
  $111 = (($110) + 1)|0;
  $112 = ($109>>>0)<($111>>>0);
  if (!($112)) {
   break;
  }
  $113 = $30;
  $32 = $113;
  $114 = $31;
  $115 = (($9) + ($114<<2)|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = $31;
  $118 = $29;
  $119 = (($117) + ($118))|0;
  $120 = $116 << $119;
  $121 = $30;
  $122 = (($121) + ($120))|0;
  $30 = $122;
  $123 = $32;
  $124 = $28;
  $125 = $31;
  $126 = (($124) + ($125<<2)|0);
  HEAP32[$126>>2] = $123;
  $127 = $31;
  $128 = (($127) + 1)|0;
  $31 = $128;
 }
 $129 = HEAP32[$13>>2]|0;
 $130 = (($129) + 1)|0;
 $131 = $14;
 $132 = (($130) - ($131))|0;
 $33 = $132;
 $133 = $33;
 $34 = $133;
 while(1) {
  $134 = $34;
  $135 = $18;
  $136 = $33;
  $137 = (($135) - ($136))|0;
  $138 = (($137) + 1)|0;
  $139 = ($134>>>0)<($138>>>0);
  if (!($139)) {
   break;
  }
  $140 = $34;
  $141 = (($12) + (($140*68)|0)|0);
  $35 = $141;
  $36 = 1;
  while(1) {
   $142 = $36;
   $143 = $14;
   $144 = (($143) + 1)|0;
   $145 = ($142>>>0)<($144>>>0);
   if (!($145)) {
    break;
   }
   $146 = $28;
   $147 = $36;
   $148 = (($146) + ($147<<2)|0);
   $149 = HEAP32[$148>>2]|0;
   $150 = $34;
   $151 = $149 >>> $150;
   $152 = $35;
   $153 = $36;
   $154 = (($152) + ($153<<2)|0);
   HEAP32[$154>>2] = $151;
   $155 = $36;
   $156 = (($155) + 1)|0;
   $36 = $156;
  }
  $157 = $34;
  $158 = (($157) + 1)|0;
  $34 = $158;
 }
 $159 = $21;
 $160 = $18;
 $161 = $15;
 $162 = $14;
 $163 = HEAP32[$13>>2]|0;
 $164 = (($163) + 1)|0;
 _HUFv07_fillDTableX4($159,$160,$8,$161,$10,$12,$162,$164);
 $165 = $18;
 $166 = $165&255;
 $167 = ((($17)) + 2|0);
 HEAP8[$167>>0] = $166;
 $168 = ((($17)) + 1|0);
 HEAP8[$168>>0] = 1;
 $169 = $4;
 ;HEAP8[$169>>0]=HEAP8[$17>>0]|0;HEAP8[$169+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$169+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$169+3>>0]=HEAP8[$17+3>>0]|0;
 $170 = $19;
 $3 = $170;
 $171 = $3;
 STACKTOP = sp;return ($171|0);
}
function _HUFv07_fillDTableX4($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $16 = sp + 44|0;
 $27 = sp + 144|0;
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $30 = $15;
 $31 = $9;
 $32 = (($30) - ($31))|0;
 $17 = $32;
 $33 = $15;
 $34 = $14;
 $35 = (($33) - ($34))|0;
 $18 = $35;
 $36 = $13;
 dest=$16; src=$36; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $19 = 0;
 while(1) {
  $37 = $19;
  $38 = $11;
  $39 = ($37>>>0)<($38>>>0);
  if (!($39)) {
   break;
  }
  $40 = $10;
  $41 = $19;
  $42 = (($40) + ($41<<1)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $20 = $44;
  $45 = $10;
  $46 = $19;
  $47 = (($45) + ($46<<1)|0);
  $48 = ((($47)) + 1|0);
  $49 = HEAP8[$48>>0]|0;
  $50 = $49&255;
  $21 = $50;
  $51 = $15;
  $52 = $21;
  $53 = (($51) - ($52))|0;
  $22 = $53;
  $54 = $21;
  $55 = (($16) + ($54<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $23 = $56;
  $57 = $9;
  $58 = $22;
  $59 = (($57) - ($58))|0;
  $60 = 1 << $59;
  $24 = $60;
  $61 = $9;
  $62 = $22;
  $63 = (($61) - ($62))|0;
  $64 = $18;
  $65 = ($63>>>0)>=($64>>>0);
  L4: do {
   if ($65) {
    $66 = $22;
    $67 = $17;
    $68 = (($66) + ($67))|0;
    $26 = $68;
    $69 = $26;
    $70 = ($69|0)<(1);
    $$ = $70 ? 1 : $68;
    $26 = $$;
    $71 = $12;
    $72 = $26;
    $73 = (($71) + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $25 = $74;
    $75 = $8;
    $76 = $23;
    $77 = (($75) + ($76<<2)|0);
    $78 = $9;
    $79 = $22;
    $80 = (($78) - ($79))|0;
    $81 = $22;
    $82 = $13;
    $83 = $22;
    $84 = (($82) + (($83*68)|0)|0);
    $85 = $26;
    $86 = $10;
    $87 = $25;
    $88 = (($86) + ($87<<1)|0);
    $89 = $11;
    $90 = $25;
    $91 = (($89) - ($90))|0;
    $92 = $15;
    $93 = $20;
    _HUFv07_fillDTableX4Level2($77,$80,$81,$84,$85,$88,$91,$92,$93);
   } else {
    $94 = $20;
    _MEM_writeLE16_446($27,$94);
    $95 = $22;
    $96 = $95&255;
    $97 = ((($27)) + 2|0);
    HEAP8[$97>>0] = $96;
    $98 = ((($27)) + 3|0);
    HEAP8[$98>>0] = 1;
    $99 = $23;
    $100 = $24;
    $101 = (($99) + ($100))|0;
    $29 = $101;
    $102 = $23;
    $28 = $102;
    while(1) {
     $103 = $28;
     $104 = $29;
     $105 = ($103>>>0)<($104>>>0);
     if (!($105)) {
      break L4;
     }
     $106 = $8;
     $107 = $28;
     $108 = (($106) + ($107<<2)|0);
     ;HEAP16[$108>>1]=HEAP16[$27>>1]|0;HEAP16[$108+2>>1]=HEAP16[$27+2>>1]|0;
     $109 = $28;
     $110 = (($109) + 1)|0;
     $28 = $110;
    }
   }
  } while(0);
  $111 = $24;
  $112 = $21;
  $113 = (($16) + ($112<<2)|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + ($111))|0;
  HEAP32[$113>>2] = $115;
  $116 = $19;
  $117 = (($116) + 1)|0;
  $19 = $117;
 }
 STACKTOP = sp;return;
}
function _HUFv07_fillDTableX4Level2($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $18 = sp + 140|0;
 $19 = sp + 40|0;
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = $3;
 $13 = $4;
 $14 = $5;
 $15 = $6;
 $16 = $7;
 $17 = $8;
 $30 = $12;
 dest=$19; src=$30; stop=dest+68|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $31 = $13;
 $32 = ($31|0)>(1);
 L1: do {
  if ($32) {
   $33 = $13;
   $34 = (($19) + ($33<<2)|0);
   $35 = HEAP32[$34>>2]|0;
   $21 = $35;
   $36 = $17;
   _MEM_writeLE16_446($18,$36);
   $37 = $11;
   $38 = $37&255;
   $39 = ((($18)) + 2|0);
   HEAP8[$39>>0] = $38;
   $40 = ((($18)) + 3|0);
   HEAP8[$40>>0] = 1;
   $20 = 0;
   while(1) {
    $41 = $20;
    $42 = $21;
    $43 = ($41>>>0)<($42>>>0);
    if (!($43)) {
     break L1;
    }
    $44 = $9;
    $45 = $20;
    $46 = (($44) + ($45<<2)|0);
    ;HEAP16[$46>>1]=HEAP16[$18>>1]|0;HEAP16[$46+2>>1]=HEAP16[$18+2>>1]|0;
    $47 = $20;
    $48 = (($47) + 1)|0;
    $20 = $48;
   }
  }
 } while(0);
 $22 = 0;
 while(1) {
  $49 = $22;
  $50 = $15;
  $51 = ($49>>>0)<($50>>>0);
  if (!($51)) {
   break;
  }
  $52 = $14;
  $53 = $22;
  $54 = (($52) + ($53<<1)|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $55&255;
  $23 = $56;
  $57 = $14;
  $58 = $22;
  $59 = (($57) + ($58<<1)|0);
  $60 = ((($59)) + 1|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $24 = $62;
  $63 = $16;
  $64 = $24;
  $65 = (($63) - ($64))|0;
  $25 = $65;
  $66 = $10;
  $67 = $25;
  $68 = (($66) - ($67))|0;
  $69 = 1 << $68;
  $26 = $69;
  $70 = $24;
  $71 = (($19) + ($70<<2)|0);
  $72 = HEAP32[$71>>2]|0;
  $27 = $72;
  $73 = $27;
  $28 = $73;
  $74 = $27;
  $75 = $26;
  $76 = (($74) + ($75))|0;
  $29 = $76;
  $77 = $17;
  $78 = $77&65535;
  $79 = $23;
  $80 = $79 << 8;
  $81 = (($78) + ($80))|0;
  $82 = $81&65535;
  _MEM_writeLE16_446($18,$82);
  $83 = $25;
  $84 = $11;
  $85 = (($83) + ($84))|0;
  $86 = $85&255;
  $87 = ((($18)) + 2|0);
  HEAP8[$87>>0] = $86;
  $88 = ((($18)) + 3|0);
  HEAP8[$88>>0] = 2;
  while(1) {
   $89 = $9;
   $90 = $28;
   $91 = (($90) + 1)|0;
   $28 = $91;
   $92 = (($89) + ($90<<2)|0);
   ;HEAP16[$92>>1]=HEAP16[$18>>1]|0;HEAP16[$92+2>>1]=HEAP16[$18+2>>1]|0;
   $93 = $28;
   $94 = $29;
   $95 = ($93>>>0)<($94>>>0);
   if (!($95)) {
    break;
   }
  }
  $96 = $26;
  $97 = $24;
  $98 = (($19) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = (($99) + ($96))|0;
  HEAP32[$98>>2] = $100;
  $101 = $22;
  $102 = (($101) + 1)|0;
  $22 = $102;
 }
 STACKTOP = sp;return;
}
function _MEM_writeLE16_446($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = (_MEM_isLittleEndian_434()|0);
 $6 = ($5|0)!=(0);
 $7 = $2;
 if ($6) {
  $8 = $3;
  _MEM_write16_447($7,$8);
  STACKTOP = sp;return;
 } else {
  $4 = $7;
  $9 = $3;
  $10 = $9&255;
  $11 = $4;
  HEAP8[$11>>0] = $10;
  $12 = $3;
  $13 = $12&65535;
  $14 = $13 >> 8;
  $15 = $14&255;
  $16 = $4;
  $17 = ((($16)) + 1|0);
  HEAP8[$17>>0] = $15;
  STACKTOP = sp;return;
 }
}
function _MEM_write16_447($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $2 = $0;
 HEAP16[$3>>1] = $1;
 $4 = $2;
 ;HEAP8[$4>>0]=HEAP8[$3>>0]|0;HEAP8[$4+1>>0]=HEAP8[$3+1>>0]|0;
 STACKTOP = sp;return;
}
function _HUFv07_decompress1X4_usingDTable($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $11 = sp + 24|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $10;
 _HUFv07_getDTableDesc($11,$12);
 $13 = ((($11)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = ($15|0)!=(1);
 if ($16) {
  $5 = -1;
  $23 = $5;
  STACKTOP = sp;return ($23|0);
 } else {
  $17 = $6;
  $18 = $7;
  $19 = $8;
  $20 = $9;
  $21 = $10;
  $22 = (_HUFv07_decompress1X4_usingDTable_internal($17,$18,$19,$20,$21)|0);
  $5 = $22;
  $23 = $5;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _HUFv07_decompress1X4_usingDTable_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $11 = sp + 24|0;
 $17 = sp + 64|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $18 = $8;
 $19 = $9;
 $20 = (_BITv07_initDStream($11,$18,$19)|0);
 $12 = $20;
 $21 = $12;
 $22 = (_HUFv07_isError($21)|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = $12;
  $5 = $24;
  $42 = $5;
  STACKTOP = sp;return ($42|0);
 }
 $25 = $6;
 $13 = $25;
 $26 = $13;
 $27 = $7;
 $28 = (($26) + ($27)|0);
 $14 = $28;
 $29 = $10;
 $30 = ((($29)) + 4|0);
 $15 = $30;
 $31 = $15;
 $16 = $31;
 $32 = $10;
 _HUFv07_getDTableDesc($17,$32);
 $33 = $13;
 $34 = $14;
 $35 = $16;
 $36 = ((($17)) + 2|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 (_HUFv07_decodeStreamX4($33,$11,$34,$35,$38)|0);
 $39 = (_BITv07_endOfDStream($11)|0);
 $40 = ($39|0)!=(0);
 if ($40) {
  $41 = $7;
  $5 = $41;
  $42 = $5;
  STACKTOP = sp;return ($42|0);
 } else {
  $5 = -15;
  $42 = $5;
  STACKTOP = sp;return ($42|0);
 }
 return (0)|0;
}
function _HUFv07_decodeStreamX4($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $11 = $5;
 $10 = $11;
 while(1) {
  $12 = $6;
  $13 = (_BITv07_reloadDStream($12)|0);
  $14 = ($13|0)==(0);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $7;
  $17 = ((($16)) + -7|0);
  $18 = ($15>>>0)<($17>>>0);
  if (!($18)) {
   break;
  }
  $19 = (_MEM_64bits_443()|0);
  $20 = ($19|0)!=(0);
  if ($20) {
   $21 = $5;
   $22 = $6;
   $23 = $8;
   $24 = $9;
   $25 = (_HUFv07_decodeSymbolX4($21,$22,$23,$24)|0);
   $26 = $5;
   $27 = (($26) + ($25)|0);
   $5 = $27;
  }
  (_MEM_64bits_443()|0);
  $28 = $5;
  $29 = $6;
  $30 = $8;
  $31 = $9;
  $32 = (_HUFv07_decodeSymbolX4($28,$29,$30,$31)|0);
  $33 = $5;
  $34 = (($33) + ($32)|0);
  $5 = $34;
  $35 = (_MEM_64bits_443()|0);
  $36 = ($35|0)!=(0);
  if ($36) {
   $37 = $5;
   $38 = $6;
   $39 = $8;
   $40 = $9;
   $41 = (_HUFv07_decodeSymbolX4($37,$38,$39,$40)|0);
   $42 = $5;
   $43 = (($42) + ($41)|0);
   $5 = $43;
  }
  $44 = $5;
  $45 = $6;
  $46 = $8;
  $47 = $9;
  $48 = (_HUFv07_decodeSymbolX4($44,$45,$46,$47)|0);
  $49 = $5;
  $50 = (($49) + ($48)|0);
  $5 = $50;
 }
 while(1) {
  $51 = $6;
  $52 = (_BITv07_reloadDStream($51)|0);
  $53 = ($52|0)==(0);
  if (!($53)) {
   break;
  }
  $54 = $5;
  $55 = $7;
  $56 = ((($55)) + -2|0);
  $57 = ($54>>>0)<=($56>>>0);
  if (!($57)) {
   break;
  }
  $58 = $5;
  $59 = $6;
  $60 = $8;
  $61 = $9;
  $62 = (_HUFv07_decodeSymbolX4($58,$59,$60,$61)|0);
  $63 = $5;
  $64 = (($63) + ($62)|0);
  $5 = $64;
 }
 while(1) {
  $65 = $5;
  $66 = $7;
  $67 = ((($66)) + -2|0);
  $68 = ($65>>>0)<=($67>>>0);
  $69 = $5;
  if (!($68)) {
   break;
  }
  $70 = $6;
  $71 = $8;
  $72 = $9;
  $73 = (_HUFv07_decodeSymbolX4($69,$70,$71,$72)|0);
  $74 = $5;
  $75 = (($74) + ($73)|0);
  $5 = $75;
 }
 $76 = $7;
 $77 = ($69>>>0)<($76>>>0);
 if (!($77)) {
  $85 = $5;
  $86 = $10;
  $87 = $85;
  $88 = $86;
  $89 = (($87) - ($88))|0;
  STACKTOP = sp;return ($89|0);
 }
 $78 = $5;
 $79 = $6;
 $80 = $8;
 $81 = $9;
 $82 = (_HUFv07_decodeLastSymbolX4($78,$79,$80,$81)|0);
 $83 = $5;
 $84 = (($83) + ($82)|0);
 $5 = $84;
 $85 = $5;
 $86 = $10;
 $87 = $85;
 $88 = $86;
 $89 = (($87) - ($88))|0;
 STACKTOP = sp;return ($89|0);
}
function _HUFv07_decodeSymbolX4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (_BITv07_lookBitsFast($9,$10)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;HEAP8[$12+1>>0]=HEAP8[$15+1>>0]|0;
 $16 = $5;
 $17 = $6;
 $18 = $8;
 $19 = (($17) + ($18<<2)|0);
 $20 = ((($19)) + 2|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 _BITv07_skipBits($16,$22);
 $23 = $6;
 $24 = $8;
 $25 = (($23) + ($24<<2)|0);
 $26 = ((($25)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 STACKTOP = sp;return ($28|0);
}
function _HUFv07_decodeLastSymbolX4($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $9 = $5;
 $10 = $7;
 $11 = (_BITv07_lookBitsFast($9,$10)|0);
 $8 = $11;
 $12 = $4;
 $13 = $6;
 $14 = $8;
 $15 = (($13) + ($14<<2)|0);
 ;HEAP8[$12>>0]=HEAP8[$15>>0]|0;
 $16 = $6;
 $17 = $8;
 $18 = (($16) + ($17<<2)|0);
 $19 = ((($18)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = ($21|0)==(1);
 $23 = $5;
 if ($22) {
  $24 = $6;
  $25 = $8;
  $26 = (($24) + ($25<<2)|0);
  $27 = ((($26)) + 2|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  _BITv07_skipBits($23,$29);
  STACKTOP = sp;return 1;
 }
 $30 = ((($23)) + 4|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31>>>0)<(32);
 if (!($32)) {
  STACKTOP = sp;return 1;
 }
 $33 = $5;
 $34 = $6;
 $35 = $8;
 $36 = (($34) + ($35<<2)|0);
 $37 = ((($36)) + 2|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 _BITv07_skipBits($33,$39);
 $40 = $5;
 $41 = ((($40)) + 4|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42>>>0)>(32);
 if (!($43)) {
  STACKTOP = sp;return 1;
 }
 $44 = $5;
 $45 = ((($44)) + 4|0);
 HEAP32[$45>>2] = 32;
 STACKTOP = sp;return 1;
}
function _HUFv07_decompress4X4_usingDTable_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $16 = sp + 144|0;
 $17 = sp + 128|0;
 $18 = sp + 112|0;
 $19 = sp + 96|0;
 $37 = sp + 204|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $44 = $9;
 $45 = ($44>>>0)<(10);
 if ($45) {
  $5 = -15;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 }
 $46 = $8;
 $11 = $46;
 $47 = $6;
 $12 = $47;
 $48 = $12;
 $49 = $7;
 $50 = (($48) + ($49)|0);
 $13 = $50;
 $51 = $10;
 $52 = ((($51)) + 4|0);
 $14 = $52;
 $53 = $14;
 $15 = $53;
 $54 = $11;
 $55 = (_MEM_readLE16_444($54)|0);
 $56 = $55&65535;
 $20 = $56;
 $57 = $11;
 $58 = ((($57)) + 2|0);
 $59 = (_MEM_readLE16_444($58)|0);
 $60 = $59&65535;
 $21 = $60;
 $61 = $11;
 $62 = ((($61)) + 4|0);
 $63 = (_MEM_readLE16_444($62)|0);
 $64 = $63&65535;
 $22 = $64;
 $65 = $9;
 $66 = $20;
 $67 = $21;
 $68 = (($66) + ($67))|0;
 $69 = $22;
 $70 = (($68) + ($69))|0;
 $71 = (($70) + 6)|0;
 $72 = (($65) - ($71))|0;
 $23 = $72;
 $73 = $11;
 $74 = ((($73)) + 6|0);
 $24 = $74;
 $75 = $24;
 $76 = $20;
 $77 = (($75) + ($76)|0);
 $25 = $77;
 $78 = $25;
 $79 = $21;
 $80 = (($78) + ($79)|0);
 $26 = $80;
 $81 = $26;
 $82 = $22;
 $83 = (($81) + ($82)|0);
 $27 = $83;
 $84 = $7;
 $85 = (($84) + 3)|0;
 $86 = (($85>>>0) / 4)&-1;
 $28 = $86;
 $87 = $12;
 $88 = $28;
 $89 = (($87) + ($88)|0);
 $29 = $89;
 $90 = $29;
 $91 = $28;
 $92 = (($90) + ($91)|0);
 $30 = $92;
 $93 = $30;
 $94 = $28;
 $95 = (($93) + ($94)|0);
 $31 = $95;
 $96 = $12;
 $32 = $96;
 $97 = $29;
 $33 = $97;
 $98 = $30;
 $34 = $98;
 $99 = $31;
 $35 = $99;
 $100 = $10;
 _HUFv07_getDTableDesc($37,$100);
 $101 = ((($37)) + 2|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $38 = $103;
 $104 = $23;
 $105 = $9;
 $106 = ($104>>>0)>($105>>>0);
 if ($106) {
  $5 = -15;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 }
 $107 = $24;
 $108 = $20;
 $109 = (_BITv07_initDStream($16,$107,$108)|0);
 $39 = $109;
 $110 = $39;
 $111 = (_HUFv07_isError($110)|0);
 $112 = ($111|0)!=(0);
 if ($112) {
  $113 = $39;
  $5 = $113;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 }
 $114 = $25;
 $115 = $21;
 $116 = (_BITv07_initDStream($17,$114,$115)|0);
 $40 = $116;
 $117 = $40;
 $118 = (_HUFv07_isError($117)|0);
 $119 = ($118|0)!=(0);
 if ($119) {
  $120 = $40;
  $5 = $120;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 }
 $121 = $26;
 $122 = $22;
 $123 = (_BITv07_initDStream($18,$121,$122)|0);
 $41 = $123;
 $124 = $41;
 $125 = (_HUFv07_isError($124)|0);
 $126 = ($125|0)!=(0);
 if ($126) {
  $127 = $41;
  $5 = $127;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 }
 $128 = $27;
 $129 = $23;
 $130 = (_BITv07_initDStream($19,$128,$129)|0);
 $42 = $130;
 $131 = $42;
 $132 = (_HUFv07_isError($131)|0);
 $133 = ($132|0)!=(0);
 if ($133) {
  $134 = $42;
  $5 = $134;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 }
 $135 = (_BITv07_reloadDStream($16)|0);
 $136 = (_BITv07_reloadDStream($17)|0);
 $137 = $135 | $136;
 $138 = (_BITv07_reloadDStream($18)|0);
 $139 = $137 | $138;
 $140 = (_BITv07_reloadDStream($19)|0);
 $141 = $139 | $140;
 $36 = $141;
 while(1) {
  $142 = $36;
  $143 = ($142|0)==(0);
  if (!($143)) {
   break;
  }
  $144 = $35;
  $145 = $13;
  $146 = ((($145)) + -7|0);
  $147 = ($144>>>0)<($146>>>0);
  if (!($147)) {
   break;
  }
  $148 = (_MEM_64bits_443()|0);
  $149 = ($148|0)!=(0);
  if ($149) {
   $150 = $32;
   $151 = $15;
   $152 = $38;
   $153 = (_HUFv07_decodeSymbolX4($150,$16,$151,$152)|0);
   $154 = $32;
   $155 = (($154) + ($153)|0);
   $32 = $155;
  }
  $156 = (_MEM_64bits_443()|0);
  $157 = ($156|0)!=(0);
  if ($157) {
   $158 = $33;
   $159 = $15;
   $160 = $38;
   $161 = (_HUFv07_decodeSymbolX4($158,$17,$159,$160)|0);
   $162 = $33;
   $163 = (($162) + ($161)|0);
   $33 = $163;
  }
  $164 = (_MEM_64bits_443()|0);
  $165 = ($164|0)!=(0);
  if ($165) {
   $166 = $34;
   $167 = $15;
   $168 = $38;
   $169 = (_HUFv07_decodeSymbolX4($166,$18,$167,$168)|0);
   $170 = $34;
   $171 = (($170) + ($169)|0);
   $34 = $171;
  }
  $172 = (_MEM_64bits_443()|0);
  $173 = ($172|0)!=(0);
  if ($173) {
   $174 = $35;
   $175 = $15;
   $176 = $38;
   $177 = (_HUFv07_decodeSymbolX4($174,$19,$175,$176)|0);
   $178 = $35;
   $179 = (($178) + ($177)|0);
   $35 = $179;
  }
  (_MEM_64bits_443()|0);
  $180 = $32;
  $181 = $15;
  $182 = $38;
  $183 = (_HUFv07_decodeSymbolX4($180,$16,$181,$182)|0);
  $184 = $32;
  $185 = (($184) + ($183)|0);
  $32 = $185;
  (_MEM_64bits_443()|0);
  $186 = $33;
  $187 = $15;
  $188 = $38;
  $189 = (_HUFv07_decodeSymbolX4($186,$17,$187,$188)|0);
  $190 = $33;
  $191 = (($190) + ($189)|0);
  $33 = $191;
  (_MEM_64bits_443()|0);
  $192 = $34;
  $193 = $15;
  $194 = $38;
  $195 = (_HUFv07_decodeSymbolX4($192,$18,$193,$194)|0);
  $196 = $34;
  $197 = (($196) + ($195)|0);
  $34 = $197;
  (_MEM_64bits_443()|0);
  $198 = $35;
  $199 = $15;
  $200 = $38;
  $201 = (_HUFv07_decodeSymbolX4($198,$19,$199,$200)|0);
  $202 = $35;
  $203 = (($202) + ($201)|0);
  $35 = $203;
  $204 = (_MEM_64bits_443()|0);
  $205 = ($204|0)!=(0);
  if ($205) {
   $206 = $32;
   $207 = $15;
   $208 = $38;
   $209 = (_HUFv07_decodeSymbolX4($206,$16,$207,$208)|0);
   $210 = $32;
   $211 = (($210) + ($209)|0);
   $32 = $211;
  }
  $212 = (_MEM_64bits_443()|0);
  $213 = ($212|0)!=(0);
  if ($213) {
   $214 = $33;
   $215 = $15;
   $216 = $38;
   $217 = (_HUFv07_decodeSymbolX4($214,$17,$215,$216)|0);
   $218 = $33;
   $219 = (($218) + ($217)|0);
   $33 = $219;
  }
  $220 = (_MEM_64bits_443()|0);
  $221 = ($220|0)!=(0);
  if ($221) {
   $222 = $34;
   $223 = $15;
   $224 = $38;
   $225 = (_HUFv07_decodeSymbolX4($222,$18,$223,$224)|0);
   $226 = $34;
   $227 = (($226) + ($225)|0);
   $34 = $227;
  }
  $228 = (_MEM_64bits_443()|0);
  $229 = ($228|0)!=(0);
  if ($229) {
   $230 = $35;
   $231 = $15;
   $232 = $38;
   $233 = (_HUFv07_decodeSymbolX4($230,$19,$231,$232)|0);
   $234 = $35;
   $235 = (($234) + ($233)|0);
   $35 = $235;
  }
  $236 = $32;
  $237 = $15;
  $238 = $38;
  $239 = (_HUFv07_decodeSymbolX4($236,$16,$237,$238)|0);
  $240 = $32;
  $241 = (($240) + ($239)|0);
  $32 = $241;
  $242 = $33;
  $243 = $15;
  $244 = $38;
  $245 = (_HUFv07_decodeSymbolX4($242,$17,$243,$244)|0);
  $246 = $33;
  $247 = (($246) + ($245)|0);
  $33 = $247;
  $248 = $34;
  $249 = $15;
  $250 = $38;
  $251 = (_HUFv07_decodeSymbolX4($248,$18,$249,$250)|0);
  $252 = $34;
  $253 = (($252) + ($251)|0);
  $34 = $253;
  $254 = $35;
  $255 = $15;
  $256 = $38;
  $257 = (_HUFv07_decodeSymbolX4($254,$19,$255,$256)|0);
  $258 = $35;
  $259 = (($258) + ($257)|0);
  $35 = $259;
  $260 = (_BITv07_reloadDStream($16)|0);
  $261 = (_BITv07_reloadDStream($17)|0);
  $262 = $260 | $261;
  $263 = (_BITv07_reloadDStream($18)|0);
  $264 = $262 | $263;
  $265 = (_BITv07_reloadDStream($19)|0);
  $266 = $264 | $265;
  $36 = $266;
 }
 $267 = $32;
 $268 = $29;
 $269 = ($267>>>0)>($268>>>0);
 if ($269) {
  $5 = -15;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 }
 $270 = $33;
 $271 = $30;
 $272 = ($270>>>0)>($271>>>0);
 if ($272) {
  $5 = -15;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 }
 $273 = $34;
 $274 = $31;
 $275 = ($273>>>0)>($274>>>0);
 if ($275) {
  $5 = -15;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 }
 $276 = $32;
 $277 = $29;
 $278 = $15;
 $279 = $38;
 (_HUFv07_decodeStreamX4($276,$16,$277,$278,$279)|0);
 $280 = $33;
 $281 = $30;
 $282 = $15;
 $283 = $38;
 (_HUFv07_decodeStreamX4($280,$17,$281,$282,$283)|0);
 $284 = $34;
 $285 = $31;
 $286 = $15;
 $287 = $38;
 (_HUFv07_decodeStreamX4($284,$18,$285,$286,$287)|0);
 $288 = $35;
 $289 = $13;
 $290 = $15;
 $291 = $38;
 (_HUFv07_decodeStreamX4($288,$19,$289,$290,$291)|0);
 $292 = (_BITv07_endOfDStream($16)|0);
 $293 = (_BITv07_endOfDStream($17)|0);
 $294 = $292 & $293;
 $295 = (_BITv07_endOfDStream($18)|0);
 $296 = $294 & $295;
 $297 = (_BITv07_endOfDStream($19)|0);
 $298 = $296 & $297;
 $43 = $298;
 $299 = $43;
 $300 = ($299|0)!=(0);
 if ($300) {
  $301 = $7;
  $5 = $301;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 } else {
  $5 = -15;
  $302 = $5;
  STACKTOP = sp;return ($302|0);
 }
 return (0)|0;
}
function _HUFv07_decompress4X4_DCtx($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $11 = $13;
 $14 = $6;
 $15 = $9;
 $16 = $10;
 $17 = (_HUFv07_readDTableX4($14,$15,$16)|0);
 $12 = $17;
 $18 = $12;
 $19 = (_HUFv07_isError($18)|0);
 $20 = ($19|0)!=(0);
 $21 = $12;
 if ($20) {
  $5 = $21;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 $22 = $10;
 $23 = ($21>>>0)>=($22>>>0);
 if ($23) {
  $5 = -14;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 } else {
  $24 = $12;
  $25 = $11;
  $26 = (($25) + ($24)|0);
  $11 = $26;
  $27 = $12;
  $28 = $10;
  $29 = (($28) - ($27))|0;
  $10 = $29;
  $30 = $7;
  $31 = $8;
  $32 = $11;
  $33 = $10;
  $34 = $6;
  $35 = (_HUFv07_decompress4X4_usingDTable_internal($30,$31,$32,$33,$34)|0);
  $5 = $35;
  $36 = $5;
  STACKTOP = sp;return ($36|0);
 }
 return (0)|0;
}
function _HUFv07_selectDecoder($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $8 = $3;
 $9 = $8<<4;
 $10 = $2;
 $11 = (($9>>>0) / ($10>>>0))&-1;
 $4 = $11;
 $12 = $2;
 $13 = $12 >>> 8;
 $5 = $13;
 $14 = $4;
 $15 = (4720 + (($14*24)|0)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $4;
 $18 = (4720 + (($17*24)|0)|0);
 $19 = ((($18)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $5;
 $22 = Math_imul($20, $21)|0;
 $23 = (($16) + ($22))|0;
 $6 = $23;
 $24 = $4;
 $25 = (4720 + (($24*24)|0)|0);
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $4;
 $29 = (4720 + (($28*24)|0)|0);
 $30 = ((($29)) + 8|0);
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = $5;
 $34 = Math_imul($32, $33)|0;
 $35 = (($27) + ($34))|0;
 $7 = $35;
 $36 = $7;
 $37 = $36 >>> 3;
 $38 = $7;
 $39 = (($38) + ($37))|0;
 $7 = $39;
 $40 = $7;
 $41 = $6;
 $42 = ($40>>>0)<($41>>>0);
 $43 = $42&1;
 STACKTOP = sp;return ($43|0);
}
function _HUFv07_decompress4X_hufOnly($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $12 = $8;
 $13 = ($12|0)==(0);
 if ($13) {
  $5 = -13;
  $32 = $5;
  STACKTOP = sp;return ($32|0);
 }
 $14 = $10;
 $15 = $8;
 $16 = ($14>>>0)>=($15>>>0);
 $17 = $10;
 $18 = ($17>>>0)<=(1);
 $or$cond = $16 | $18;
 if ($or$cond) {
  $5 = -15;
  $32 = $5;
  STACKTOP = sp;return ($32|0);
 }
 $19 = $8;
 $20 = $10;
 $21 = (_HUFv07_selectDecoder($19,$20)|0);
 $11 = $21;
 $22 = $11;
 $23 = ($22|0)!=(0);
 $24 = $6;
 $25 = $7;
 $26 = $8;
 $27 = $9;
 $28 = $10;
 if ($23) {
  $29 = (_HUFv07_decompress4X4_DCtx($24,$25,$26,$27,$28)|0);
  $31 = $29;
 } else {
  $30 = (_HUFv07_decompress4X2_DCtx($24,$25,$26,$27,$28)|0);
  $31 = $30;
 }
 $5 = $31;
 $32 = $5;
 STACKTOP = sp;return ($32|0);
}
function _ZSTDv07_defaultAllocFunction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $3;
 $6 = (_malloc($5)|0);
 $4 = $6;
 $7 = $4;
 STACKTOP = sp;return ($7|0);
}
function _ZSTDv07_defaultFreeFunction($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 _free($4);
 STACKTOP = sp;return;
}
function _ZSTDv07_decompressBegin($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 21536|0);
 HEAP32[$4>>2] = 5;
 $5 = $1;
 $6 = ((($5)) + 21580|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = ((($7)) + 21520|0);
 HEAP32[$8>>2] = 0;
 $9 = $1;
 $10 = ((($9)) + 21524|0);
 HEAP32[$10>>2] = 0;
 $11 = $1;
 $12 = ((($11)) + 21528|0);
 HEAP32[$12>>2] = 0;
 $13 = $1;
 $14 = ((($13)) + 21532|0);
 HEAP32[$14>>2] = 0;
 $15 = $1;
 $16 = ((($15)) + 5132|0);
 HEAP32[$16>>2] = 201326604;
 $17 = $1;
 $18 = ((($17)) + 21588|0);
 HEAP32[$18>>2] = 0;
 $19 = $1;
 $20 = ((($19)) + 21584|0);
 HEAP32[$20>>2] = 0;
 $21 = $1;
 $22 = ((($21)) + 21684|0);
 HEAP32[$22>>2] = 0;
 $2 = 0;
 while(1) {
  $23 = $2;
  $24 = ($23|0)<(3);
  if (!($24)) {
   break;
  }
  $25 = $2;
  $26 = (5104 + ($25<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $1;
  $29 = ((($28)) + 21540|0);
  $30 = $2;
  $31 = (($29) + ($30<<2)|0);
  HEAP32[$31>>2] = $27;
  $32 = $2;
  $33 = (($32) + 1)|0;
  $2 = $33;
 }
 STACKTOP = sp;return 0;
}
function _ZSTDv07_createDCtx_advanced($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)!=(0|0);
 if (!($4)) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   ;HEAP32[$0>>2]=HEAP32[5116>>2]|0;HEAP32[$0+4>>2]=HEAP32[5116+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[5116+8>>2]|0;
  }
 }
 $8 = HEAP32[$0>>2]|0;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)!=(0|0);
  if ($12) {
   $13 = HEAP32[$0>>2]|0;
   $14 = ((($0)) + 8|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = (FUNCTION_TABLE_iii[$13 & 7]($15,152808)|0);
   $2 = $16;
   $17 = $2;
   $18 = ($17|0)!=(0|0);
   if ($18) {
    $19 = $2;
    $20 = ((($19)) + 21692|0);
    ;HEAP32[$20>>2]=HEAP32[$0>>2]|0;HEAP32[$20+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$20+8>>2]=HEAP32[$0+8>>2]|0;
    $21 = $2;
    (_ZSTDv07_decompressBegin($21)|0);
    $22 = $2;
    $1 = $22;
    $23 = $1;
    STACKTOP = sp;return ($23|0);
   } else {
    $1 = 0;
    $23 = $1;
    STACKTOP = sp;return ($23|0);
   }
  }
 }
 $1 = 0;
 $23 = $1;
 STACKTOP = sp;return ($23|0);
}
function _ZSTDv07_createDCtx() {
 var $0 = 0, $defaultCustomMem$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $defaultCustomMem$byval_copy = sp;
 ;HEAP32[$defaultCustomMem$byval_copy>>2]=HEAP32[5116>>2]|0;HEAP32[$defaultCustomMem$byval_copy+4>>2]=HEAP32[5116+4>>2]|0;HEAP32[$defaultCustomMem$byval_copy+8>>2]=HEAP32[5116+8>>2]|0;
 $0 = (_ZSTDv07_createDCtx_advanced($defaultCustomMem$byval_copy)|0);
 STACKTOP = sp;return ($0|0);
}
function _ZSTDv07_freeDCtx($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 } else {
  $5 = $2;
  $6 = ((($5)) + 21692|0);
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $2;
  $10 = ((($9)) + 21692|0);
  $11 = ((($10)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $2;
  FUNCTION_TABLE_vii[$8 & 15]($12,$13);
  $1 = 0;
  $14 = $1;
  STACKTOP = sp;return ($14|0);
 }
 return (0)|0;
}
function _ZSTDv07_getFrameParams($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $18 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $21 = $5;
 $7 = $21;
 $22 = $6;
 $23 = ($22>>>0)<(5);
 if ($23) {
  $3 = 5;
  $198 = $3;
  STACKTOP = sp;return ($198|0);
 }
 $24 = $5;
 $25 = (_MEM_readLE32_433($24)|0);
 $26 = ($25|0)!=(-47205081);
 $27 = $5;
 if ($26) {
  $28 = (_MEM_readLE32_433($27)|0);
  $29 = $28 & -16;
  $30 = ($29|0)==(407710288);
  if (!($30)) {
   $3 = -2;
   $198 = $3;
   STACKTOP = sp;return ($198|0);
  }
  $31 = $6;
  $32 = ($31>>>0)<(8);
  if ($32) {
   $3 = 8;
   $198 = $3;
   STACKTOP = sp;return ($198|0);
  } else {
   $33 = $4;
   ;HEAP32[$33>>2]=0|0;HEAP32[$33+4>>2]=0|0;HEAP32[$33+8>>2]=0|0;HEAP32[$33+12>>2]=0|0;HEAP32[$33+16>>2]=0|0;HEAP32[$33+20>>2]=0|0;
   $34 = $5;
   $35 = ((($34)) + 4|0);
   $36 = (_MEM_readLE32_433($35)|0);
   $37 = $4;
   $38 = $37;
   $39 = $38;
   HEAP32[$39>>2] = $36;
   $40 = (($38) + 4)|0;
   $41 = $40;
   HEAP32[$41>>2] = 0;
   $42 = $4;
   $43 = ((($42)) + 8|0);
   HEAP32[$43>>2] = 0;
   $3 = 0;
   $198 = $3;
   STACKTOP = sp;return ($198|0);
  }
 }
 $44 = $6;
 $45 = (_ZSTDv07_frameHeaderSize($27,$44)|0);
 $8 = $45;
 $46 = $6;
 $47 = $8;
 $48 = ($46>>>0)<($47>>>0);
 if ($48) {
  $49 = $8;
  $3 = $49;
  $198 = $3;
  STACKTOP = sp;return ($198|0);
 }
 $50 = $7;
 $51 = ((($50)) + 4|0);
 $52 = HEAP8[$51>>0]|0;
 $9 = $52;
 $10 = 5;
 $53 = $9;
 $54 = $53&255;
 $55 = $54 & 3;
 $11 = $55;
 $56 = $9;
 $57 = $56&255;
 $58 = $57 >> 2;
 $59 = $58 & 1;
 $12 = $59;
 $60 = $9;
 $61 = $60&255;
 $62 = $61 >> 5;
 $63 = $62 & 1;
 $13 = $63;
 $64 = $9;
 $65 = $64&255;
 $66 = $65 >> 6;
 $14 = $66;
 $67 = (_MEM_32bits_439()|0);
 $68 = ($67|0)!=(0);
 $69 = $68 ? 25 : 27;
 $70 = 1 << $69;
 $15 = $70;
 $16 = 0;
 $17 = 0;
 $71 = $18;
 $72 = $71;
 HEAP32[$72>>2] = 0;
 $73 = (($71) + 4)|0;
 $74 = $73;
 HEAP32[$74>>2] = 0;
 $75 = $9;
 $76 = $75&255;
 $77 = $76 & 8;
 $78 = ($77|0)!=(0);
 if ($78) {
  $3 = -5;
  $198 = $3;
  STACKTOP = sp;return ($198|0);
 }
 $79 = $13;
 $80 = ($79|0)!=(0);
 do {
  if (!($80)) {
   $81 = $7;
   $82 = $10;
   $83 = (($82) + 1)|0;
   $10 = $83;
   $84 = (($81) + ($82)|0);
   $85 = HEAP8[$84>>0]|0;
   $19 = $85;
   $86 = $19;
   $87 = $86&255;
   $88 = $87 >> 3;
   $89 = (($88) + 10)|0;
   $20 = $89;
   $90 = $20;
   $91 = (_MEM_32bits_439()|0);
   $92 = ($91|0)!=(0);
   $93 = $92 ? 25 : 27;
   $94 = ($90>>>0)>($93>>>0);
   if (!($94)) {
    $95 = $20;
    $96 = 1 << $95;
    $16 = $96;
    $97 = $16;
    $98 = $97 >>> 3;
    $99 = $19;
    $100 = $99&255;
    $101 = $100 & 7;
    $102 = Math_imul($98, $101)|0;
    $103 = $16;
    $104 = (($103) + ($102))|0;
    $16 = $104;
    break;
   }
   $3 = -5;
   $198 = $3;
   STACKTOP = sp;return ($198|0);
  }
 } while(0);
 $105 = $11;
 switch ($105|0) {
 case 3:  {
  $120 = $7;
  $121 = $10;
  $122 = (($120) + ($121)|0);
  $123 = (_MEM_readLE32_433($122)|0);
  $17 = $123;
  $124 = $10;
  $125 = (($124) + 4)|0;
  $10 = $125;
  break;
 }
 case 1:  {
  $106 = $7;
  $107 = $10;
  $108 = (($106) + ($107)|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = $109&255;
  $17 = $110;
  $111 = $10;
  $112 = (($111) + 1)|0;
  $10 = $112;
  break;
 }
 case 2:  {
  $113 = $7;
  $114 = $10;
  $115 = (($113) + ($114)|0);
  $116 = (_MEM_readLE16_444($115)|0);
  $117 = $116&65535;
  $17 = $117;
  $118 = $10;
  $119 = (($118) + 2)|0;
  $10 = $119;
  break;
 }
 default: {
 }
 }
 $126 = $14;
 switch ($126|0) {
 case 3:  {
  $158 = $7;
  $159 = $10;
  $160 = (($158) + ($159)|0);
  $161 = (_MEM_readLE64_440($160)|0);
  $162 = tempRet0;
  $163 = $18;
  $164 = $163;
  HEAP32[$164>>2] = $161;
  $165 = (($163) + 4)|0;
  $166 = $165;
  HEAP32[$166>>2] = $162;
  break;
 }
 case 1:  {
  $138 = $7;
  $139 = $10;
  $140 = (($138) + ($139)|0);
  $141 = (_MEM_readLE16_444($140)|0);
  $142 = $141&65535;
  $143 = (($142) + 256)|0;
  $144 = ($143|0)<(0);
  $145 = $144 << 31 >> 31;
  $146 = $18;
  $147 = $146;
  HEAP32[$147>>2] = $143;
  $148 = (($146) + 4)|0;
  $149 = $148;
  HEAP32[$149>>2] = $145;
  break;
 }
 case 2:  {
  $150 = $7;
  $151 = $10;
  $152 = (($150) + ($151)|0);
  $153 = (_MEM_readLE32_433($152)|0);
  $154 = $18;
  $155 = $154;
  HEAP32[$155>>2] = $153;
  $156 = (($154) + 4)|0;
  $157 = $156;
  HEAP32[$157>>2] = 0;
  break;
 }
 default: {
  $127 = $13;
  $128 = ($127|0)!=(0);
  if ($128) {
   $129 = $7;
   $130 = $10;
   $131 = (($129) + ($130)|0);
   $132 = HEAP8[$131>>0]|0;
   $133 = $132&255;
   $134 = $18;
   $135 = $134;
   HEAP32[$135>>2] = $133;
   $136 = (($134) + 4)|0;
   $137 = $136;
   HEAP32[$137>>2] = 0;
  }
 }
 }
 $167 = $16;
 $168 = ($167|0)!=(0);
 if (!($168)) {
  $169 = $18;
  $170 = $169;
  $171 = HEAP32[$170>>2]|0;
  $172 = (($169) + 4)|0;
  $173 = $172;
  $174 = HEAP32[$173>>2]|0;
  $16 = $171;
 }
 $175 = $16;
 $176 = $15;
 $177 = ($175>>>0)>($176>>>0);
 if ($177) {
  $3 = -5;
  $198 = $3;
  STACKTOP = sp;return ($198|0);
 } else {
  $178 = $18;
  $179 = $178;
  $180 = HEAP32[$179>>2]|0;
  $181 = (($178) + 4)|0;
  $182 = $181;
  $183 = HEAP32[$182>>2]|0;
  $184 = $4;
  $185 = $184;
  $186 = $185;
  HEAP32[$186>>2] = $180;
  $187 = (($185) + 4)|0;
  $188 = $187;
  HEAP32[$188>>2] = $183;
  $189 = $16;
  $190 = $4;
  $191 = ((($190)) + 8|0);
  HEAP32[$191>>2] = $189;
  $192 = $17;
  $193 = $4;
  $194 = ((($193)) + 12|0);
  HEAP32[$194>>2] = $192;
  $195 = $12;
  $196 = $4;
  $197 = ((($196)) + 16|0);
  HEAP32[$197>>2] = $195;
  $3 = 0;
  $198 = $3;
  STACKTOP = sp;return ($198|0);
 }
 return (0)|0;
}
function _ZSTDv07_frameHeaderSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $9 = $4;
 $10 = ($9>>>0)<(5);
 if ($10) {
  $2 = -14;
  $47 = $2;
  STACKTOP = sp;return ($47|0);
 }
 $11 = $3;
 $12 = ((($11)) + 4|0);
 $13 = HEAP8[$12>>0]|0;
 $5 = $13;
 $14 = $5;
 $15 = $14&255;
 $16 = $15 & 3;
 $6 = $16;
 $17 = $5;
 $18 = $17&255;
 $19 = $18 >> 5;
 $20 = $19 & 1;
 $7 = $20;
 $21 = $5;
 $22 = $21&255;
 $23 = $22 >> 6;
 $8 = $23;
 $24 = $7;
 $25 = ($24|0)!=(0);
 $26 = $25 ^ 1;
 $27 = $26&1;
 $28 = (5 + ($27))|0;
 $29 = $6;
 $30 = (5128 + ($29<<2)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($28) + ($31))|0;
 $33 = $8;
 $34 = (5144 + ($33<<2)|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($32) + ($35))|0;
 $37 = $7;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $8;
  $40 = (5144 + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  $43 = $42 ^ 1;
  $45 = $43;
 } else {
  $45 = 0;
 }
 $44 = $45&1;
 $46 = (($36) + ($44))|0;
 $2 = $46;
 $47 = $2;
 STACKTOP = sp;return ($47|0);
}
function _ZSTDv07_getcBlockSize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $7 = $9;
 $10 = $5;
 $11 = ($10>>>0)<(3);
 if ($11) {
  $3 = -14;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 $12 = $7;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 >> 6;
 $16 = $6;
 HEAP32[$16>>2] = $15;
 $17 = $7;
 $18 = ((($17)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $7;
 $22 = ((($21)) + 1|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 8;
 $26 = (($20) + ($25))|0;
 $27 = $7;
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 & 7;
 $31 = $30 << 16;
 $32 = (($26) + ($31))|0;
 $8 = $32;
 $33 = $6;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(2);
 $36 = $8;
 $37 = $35 ? $36 : 0;
 $38 = $6;
 $39 = ((($38)) + 4|0);
 HEAP32[$39>>2] = $37;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)==(3);
 if ($42) {
  $3 = 0;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 $43 = $6;
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)==(2);
 if ($45) {
  $3 = 1;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 } else {
  $46 = $8;
  $3 = $46;
  $47 = $3;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function _ZSTDv07_decodeLiteralsBlock($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0;
 var $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0;
 var $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0;
 var $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $20 = $5;
 $7 = $20;
 $21 = $6;
 $22 = ($21>>>0)<(3);
 if ($22) {
  $3 = -15;
  $370 = $3;
  STACKTOP = sp;return ($370|0);
 }
 $23 = $7;
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $25 >> 6;
 switch ($26|0) {
 case 0:  {
  $10 = 0;
  $27 = $7;
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = $29 >> 4;
  $31 = $30 & 3;
  $11 = $31;
  $32 = $6;
  $33 = ($32>>>0)<(5);
  if ($33) {
   $3 = -15;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  $34 = $11;
  switch ($34|0) {
  case 3:  {
   $11 = 5;
   $89 = $7;
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = $91 & 15;
   $93 = $92 << 14;
   $94 = $7;
   $95 = ((($94)) + 1|0);
   $96 = HEAP8[$95>>0]|0;
   $97 = $96&255;
   $98 = $97 << 6;
   $99 = (($93) + ($98))|0;
   $100 = $7;
   $101 = ((($100)) + 2|0);
   $102 = HEAP8[$101>>0]|0;
   $103 = $102&255;
   $104 = $103 >> 2;
   $105 = (($99) + ($104))|0;
   $8 = $105;
   $106 = $7;
   $107 = ((($106)) + 2|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $109 & 3;
   $111 = $110 << 16;
   $112 = $7;
   $113 = ((($112)) + 3|0);
   $114 = HEAP8[$113>>0]|0;
   $115 = $114&255;
   $116 = $115 << 8;
   $117 = (($111) + ($116))|0;
   $118 = $7;
   $119 = ((($118)) + 4|0);
   $120 = HEAP8[$119>>0]|0;
   $121 = $120&255;
   $122 = (($117) + ($121))|0;
   $9 = $122;
   break;
  }
  case 2:  {
   $11 = 4;
   $61 = $7;
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = $63 & 15;
   $65 = $64 << 10;
   $66 = $7;
   $67 = ((($66)) + 1|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = $69 << 2;
   $71 = (($65) + ($70))|0;
   $72 = $7;
   $73 = ((($72)) + 2|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = $75 >> 6;
   $77 = (($71) + ($76))|0;
   $8 = $77;
   $78 = $7;
   $79 = ((($78)) + 2|0);
   $80 = HEAP8[$79>>0]|0;
   $81 = $80&255;
   $82 = $81 & 63;
   $83 = $82 << 8;
   $84 = $7;
   $85 = ((($84)) + 3|0);
   $86 = HEAP8[$85>>0]|0;
   $87 = $86&255;
   $88 = (($83) + ($87))|0;
   $9 = $88;
   break;
  }
  default: {
   $11 = 3;
   $35 = $7;
   $36 = HEAP8[$35>>0]|0;
   $37 = $36&255;
   $38 = $37 & 16;
   $10 = $38;
   $39 = $7;
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $41 & 15;
   $43 = $42 << 6;
   $44 = $7;
   $45 = ((($44)) + 1|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = $46&255;
   $48 = $47 >> 2;
   $49 = (($43) + ($48))|0;
   $8 = $49;
   $50 = $7;
   $51 = ((($50)) + 1|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = $53 & 3;
   $55 = $54 << 8;
   $56 = $7;
   $57 = ((($56)) + 2|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = (($55) + ($59))|0;
   $9 = $60;
  }
  }
  $123 = $8;
  $124 = ($123>>>0)>(131072);
  if ($124) {
   $3 = -15;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  $125 = $9;
  $126 = $11;
  $127 = (($125) + ($126))|0;
  $128 = $6;
  $129 = ($127>>>0)>($128>>>0);
  if ($129) {
   $3 = -15;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  $130 = $10;
  $131 = ($130|0)!=(0);
  $132 = $4;
  $133 = ((($132)) + 5132|0);
  $134 = $4;
  $135 = ((($134)) + 21708|0);
  $136 = $8;
  $137 = $7;
  $138 = $11;
  $139 = (($137) + ($138)|0);
  $140 = $9;
  if ($131) {
   $141 = (_HUFv07_decompress1X2_DCtx($133,$135,$136,$139,$140)|0);
   $143 = $141;
  } else {
   $142 = (_HUFv07_decompress4X_hufOnly($133,$135,$136,$139,$140)|0);
   $143 = $142;
  }
  $144 = (_ERR_isError_430($143)|0);
  $145 = ($144|0)!=(0);
  if ($145) {
   $3 = -15;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  } else {
   $146 = $4;
   $147 = ((($146)) + 21708|0);
   $148 = $4;
   $149 = ((($148)) + 21688|0);
   HEAP32[$149>>2] = $147;
   $150 = $8;
   $151 = $4;
   $152 = ((($151)) + 21704|0);
   HEAP32[$152>>2] = $150;
   $153 = $4;
   $154 = ((($153)) + 21584|0);
   HEAP32[$154>>2] = 1;
   $155 = $4;
   $156 = ((($155)) + 21708|0);
   $157 = $4;
   $158 = ((($157)) + 21704|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = (($156) + ($159)|0);
   ;HEAP8[$160>>0]=0|0;HEAP8[$160+1>>0]=0|0;HEAP8[$160+2>>0]=0|0;HEAP8[$160+3>>0]=0|0;HEAP8[$160+4>>0]=0|0;HEAP8[$160+5>>0]=0|0;HEAP8[$160+6>>0]=0|0;HEAP8[$160+7>>0]=0|0;
   $161 = $9;
   $162 = $11;
   $163 = (($161) + ($162))|0;
   $3 = $163;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  break;
 }
 case 1:  {
  $164 = $7;
  $165 = HEAP8[$164>>0]|0;
  $166 = $165&255;
  $167 = $166 >> 4;
  $168 = $167 & 3;
  $14 = $168;
  $169 = $14;
  $170 = ($169|0)!=(1);
  if ($170) {
   $3 = -15;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  $171 = $4;
  $172 = ((($171)) + 21584|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = ($173|0)==(0);
  if ($174) {
   $3 = -20;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  $14 = 3;
  $175 = $7;
  $176 = HEAP8[$175>>0]|0;
  $177 = $176&255;
  $178 = $177 & 15;
  $179 = $178 << 6;
  $180 = $7;
  $181 = ((($180)) + 1|0);
  $182 = HEAP8[$181>>0]|0;
  $183 = $182&255;
  $184 = $183 >> 2;
  $185 = (($179) + ($184))|0;
  $12 = $185;
  $186 = $7;
  $187 = ((($186)) + 1|0);
  $188 = HEAP8[$187>>0]|0;
  $189 = $188&255;
  $190 = $189 & 3;
  $191 = $190 << 8;
  $192 = $7;
  $193 = ((($192)) + 2|0);
  $194 = HEAP8[$193>>0]|0;
  $195 = $194&255;
  $196 = (($191) + ($195))|0;
  $13 = $196;
  $197 = $13;
  $198 = $14;
  $199 = (($197) + ($198))|0;
  $200 = $6;
  $201 = ($199>>>0)>($200>>>0);
  if ($201) {
   $3 = -15;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  $202 = $4;
  $203 = ((($202)) + 21708|0);
  $204 = $12;
  $205 = $7;
  $206 = $14;
  $207 = (($205) + ($206)|0);
  $208 = $13;
  $209 = $4;
  $210 = ((($209)) + 5132|0);
  $211 = (_HUFv07_decompress1X4_usingDTable($203,$204,$207,$208,$210)|0);
  $15 = $211;
  $212 = $15;
  $213 = (_ERR_isError_430($212)|0);
  $214 = ($213|0)!=(0);
  if ($214) {
   $3 = -15;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  } else {
   $215 = $4;
   $216 = ((($215)) + 21708|0);
   $217 = $4;
   $218 = ((($217)) + 21688|0);
   HEAP32[$218>>2] = $216;
   $219 = $12;
   $220 = $4;
   $221 = ((($220)) + 21704|0);
   HEAP32[$221>>2] = $219;
   $222 = $4;
   $223 = ((($222)) + 21708|0);
   $224 = $4;
   $225 = ((($224)) + 21704|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = (($223) + ($226)|0);
   ;HEAP8[$227>>0]=0|0;HEAP8[$227+1>>0]=0|0;HEAP8[$227+2>>0]=0|0;HEAP8[$227+3>>0]=0|0;HEAP8[$227+4>>0]=0|0;HEAP8[$227+5>>0]=0|0;HEAP8[$227+6>>0]=0|0;HEAP8[$227+7>>0]=0|0;
   $228 = $13;
   $229 = $14;
   $230 = (($228) + ($229))|0;
   $3 = $230;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  break;
 }
 case 2:  {
  $231 = $7;
  $232 = HEAP8[$231>>0]|0;
  $233 = $232&255;
  $234 = $233 >> 4;
  $235 = $234 & 3;
  $17 = $235;
  $236 = $17;
  switch ($236|0) {
  case 3:  {
   $251 = $7;
   $252 = HEAP8[$251>>0]|0;
   $253 = $252&255;
   $254 = $253 & 15;
   $255 = $254 << 16;
   $256 = $7;
   $257 = ((($256)) + 1|0);
   $258 = HEAP8[$257>>0]|0;
   $259 = $258&255;
   $260 = $259 << 8;
   $261 = (($255) + ($260))|0;
   $262 = $7;
   $263 = ((($262)) + 2|0);
   $264 = HEAP8[$263>>0]|0;
   $265 = $264&255;
   $266 = (($261) + ($265))|0;
   $16 = $266;
   break;
  }
  case 2:  {
   $241 = $7;
   $242 = HEAP8[$241>>0]|0;
   $243 = $242&255;
   $244 = $243 & 15;
   $245 = $244 << 8;
   $246 = $7;
   $247 = ((($246)) + 1|0);
   $248 = HEAP8[$247>>0]|0;
   $249 = $248&255;
   $250 = (($245) + ($249))|0;
   $16 = $250;
   break;
  }
  default: {
   $17 = 1;
   $237 = $7;
   $238 = HEAP8[$237>>0]|0;
   $239 = $238&255;
   $240 = $239 & 31;
   $16 = $240;
  }
  }
  $267 = $17;
  $268 = $16;
  $269 = (($267) + ($268))|0;
  $270 = (($269) + 8)|0;
  $271 = $6;
  $272 = ($270>>>0)>($271>>>0);
  if (!($272)) {
   $300 = $7;
   $301 = $17;
   $302 = (($300) + ($301)|0);
   $303 = $4;
   $304 = ((($303)) + 21688|0);
   HEAP32[$304>>2] = $302;
   $305 = $16;
   $306 = $4;
   $307 = ((($306)) + 21704|0);
   HEAP32[$307>>2] = $305;
   $308 = $17;
   $309 = $16;
   $310 = (($308) + ($309))|0;
   $3 = $310;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  $273 = $16;
  $274 = $17;
  $275 = (($273) + ($274))|0;
  $276 = $6;
  $277 = ($275>>>0)>($276>>>0);
  if ($277) {
   $3 = -15;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  } else {
   $278 = $4;
   $279 = ((($278)) + 21708|0);
   $280 = $7;
   $281 = $17;
   $282 = (($280) + ($281)|0);
   $283 = $16;
   _memcpy(($279|0),($282|0),($283|0))|0;
   $284 = $4;
   $285 = ((($284)) + 21708|0);
   $286 = $4;
   $287 = ((($286)) + 21688|0);
   HEAP32[$287>>2] = $285;
   $288 = $16;
   $289 = $4;
   $290 = ((($289)) + 21704|0);
   HEAP32[$290>>2] = $288;
   $291 = $4;
   $292 = ((($291)) + 21708|0);
   $293 = $4;
   $294 = ((($293)) + 21704|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = (($292) + ($295)|0);
   ;HEAP8[$296>>0]=0|0;HEAP8[$296+1>>0]=0|0;HEAP8[$296+2>>0]=0|0;HEAP8[$296+3>>0]=0|0;HEAP8[$296+4>>0]=0|0;HEAP8[$296+5>>0]=0|0;HEAP8[$296+6>>0]=0|0;HEAP8[$296+7>>0]=0|0;
   $297 = $17;
   $298 = $16;
   $299 = (($297) + ($298))|0;
   $3 = $299;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  break;
 }
 case 3:  {
  $311 = $7;
  $312 = HEAP8[$311>>0]|0;
  $313 = $312&255;
  $314 = $313 >> 4;
  $315 = $314 & 3;
  $19 = $315;
  $316 = $19;
  switch ($316|0) {
  case 3:  {
   $331 = $7;
   $332 = HEAP8[$331>>0]|0;
   $333 = $332&255;
   $334 = $333 & 15;
   $335 = $334 << 16;
   $336 = $7;
   $337 = ((($336)) + 1|0);
   $338 = HEAP8[$337>>0]|0;
   $339 = $338&255;
   $340 = $339 << 8;
   $341 = (($335) + ($340))|0;
   $342 = $7;
   $343 = ((($342)) + 2|0);
   $344 = HEAP8[$343>>0]|0;
   $345 = $344&255;
   $346 = (($341) + ($345))|0;
   $18 = $346;
   $347 = $6;
   $348 = ($347>>>0)<(4);
   if ($348) {
    $3 = -15;
    $370 = $3;
    STACKTOP = sp;return ($370|0);
   }
   break;
  }
  case 2:  {
   $321 = $7;
   $322 = HEAP8[$321>>0]|0;
   $323 = $322&255;
   $324 = $323 & 15;
   $325 = $324 << 8;
   $326 = $7;
   $327 = ((($326)) + 1|0);
   $328 = HEAP8[$327>>0]|0;
   $329 = $328&255;
   $330 = (($325) + ($329))|0;
   $18 = $330;
   break;
  }
  default: {
   $19 = 1;
   $317 = $7;
   $318 = HEAP8[$317>>0]|0;
   $319 = $318&255;
   $320 = $319 & 31;
   $18 = $320;
  }
  }
  $349 = $18;
  $350 = ($349>>>0)>(131072);
  if ($350) {
   $3 = -15;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  } else {
   $351 = $4;
   $352 = ((($351)) + 21708|0);
   $353 = $7;
   $354 = $19;
   $355 = (($353) + ($354)|0);
   $356 = HEAP8[$355>>0]|0;
   $357 = $356&255;
   $358 = $357&255;
   $359 = $18;
   $360 = (($359) + 8)|0;
   _memset(($352|0),($358|0),($360|0))|0;
   $361 = $4;
   $362 = ((($361)) + 21708|0);
   $363 = $4;
   $364 = ((($363)) + 21688|0);
   HEAP32[$364>>2] = $362;
   $365 = $18;
   $366 = $4;
   $367 = ((($366)) + 21704|0);
   HEAP32[$367>>2] = $365;
   $368 = $19;
   $369 = (($368) + 1)|0;
   $3 = $369;
   $370 = $3;
   STACKTOP = sp;return ($370|0);
  }
  break;
 }
 default: {
  // unreachable;
 }
 }
 return (0)|0;
}
function _ZSTDv07_buildSeqTable($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $12 = sp + 32|0;
 $19 = sp + 4|0;
 $20 = sp + 48|0;
 $10 = $0;
 $11 = $1;
 HEAP32[$12>>2] = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 $16 = $6;
 $17 = $7;
 $18 = $8;
 $22 = $11;
 L1: do {
  switch ($22|0) {
  case 1:  {
   $23 = $15;
   $24 = ($23|0)!=(0);
   if (!($24)) {
    $9 = -14;
    break L1;
   }
   $25 = $14;
   $26 = HEAP8[$25>>0]|0;
   $27 = $26&255;
   $28 = HEAP32[$12>>2]|0;
   $29 = ($27>>>0)>($28>>>0);
   if ($29) {
    $9 = -15;
    break L1;
   } else {
    $30 = $10;
    $31 = $14;
    $32 = HEAP8[$31>>0]|0;
    (_FSEv07_buildDTable_rle($30,$32)|0);
    $9 = 1;
    break L1;
   }
   break;
  }
  case 0:  {
   $33 = $10;
   $34 = $16;
   $35 = HEAP32[$12>>2]|0;
   $36 = $17;
   (_FSEv07_buildDTable($33,$34,$35,$36)|0);
   $9 = 0;
   break;
  }
  case 2:  {
   $37 = $18;
   $38 = ($37|0)!=(0);
   if ($38) {
    $9 = 0;
    break L1;
   } else {
    $9 = -15;
    break L1;
   }
   break;
  }
  default: {
   $39 = $14;
   $40 = $15;
   $41 = (_FSEv07_readNCount($20,$12,$19,$39,$40)|0);
   $21 = $41;
   $42 = $21;
   $43 = (_ERR_isError_430($42)|0);
   $44 = ($43|0)!=(0);
   if ($44) {
    $9 = -15;
    break L1;
   }
   $45 = HEAP32[$19>>2]|0;
   $46 = $13;
   $47 = ($45>>>0)>($46>>>0);
   if ($47) {
    $9 = -15;
    break L1;
   } else {
    $48 = $10;
    $49 = HEAP32[$12>>2]|0;
    $50 = HEAP32[$19>>2]|0;
    (_FSEv07_buildDTable($48,$20,$49,$50)|0);
    $51 = $21;
    $9 = $51;
    break L1;
   }
  }
  }
 } while(0);
 $52 = $9;
 STACKTOP = sp;return ($52|0);
}
function _ZSTDv07_decodeSeqHeaders($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $8 = $0;
 $9 = $1;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $25 = $13;
 $15 = $25;
 $26 = $15;
 $27 = $14;
 $28 = (($26) + ($27)|0);
 $16 = $28;
 $29 = $15;
 $17 = $29;
 $30 = $14;
 $31 = ($30>>>0)<(1);
 if ($31) {
  $7 = -14;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 $32 = $17;
 $33 = ((($32)) + 1|0);
 $17 = $33;
 $34 = HEAP8[$32>>0]|0;
 $35 = $34&255;
 $18 = $35;
 $36 = $18;
 $37 = ($36|0)!=(0);
 if (!($37)) {
  $38 = $8;
  HEAP32[$38>>2] = 0;
  $7 = 1;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 $39 = $18;
 $40 = ($39|0)>(127);
 do {
  if ($40) {
   $41 = $18;
   $42 = ($41|0)==(255);
   $43 = $17;
   if ($42) {
    $44 = ((($43)) + 2|0);
    $45 = $16;
    $46 = ($44>>>0)>($45>>>0);
    if (!($46)) {
     $47 = $17;
     $48 = (_MEM_readLE16_444($47)|0);
     $49 = $48&65535;
     $50 = (($49) + 32512)|0;
     $18 = $50;
     $51 = $17;
     $52 = ((($51)) + 2|0);
     $17 = $52;
     break;
    }
    $7 = -14;
    $138 = $7;
    STACKTOP = sp;return ($138|0);
   } else {
    $53 = $16;
    $54 = ($43>>>0)>=($53>>>0);
    if (!($54)) {
     $55 = $18;
     $56 = (($55) - 128)|0;
     $57 = $56 << 8;
     $58 = $17;
     $59 = ((($58)) + 1|0);
     $17 = $59;
     $60 = HEAP8[$58>>0]|0;
     $61 = $60&255;
     $62 = (($57) + ($61))|0;
     $18 = $62;
     break;
    }
    $7 = -14;
    $138 = $7;
    STACKTOP = sp;return ($138|0);
   }
  }
 } while(0);
 $63 = $18;
 $64 = $8;
 HEAP32[$64>>2] = $63;
 $65 = $17;
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = $67 >> 6;
 $19 = $68;
 $69 = $17;
 $70 = HEAP8[$69>>0]|0;
 $71 = $70&255;
 $72 = $71 >> 4;
 $73 = $72 & 3;
 $20 = $73;
 $74 = $17;
 $75 = HEAP8[$74>>0]|0;
 $76 = $75&255;
 $77 = $76 >> 2;
 $78 = $77 & 3;
 $21 = $78;
 $79 = $17;
 $80 = ((($79)) + 1|0);
 $17 = $80;
 $81 = $17;
 $82 = $16;
 $83 = ((($82)) + -3|0);
 $84 = ($81>>>0)>($83>>>0);
 if ($84) {
  $7 = -14;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 $85 = $9;
 $86 = $19;
 $87 = $17;
 $88 = $16;
 $89 = $17;
 $90 = $88;
 $91 = $89;
 $92 = (($90) - ($91))|0;
 $93 = $12;
 $94 = (_ZSTDv07_buildSeqTable($85,$86,35,9,$87,$92,6660,6,$93)|0);
 $22 = $94;
 $95 = $22;
 $96 = (_ERR_isError_430($95)|0);
 $97 = ($96|0)!=(0);
 if ($97) {
  $7 = -15;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 $98 = $22;
 $99 = $17;
 $100 = (($99) + ($98)|0);
 $17 = $100;
 $101 = $11;
 $102 = $20;
 $103 = $17;
 $104 = $16;
 $105 = $17;
 $106 = $104;
 $107 = $105;
 $108 = (($106) - ($107))|0;
 $109 = $12;
 $110 = (_ZSTDv07_buildSeqTable($101,$102,28,8,$103,$108,6732,5,$109)|0);
 $23 = $110;
 $111 = $23;
 $112 = (_ERR_isError_430($111)|0);
 $113 = ($112|0)!=(0);
 if ($113) {
  $7 = -15;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 $114 = $23;
 $115 = $17;
 $116 = (($115) + ($114)|0);
 $17 = $116;
 $117 = $10;
 $118 = $21;
 $119 = $17;
 $120 = $16;
 $121 = $17;
 $122 = $120;
 $123 = $121;
 $124 = (($122) - ($123))|0;
 $125 = $12;
 $126 = (_ZSTDv07_buildSeqTable($117,$118,52,9,$119,$124,6790,6,$125)|0);
 $24 = $126;
 $127 = $24;
 $128 = (_ERR_isError_430($127)|0);
 $129 = ($128|0)!=(0);
 if ($129) {
  $7 = -15;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 } else {
  $130 = $24;
  $131 = $17;
  $132 = (($131) + ($130)|0);
  $17 = $132;
  $133 = $17;
  $134 = $15;
  $135 = $133;
  $136 = $134;
  $137 = (($135) - ($136))|0;
  $7 = $137;
  $138 = $7;
  STACKTOP = sp;return ($138|0);
 }
 return (0)|0;
}
function _ZSTDv07_checkContinuity($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $3;
 $5 = $2;
 $6 = ((($5)) + 21520|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4|0)!=($7|0);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 $9 = $2;
 $10 = ((($9)) + 21520|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $2;
 $13 = ((($12)) + 21532|0);
 HEAP32[$13>>2] = $11;
 $14 = $3;
 $15 = $2;
 $16 = ((($15)) + 21520|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $2;
 $19 = ((($18)) + 21524|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $17;
 $22 = $20;
 $23 = (($21) - ($22))|0;
 $24 = (0 - ($23))|0;
 $25 = (($14) + ($24)|0);
 $26 = $2;
 $27 = ((($26)) + 21528|0);
 HEAP32[$27>>2] = $25;
 $28 = $3;
 $29 = $2;
 $30 = ((($29)) + 21524|0);
 HEAP32[$30>>2] = $28;
 $31 = $3;
 $32 = $2;
 $33 = ((($32)) + 21520|0);
 HEAP32[$33>>2] = $31;
 STACKTOP = sp;return;
}
function _ZSTDv07_decompressBlock_internal($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $13 = $9;
 $11 = $13;
 $14 = $10;
 $15 = ($14>>>0)>=(131072);
 if ($15) {
  $5 = -14;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 $16 = $6;
 $17 = $9;
 $18 = $10;
 $19 = (_ZSTDv07_decodeLiteralsBlock($16,$17,$18)|0);
 $12 = $19;
 $20 = $12;
 $21 = (_ERR_isError_430($20)|0);
 $22 = ($21|0)!=(0);
 $23 = $12;
 if ($22) {
  $5 = $23;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 } else {
  $24 = $11;
  $25 = (($24) + ($23)|0);
  $11 = $25;
  $26 = $12;
  $27 = $10;
  $28 = (($27) - ($26))|0;
  $10 = $28;
  $29 = $6;
  $30 = $7;
  $31 = $8;
  $32 = $11;
  $33 = $10;
  $34 = (_ZSTDv07_decompressSequences($29,$30,$31,$32,$33)|0);
  $5 = $34;
  $35 = $5;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function _ZSTDv07_decompressSequences($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $$byval_copy = sp + 168|0;
 $16 = sp + 120|0;
 $24 = sp + 88|0;
 $26 = sp + 32|0;
 $29 = sp + 12|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $33 = $9;
 $11 = $33;
 $34 = $11;
 $35 = $10;
 $36 = (($34) + ($35)|0);
 $12 = $36;
 $37 = $7;
 $13 = $37;
 $38 = $13;
 $39 = $8;
 $40 = (($38) + ($39)|0);
 $14 = $40;
 $41 = $13;
 $15 = $41;
 $42 = $6;
 $43 = ((($42)) + 21688|0);
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$16>>2] = $44;
 $45 = HEAP32[$16>>2]|0;
 $46 = $6;
 $47 = ((($46)) + 21704|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($45) + ($48)|0);
 $17 = $49;
 $50 = $6;
 $18 = $50;
 $51 = $6;
 $52 = ((($51)) + 3080|0);
 $19 = $52;
 $53 = $6;
 $54 = ((($53)) + 2052|0);
 $20 = $54;
 $55 = $6;
 $56 = ((($55)) + 21524|0);
 $57 = HEAP32[$56>>2]|0;
 $21 = $57;
 $58 = $6;
 $59 = ((($58)) + 21528|0);
 $60 = HEAP32[$59>>2]|0;
 $22 = $60;
 $61 = $6;
 $62 = ((($61)) + 21532|0);
 $63 = HEAP32[$62>>2]|0;
 $23 = $63;
 $64 = $18;
 $65 = $19;
 $66 = $20;
 $67 = $6;
 $68 = ((($67)) + 21588|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $11;
 $71 = $10;
 $72 = (_ZSTDv07_decodeSeqHeaders($24,$64,$65,$66,$69,$70,$71)|0);
 $25 = $72;
 $73 = $25;
 $74 = (_ERR_isError_430($73)|0);
 $75 = ($74|0)!=(0);
 $76 = $25;
 if ($75) {
  $5 = $76;
  $167 = $5;
  STACKTOP = sp;return ($167|0);
 }
 $77 = $11;
 $78 = (($77) + ($76)|0);
 $11 = $78;
 $79 = HEAP32[$24>>2]|0;
 $80 = ($79|0)!=(0);
 L5: do {
  if ($80) {
   $81 = $6;
   $82 = ((($81)) + 21588|0);
   HEAP32[$82>>2] = 1;
   $27 = 0;
   while(1) {
    $83 = $27;
    $84 = ($83>>>0)<(3);
    if (!($84)) {
     break;
    }
    $85 = $6;
    $86 = ((($85)) + 21540|0);
    $87 = $27;
    $88 = (($86) + ($87<<2)|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ((($26)) + 40|0);
    $91 = $27;
    $92 = (($90) + ($91<<2)|0);
    HEAP32[$92>>2] = $89;
    $93 = $27;
    $94 = (($93) + 1)|0;
    $27 = $94;
   }
   $95 = $11;
   $96 = $12;
   $97 = $11;
   $98 = $96;
   $99 = $97;
   $100 = (($98) - ($99))|0;
   $101 = (_BITv07_initDStream($26,$95,$100)|0);
   $28 = $101;
   $102 = $28;
   $103 = (_ERR_isError_430($102)|0);
   $104 = ($103|0)!=(0);
   if ($104) {
    $5 = -15;
    $167 = $5;
    STACKTOP = sp;return ($167|0);
   }
   $105 = ((($26)) + 16|0);
   $106 = $18;
   _FSEv07_initDState($105,$26,$106);
   $107 = ((($26)) + 24|0);
   $108 = $20;
   _FSEv07_initDState($107,$26,$108);
   $109 = ((($26)) + 32|0);
   $110 = $19;
   _FSEv07_initDState($109,$26,$110);
   while(1) {
    $111 = (_BITv07_reloadDStream($26)|0);
    $112 = ($111>>>0)<=(2);
    $113 = HEAP32[$24>>2]|0;
    $114 = ($113|0)!=(0);
    $115 = $112 ? $114 : 0;
    $116 = HEAP32[$24>>2]|0;
    if (!($115)) {
     break;
    }
    $117 = (($116) + -1)|0;
    HEAP32[$24>>2] = $117;
    _ZSTDv07_decodeSequence($29,$26);
    $118 = $15;
    $119 = $14;
    $120 = $17;
    $121 = $21;
    $122 = $22;
    $123 = $23;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$29>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$29+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$29+8>>2]|0;
    $124 = (_ZSTDv07_execSequence($118,$119,$$byval_copy,$16,$120,$121,$122,$123)|0);
    $30 = $124;
    $125 = $30;
    $126 = (_ERR_isError_430($125)|0);
    $127 = ($126|0)!=(0);
    $128 = $30;
    if ($127) {
     label = 12;
     break;
    }
    $129 = $15;
    $130 = (($129) + ($128)|0);
    $15 = $130;
   }
   if ((label|0) == 12) {
    $5 = $128;
    $167 = $5;
    STACKTOP = sp;return ($167|0);
   }
   $131 = ($116|0)!=(0);
   if ($131) {
    $5 = -15;
    $167 = $5;
    STACKTOP = sp;return ($167|0);
   }
   $31 = 0;
   while(1) {
    $132 = $31;
    $133 = ($132>>>0)<(3);
    if (!($133)) {
     break L5;
    }
    $134 = ((($26)) + 40|0);
    $135 = $31;
    $136 = (($134) + ($135<<2)|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $6;
    $139 = ((($138)) + 21540|0);
    $140 = $31;
    $141 = (($139) + ($140<<2)|0);
    HEAP32[$141>>2] = $137;
    $142 = $31;
    $143 = (($142) + 1)|0;
    $31 = $143;
   }
  }
 } while(0);
 $144 = $17;
 $145 = HEAP32[$16>>2]|0;
 $146 = $144;
 $147 = $145;
 $148 = (($146) - ($147))|0;
 $32 = $148;
 $149 = $32;
 $150 = $14;
 $151 = $15;
 $152 = $150;
 $153 = $151;
 $154 = (($152) - ($153))|0;
 $155 = ($149>>>0)>($154>>>0);
 if ($155) {
  $5 = -13;
  $167 = $5;
  STACKTOP = sp;return ($167|0);
 } else {
  $156 = $15;
  $157 = HEAP32[$16>>2]|0;
  $158 = $32;
  _memcpy(($156|0),($157|0),($158|0))|0;
  $159 = $32;
  $160 = $15;
  $161 = (($160) + ($159)|0);
  $15 = $161;
  $162 = $15;
  $163 = $13;
  $164 = $162;
  $165 = $163;
  $166 = (($164) - ($165))|0;
  $5 = $166;
  $167 = $5;
  STACKTOP = sp;return ($167|0);
 }
 return (0)|0;
}
function _ZSTDv07_decodeSequence($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 36|0;
 $2 = $1;
 $13 = $2;
 $14 = ((($13)) + 16|0);
 $15 = (_FSEv07_peekSymbol($14)|0);
 $16 = $15&255;
 $4 = $16;
 $17 = $2;
 $18 = ((($17)) + 32|0);
 $19 = (_FSEv07_peekSymbol($18)|0);
 $20 = $19&255;
 $5 = $20;
 $21 = $2;
 $22 = ((($21)) + 24|0);
 $23 = (_FSEv07_peekSymbol($22)|0);
 $24 = $23&255;
 $6 = $24;
 $25 = $4;
 $26 = (5224 + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 $7 = $27;
 $28 = $5;
 $29 = (5368 + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $8 = $30;
 $31 = $6;
 $9 = $31;
 $32 = $7;
 $33 = $8;
 $34 = (($32) + ($33))|0;
 $35 = $9;
 $36 = (($34) + ($35))|0;
 $10 = $36;
 $37 = $6;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = $6;
  $40 = (5580 + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = $2;
  $43 = $9;
  $44 = (_BITv07_readBits($42,$43)|0);
  $45 = (($41) + ($44))|0;
  $11 = $45;
  $46 = (_MEM_32bits_439()|0);
  $47 = ($46|0)!=(0);
  if ($47) {
   $48 = $2;
   (_BITv07_reloadDStream($48)|0);
  }
 } else {
  $11 = 0;
 }
 $49 = $6;
 $50 = ($49>>>0)<=(1);
 do {
  if ($50) {
   $51 = $4;
   $52 = ($51|0)==(0);
   $53 = $52&1;
   $54 = $11;
   $55 = ($54>>>0)<=(1);
   $56 = $55&1;
   $57 = $53 & $56;
   $58 = ($57|0)!=(0);
   if ($58) {
    $59 = $11;
    $60 = (1 - ($59))|0;
    $11 = $60;
   }
   $61 = $11;
   $62 = ($61|0)!=(0);
   $63 = $2;
   $64 = ((($63)) + 40|0);
   if (!($62)) {
    $86 = HEAP32[$64>>2]|0;
    $11 = $86;
    break;
   }
   $65 = $11;
   $66 = (($64) + ($65<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $12 = $67;
   $68 = $11;
   $69 = ($68|0)!=(1);
   if ($69) {
    $70 = $2;
    $71 = ((($70)) + 40|0);
    $72 = ((($71)) + 4|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = $2;
    $75 = ((($74)) + 40|0);
    $76 = ((($75)) + 8|0);
    HEAP32[$76>>2] = $73;
   }
   $77 = $2;
   $78 = ((($77)) + 40|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $2;
   $81 = ((($80)) + 40|0);
   $82 = ((($81)) + 4|0);
   HEAP32[$82>>2] = $79;
   $83 = $12;
   $11 = $83;
   $84 = $2;
   $85 = ((($84)) + 40|0);
   HEAP32[$85>>2] = $83;
  } else {
   $87 = $2;
   $88 = ((($87)) + 40|0);
   $89 = ((($88)) + 4|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $2;
   $92 = ((($91)) + 40|0);
   $93 = ((($92)) + 8|0);
   HEAP32[$93>>2] = $90;
   $94 = $2;
   $95 = ((($94)) + 40|0);
   $96 = HEAP32[$95>>2]|0;
   $97 = $2;
   $98 = ((($97)) + 40|0);
   $99 = ((($98)) + 4|0);
   HEAP32[$99>>2] = $96;
   $100 = $11;
   $101 = $2;
   $102 = ((($101)) + 40|0);
   HEAP32[$102>>2] = $100;
  }
 } while(0);
 $103 = $11;
 $104 = ((($3)) + 8|0);
 HEAP32[$104>>2] = $103;
 $105 = $5;
 $106 = (5696 + ($105<<2)|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = $5;
 $109 = ($108>>>0)>(31);
 if ($109) {
  $110 = $2;
  $111 = $8;
  $112 = (_BITv07_readBits($110,$111)|0);
  $114 = $112;
 } else {
  $114 = 0;
 }
 $113 = (($107) + ($114))|0;
 $115 = ((($3)) + 4|0);
 HEAP32[$115>>2] = $113;
 $116 = (_MEM_32bits_439()|0);
 $117 = ($116|0)!=(0);
 if ($117) {
  $118 = $8;
  $119 = $7;
  $120 = (($118) + ($119))|0;
  $121 = ($120>>>0)>(24);
  if ($121) {
   $122 = $2;
   (_BITv07_reloadDStream($122)|0);
  }
 }
 $123 = $4;
 $124 = (5908 + ($123<<2)|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = $4;
 $127 = ($126>>>0)>(15);
 if ($127) {
  $128 = $2;
  $129 = $7;
  $130 = (_BITv07_readBits($128,$129)|0);
  $132 = $130;
 } else {
  $132 = 0;
 }
 $131 = (($125) + ($132))|0;
 HEAP32[$3>>2] = $131;
 $133 = (_MEM_32bits_439()|0);
 $134 = ($133|0)!=(0);
 $135 = $10;
 $136 = ($135>>>0)>(31);
 $or$cond = $134 | $136;
 if ($or$cond) {
  $137 = $2;
  (_BITv07_reloadDStream($137)|0);
 }
 $138 = $2;
 $139 = ((($138)) + 16|0);
 $140 = $2;
 _FSEv07_updateState($139,$140);
 $141 = $2;
 $142 = ((($141)) + 32|0);
 $143 = $2;
 _FSEv07_updateState($142,$143);
 $144 = (_MEM_32bits_439()|0);
 $145 = ($144|0)!=(0);
 if (!($145)) {
  $147 = $2;
  $148 = ((($147)) + 24|0);
  $149 = $2;
  _FSEv07_updateState($148,$149);
  ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;
  STACKTOP = sp;return;
 }
 $146 = $2;
 (_BITv07_reloadDStream($146)|0);
 $147 = $2;
 $148 = ((($147)) + 24|0);
 $149 = $2;
 _FSEv07_updateState($148,$149);
 ;HEAP32[$0>>2]=HEAP32[$3>>2]|0;HEAP32[$0+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$3+8>>2]|0;
 STACKTOP = sp;return;
}
function _ZSTDv07_execSequence($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $9 = $0;
 $10 = $1;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 $14 = $6;
 $15 = $7;
 $24 = $9;
 $25 = HEAP32[$2>>2]|0;
 $26 = (($24) + ($25)|0);
 $16 = $26;
 $27 = HEAP32[$2>>2]|0;
 $28 = ((($2)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($27) + ($29))|0;
 $17 = $30;
 $31 = $9;
 $32 = $17;
 $33 = (($31) + ($32)|0);
 $18 = $33;
 $34 = $10;
 $35 = ((($34)) + -8|0);
 $19 = $35;
 $36 = $11;
 $37 = HEAP32[$36>>2]|0;
 $38 = HEAP32[$2>>2]|0;
 $39 = (($37) + ($38)|0);
 $20 = $39;
 $40 = $16;
 $41 = ((($2)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (0 - ($42))|0;
 $44 = (($40) + ($43)|0);
 $21 = $44;
 $45 = $16;
 $46 = $19;
 $47 = ($45>>>0)>($46>>>0);
 $48 = $47&1;
 $49 = $18;
 $50 = $10;
 $51 = ($49>>>0)>($50>>>0);
 $52 = $51&1;
 $53 = $48 | $52;
 $54 = ($53|0)!=(0);
 if ($54) {
  $8 = -13;
  $210 = $8;
  STACKTOP = sp;return ($210|0);
 }
 $55 = $20;
 $56 = $12;
 $57 = ($55>>>0)>($56>>>0);
 if ($57) {
  $8 = -15;
  $210 = $8;
  STACKTOP = sp;return ($210|0);
 }
 $58 = $9;
 $59 = $11;
 $60 = HEAP32[$59>>2]|0;
 $61 = HEAP32[$2>>2]|0;
 _ZSTDv07_wildcopy($58,$60,$61);
 $62 = $16;
 $9 = $62;
 $63 = $20;
 $64 = $11;
 HEAP32[$64>>2] = $63;
 $65 = ((($2)) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = $16;
 $68 = $13;
 $69 = $67;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $72 = ($66>>>0)>($71>>>0);
 do {
  if ($72) {
   $73 = ((($2)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = $16;
   $76 = $14;
   $77 = $75;
   $78 = $76;
   $79 = (($77) - ($78))|0;
   $80 = ($74>>>0)>($79>>>0);
   if ($80) {
    $8 = -15;
    $210 = $8;
    STACKTOP = sp;return ($210|0);
   }
   $81 = $15;
   $82 = $13;
   $83 = $21;
   $84 = $82;
   $85 = $83;
   $86 = (($84) - ($85))|0;
   $87 = (0 - ($86))|0;
   $88 = (($81) + ($87)|0);
   $21 = $88;
   $89 = $21;
   $90 = ((($2)) + 4|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = (($89) + ($91)|0);
   $93 = $15;
   $94 = ($92>>>0)<=($93>>>0);
   if ($94) {
    $95 = $16;
    $96 = $21;
    $97 = ((($2)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    _memmove(($95|0),($96|0),($98|0))|0;
    $99 = $17;
    $8 = $99;
    $210 = $8;
    STACKTOP = sp;return ($210|0);
   }
   $100 = $15;
   $101 = $21;
   $102 = $100;
   $103 = $101;
   $104 = (($102) - ($103))|0;
   $22 = $104;
   $105 = $16;
   $106 = $21;
   $107 = $22;
   _memmove(($105|0),($106|0),($107|0))|0;
   $108 = $16;
   $109 = $22;
   $110 = (($108) + ($109)|0);
   $9 = $110;
   $111 = $22;
   $112 = ((($2)) + 4|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = (($113) - ($111))|0;
   HEAP32[$112>>2] = $114;
   $115 = $13;
   $21 = $115;
   $116 = $9;
   $117 = $19;
   $118 = ($116>>>0)>($117>>>0);
   if (!($118)) {
    $119 = ((($2)) + 4|0);
    $120 = HEAP32[$119>>2]|0;
    $121 = ($120>>>0)<(3);
    if (!($121)) {
     break;
    }
   }
   while(1) {
    $122 = $9;
    $123 = $18;
    $124 = ($122>>>0)<($123>>>0);
    if (!($124)) {
     break;
    }
    $125 = $21;
    $126 = ((($125)) + 1|0);
    $21 = $126;
    $127 = HEAP8[$125>>0]|0;
    $128 = $9;
    $129 = ((($128)) + 1|0);
    $9 = $129;
    HEAP8[$128>>0] = $127;
   }
   $130 = $17;
   $8 = $130;
   $210 = $8;
   STACKTOP = sp;return ($210|0);
  }
 } while(0);
 $131 = ((($2)) + 8|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132>>>0)<(8);
 if ($133) {
  $134 = ((($2)) + 8|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = (5160 + ($135<<2)|0);
  $137 = HEAP32[$136>>2]|0;
  $23 = $137;
  $138 = $21;
  $139 = HEAP8[$138>>0]|0;
  $140 = $9;
  HEAP8[$140>>0] = $139;
  $141 = $21;
  $142 = ((($141)) + 1|0);
  $143 = HEAP8[$142>>0]|0;
  $144 = $9;
  $145 = ((($144)) + 1|0);
  HEAP8[$145>>0] = $143;
  $146 = $21;
  $147 = ((($146)) + 2|0);
  $148 = HEAP8[$147>>0]|0;
  $149 = $9;
  $150 = ((($149)) + 2|0);
  HEAP8[$150>>0] = $148;
  $151 = $21;
  $152 = ((($151)) + 3|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = $9;
  $155 = ((($154)) + 3|0);
  HEAP8[$155>>0] = $153;
  $156 = ((($2)) + 8|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (5192 + ($157<<2)|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = $21;
  $161 = (($160) + ($159)|0);
  $21 = $161;
  $162 = $9;
  $163 = ((($162)) + 4|0);
  $164 = $21;
  _ZSTDv07_copy4($163,$164);
  $165 = $23;
  $166 = $21;
  $167 = (0 - ($165))|0;
  $168 = (($166) + ($167)|0);
  $21 = $168;
 } else {
  $169 = $9;
  $170 = $21;
  _ZSTDv07_copy8($169,$170);
 }
 $171 = $9;
 $172 = ((($171)) + 8|0);
 $9 = $172;
 $173 = $21;
 $174 = ((($173)) + 8|0);
 $21 = $174;
 $175 = $18;
 $176 = $10;
 $177 = ((($176)) + -13|0);
 $178 = ($175>>>0)>($177>>>0);
 $179 = $9;
 L31: do {
  if ($178) {
   $180 = $19;
   $181 = ($179>>>0)<($180>>>0);
   if ($181) {
    $182 = $9;
    $183 = $21;
    $184 = $19;
    $185 = $9;
    $186 = $184;
    $187 = $185;
    $188 = (($186) - ($187))|0;
    _ZSTDv07_wildcopy($182,$183,$188);
    $189 = $19;
    $190 = $9;
    $191 = $189;
    $192 = $190;
    $193 = (($191) - ($192))|0;
    $194 = $21;
    $195 = (($194) + ($193)|0);
    $21 = $195;
    $196 = $19;
    $9 = $196;
   }
   while(1) {
    $197 = $9;
    $198 = $18;
    $199 = ($197>>>0)<($198>>>0);
    if (!($199)) {
     break L31;
    }
    $200 = $21;
    $201 = ((($200)) + 1|0);
    $21 = $201;
    $202 = HEAP8[$200>>0]|0;
    $203 = $9;
    $204 = ((($203)) + 1|0);
    $9 = $204;
    HEAP8[$203>>0] = $202;
   }
  } else {
   $205 = $21;
   $206 = ((($2)) + 4|0);
   $207 = HEAP32[$206>>2]|0;
   $208 = (($207) - 8)|0;
   _ZSTDv07_wildcopy($179,$205,$208);
  }
 } while(0);
 $209 = $17;
 $8 = $209;
 $210 = $8;
 STACKTOP = sp;return ($210|0);
}
function _ZSTDv07_wildcopy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $9 = $4;
 $6 = $9;
 $10 = $3;
 $7 = $10;
 $11 = $7;
 $12 = $5;
 $13 = (($11) + ($12)|0);
 $8 = $13;
 while(1) {
  $14 = $7;
  $15 = $6;
  _ZSTDv07_copy8($14,$15);
  $16 = $7;
  $17 = ((($16)) + 8|0);
  $7 = $17;
  $18 = $6;
  $19 = ((($18)) + 8|0);
  $6 = $19;
  $20 = $7;
  $21 = $8;
  $22 = ($20>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _ZSTDv07_copy4($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;
 STACKTOP = sp;return;
}
function _ZSTDv07_copy8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = $3;
 ;HEAP8[$4>>0]=HEAP8[$5>>0]|0;HEAP8[$4+1>>0]=HEAP8[$5+1>>0]|0;HEAP8[$4+2>>0]=HEAP8[$5+2>>0]|0;HEAP8[$4+3>>0]=HEAP8[$5+3>>0]|0;HEAP8[$4+4>>0]=HEAP8[$5+4>>0]|0;HEAP8[$4+5>>0]=HEAP8[$5+5>>0]|0;HEAP8[$4+6>>0]=HEAP8[$5+6>>0]|0;HEAP8[$4+7>>0]=HEAP8[$5+7>>0]|0;
 STACKTOP = sp;return;
}
function _FSEv07_peekSymbol($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $1 = $0;
 $3 = $1;
 $4 = ((($3)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7<<2)|0);
 ;HEAP16[$2>>1]=HEAP16[$8>>1]|0;HEAP16[$2+2>>1]=HEAP16[$8+2>>1]|0;
 $9 = ((($2)) + 2|0);
 $10 = HEAP8[$9>>0]|0;
 STACKTOP = sp;return ($10|0);
}
function _FSEv07_updateState($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $2;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + ($11<<2)|0);
 ;HEAP16[$4>>1]=HEAP16[$12>>1]|0;HEAP16[$4+2>>1]=HEAP16[$12+2>>1]|0;
 $13 = ((($4)) + 3|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $5 = $15;
 $16 = $3;
 $17 = $5;
 $18 = (_BITv07_readBits($16,$17)|0);
 $6 = $18;
 $19 = HEAP16[$4>>1]|0;
 $20 = $19&65535;
 $21 = $6;
 $22 = (($20) + ($21))|0;
 $23 = $2;
 HEAP32[$23>>2] = $22;
 STACKTOP = sp;return;
}
function _ZSTDv07_generateNxBytes($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $8;
 $10 = $6;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $4 = -13;
  $18 = $4;
  STACKTOP = sp;return ($18|0);
 } else {
  $12 = $5;
  $13 = $7;
  $14 = $13&255;
  $15 = $14&255;
  $16 = $8;
  _memset(($12|0),($15|0),($16|0))|0;
  $17 = $8;
  $4 = $17;
  $18 = $4;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _ZSTDv07_decompressFrame($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $19 = sp + 8|0;
 $6 = $0;
 $7 = $1;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $21 = $9;
 $11 = $21;
 $22 = $11;
 $23 = $10;
 $24 = (($22) + ($23)|0);
 $12 = $24;
 $25 = $7;
 $13 = $25;
 $26 = $13;
 $27 = $8;
 $28 = (($26) + ($27)|0);
 $14 = $28;
 $29 = $13;
 $15 = $29;
 $30 = $10;
 $16 = $30;
 $31 = $10;
 $32 = ($31>>>0)<(8);
 if ($32) {
  $5 = -14;
  $134 = $5;
  STACKTOP = sp;return ($134|0);
 }
 $33 = $9;
 $34 = (_ZSTDv07_frameHeaderSize($33,5)|0);
 $17 = $34;
 $35 = $17;
 $36 = (_ERR_isError_430($35)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = $17;
  $5 = $38;
  $134 = $5;
  STACKTOP = sp;return ($134|0);
 }
 $39 = $10;
 $40 = $17;
 $41 = (($40) + 3)|0;
 $42 = ($39>>>0)<($41>>>0);
 if ($42) {
  $5 = -14;
  $134 = $5;
  STACKTOP = sp;return ($134|0);
 }
 $43 = $6;
 $44 = $9;
 $45 = $17;
 $46 = (_ZSTDv07_decodeFrameHeader($43,$44,$45)|0);
 $47 = ($46|0)!=(0);
 if ($47) {
  $5 = -15;
  $134 = $5;
  STACKTOP = sp;return ($134|0);
 }
 $48 = $17;
 $49 = $11;
 $50 = (($49) + ($48)|0);
 $11 = $50;
 $51 = $17;
 $52 = $16;
 $53 = (($52) - ($51))|0;
 $16 = $53;
 L17: while(1) {
  $54 = $11;
  $55 = $12;
  $56 = $11;
  $57 = $55;
  $58 = $56;
  $59 = (($57) - ($58))|0;
  $60 = (_ZSTDv07_getcBlockSize($54,$59,$19)|0);
  $20 = $60;
  $61 = $20;
  $62 = (_ERR_isError_430($61)|0);
  $63 = ($62|0)!=(0);
  if ($63) {
   label = 11;
   break;
  }
  $65 = $11;
  $66 = ((($65)) + 3|0);
  $11 = $66;
  $67 = $16;
  $68 = (($67) - 3)|0;
  $16 = $68;
  $69 = $20;
  $70 = $16;
  $71 = ($69>>>0)>($70>>>0);
  if ($71) {
   label = 13;
   break;
  }
  $72 = HEAP32[$19>>2]|0;
  switch ($72|0) {
  case 0:  {
   $73 = $6;
   $74 = $15;
   $75 = $14;
   $76 = $15;
   $77 = $75;
   $78 = $76;
   $79 = (($77) - ($78))|0;
   $80 = $11;
   $81 = $20;
   $82 = (_ZSTDv07_decompressBlock_internal($73,$74,$79,$80,$81)|0);
   $18 = $82;
   break;
  }
  case 1:  {
   $83 = $15;
   $84 = $14;
   $85 = $15;
   $86 = $84;
   $87 = $85;
   $88 = (($86) - ($87))|0;
   $89 = $11;
   $90 = $20;
   $91 = (_ZSTDv07_copyRawBlock($83,$88,$89,$90)|0);
   $18 = $91;
   break;
  }
  case 2:  {
   $92 = $15;
   $93 = $14;
   $94 = $15;
   $95 = $93;
   $96 = $94;
   $97 = (($95) - ($96))|0;
   $98 = $11;
   $99 = HEAP8[$98>>0]|0;
   $100 = ((($19)) + 4|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = (_ZSTDv07_generateNxBytes($92,$97,$99,$101)|0);
   $18 = $102;
   break;
  }
  case 3:  {
   $103 = $16;
   $104 = ($103|0)!=(0);
   if ($104) {
    label = 19;
    break L17;
   }
   $18 = 0;
   break;
  }
  default: {
   label = 21;
   break L17;
  }
  }
  $105 = HEAP32[$19>>2]|0;
  $106 = ($105|0)==(3);
  if ($106) {
   label = 28;
   break;
  }
  $107 = $18;
  $108 = (_ERR_isError_430($107)|0);
  $109 = ($108|0)!=(0);
  if ($109) {
   label = 24;
   break;
  }
  $111 = $6;
  $112 = ((($111)) + 21552|0);
  $113 = ((($112)) + 16|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ($114|0)!=(0);
  if ($115) {
   $116 = $6;
   $117 = ((($116)) + 21592|0);
   $118 = $15;
   $119 = $18;
   (_ZSTD_XXH64_update($117,$118,$119)|0);
  }
  $120 = $18;
  $121 = $15;
  $122 = (($121) + ($120)|0);
  $15 = $122;
  $123 = $20;
  $124 = $11;
  $125 = (($124) + ($123)|0);
  $11 = $125;
  $126 = $20;
  $127 = $16;
  $128 = (($127) - ($126))|0;
  $16 = $128;
 }
 if ((label|0) == 11) {
  $64 = $20;
  $5 = $64;
  $134 = $5;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 13) {
  $5 = -14;
  $134 = $5;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 19) {
  $5 = -14;
  $134 = $5;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 21) {
  $5 = -1;
  $134 = $5;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 24) {
  $110 = $18;
  $5 = $110;
  $134 = $5;
  STACKTOP = sp;return ($134|0);
 }
 else if ((label|0) == 28) {
  $129 = $15;
  $130 = $13;
  $131 = $129;
  $132 = $130;
  $133 = (($131) - ($132))|0;
  $5 = $133;
  $134 = $5;
  STACKTOP = sp;return ($134|0);
 }
 return (0)|0;
}
function _ZSTDv07_decodeFrameHeader($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = $4;
 $9 = ((($8)) + 21552|0);
 $10 = $5;
 $11 = $6;
 $12 = (_ZSTDv07_getFrameParams($9,$10,$11)|0);
 $7 = $12;
 $13 = $4;
 $14 = ((($13)) + 21552|0);
 $15 = ((($14)) + 12|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $4;
  $19 = ((($18)) + 21684|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $4;
  $22 = ((($21)) + 21552|0);
  $23 = ((($22)) + 12|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($20|0)!=($24|0);
  if ($25) {
   $3 = -21;
   $34 = $3;
   STACKTOP = sp;return ($34|0);
  }
 }
 $26 = $4;
 $27 = ((($26)) + 21552|0);
 $28 = ((($27)) + 16|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)!=(0);
 if ($30) {
  $31 = $4;
  $32 = ((($31)) + 21592|0);
  (_ZSTD_XXH64_reset($32,0,0)|0);
 }
 $33 = $7;
 $3 = $33;
 $34 = $3;
 STACKTOP = sp;return ($34|0);
}
function _ZSTDv07_copyRawBlock($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $8;
 $10 = $6;
 $11 = ($9>>>0)>($10>>>0);
 if ($11) {
  $4 = -13;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 } else {
  $12 = $5;
  $13 = $7;
  $14 = $8;
  _memcpy(($12|0),($13|0),($14|0))|0;
  $15 = $8;
  $4 = $15;
  $16 = $4;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _ZSTDv07_decompress_usingDict($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $13 = $6;
 $14 = $7;
 $15 = $12;
 $16 = $13;
 (_ZSTDv07_decompressBegin_usingDict($14,$15,$16)|0);
 $17 = $7;
 $18 = $8;
 _ZSTDv07_checkContinuity($17,$18);
 $19 = $7;
 $20 = $8;
 $21 = $9;
 $22 = $10;
 $23 = $11;
 $24 = (_ZSTDv07_decompressFrame($19,$20,$21,$22,$23)|0);
 STACKTOP = sp;return ($24|0);
}
function _ZSTDv07_decompressBegin_usingDict($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $4;
 $10 = (_ZSTDv07_decompressBegin($9)|0);
 $7 = $10;
 $11 = $7;
 $12 = (_ERR_isError_430($11)|0);
 $13 = ($12|0)!=(0);
 if ($13) {
  $14 = $7;
  $3 = $14;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 $15 = $5;
 $16 = ($15|0)!=(0|0);
 $17 = $6;
 $18 = ($17|0)!=(0);
 $or$cond = $16 & $18;
 if ($or$cond) {
  $19 = $4;
  $20 = $5;
  $21 = $6;
  $22 = (_ZSTDv07_decompress_insertDictionary($19,$20,$21)|0);
  $8 = $22;
  $23 = $8;
  $24 = (_ERR_isError_430($23)|0);
  $25 = ($24|0)!=(0);
  if ($25) {
   $3 = -20;
   $26 = $3;
   STACKTOP = sp;return ($26|0);
  }
 }
 $3 = 0;
 $26 = $3;
 STACKTOP = sp;return ($26|0);
}
function _ZSTDv07_decompress_insertDictionary($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $9 = $6;
 $10 = ($9>>>0)<(8);
 if ($10) {
  $11 = $4;
  $12 = $5;
  $13 = $6;
  $14 = (_ZSTDv07_refDictContent($11,$12,$13)|0);
  $3 = $14;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 $15 = $5;
 $16 = (_MEM_readLE32_433($15)|0);
 $7 = $16;
 $17 = $7;
 $18 = ($17|0)!=(-332356553);
 if ($18) {
  $19 = $4;
  $20 = $5;
  $21 = $6;
  $22 = (_ZSTDv07_refDictContent($19,$20,$21)|0);
  $3 = $22;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 $23 = $5;
 $24 = ((($23)) + 4|0);
 $25 = (_MEM_readLE32_433($24)|0);
 $26 = $4;
 $27 = ((($26)) + 21684|0);
 HEAP32[$27>>2] = $25;
 $28 = $5;
 $29 = ((($28)) + 8|0);
 $5 = $29;
 $30 = $6;
 $31 = (($30) - 8)|0;
 $6 = $31;
 $32 = $4;
 $33 = $5;
 $34 = $6;
 $35 = (_ZSTDv07_loadEntropy($32,$33,$34)|0);
 $8 = $35;
 $36 = $8;
 $37 = (_ERR_isError_430($36)|0);
 $38 = ($37|0)!=(0);
 if ($38) {
  $3 = -20;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 } else {
  $39 = $5;
  $40 = $8;
  $41 = (($39) + ($40)|0);
  $5 = $41;
  $42 = $8;
  $43 = $6;
  $44 = (($43) - ($42))|0;
  $6 = $44;
  $45 = $4;
  $46 = $5;
  $47 = $6;
  $48 = (_ZSTDv07_refDictContent($45,$46,$47)|0);
  $3 = $48;
  $49 = $3;
  STACKTOP = sp;return ($49|0);
 }
 return (0)|0;
}
function _ZSTDv07_refDictContent($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $3;
 $7 = ((($6)) + 21520|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $3;
 $10 = ((($9)) + 21532|0);
 HEAP32[$10>>2] = $8;
 $11 = $4;
 $12 = $3;
 $13 = ((($12)) + 21520|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 21524|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (0 - ($20))|0;
 $22 = (($11) + ($21)|0);
 $23 = $3;
 $24 = ((($23)) + 21528|0);
 HEAP32[$24>>2] = $22;
 $25 = $4;
 $26 = $3;
 $27 = ((($26)) + 21524|0);
 HEAP32[$27>>2] = $25;
 $28 = $4;
 $29 = $5;
 $30 = (($28) + ($29)|0);
 $31 = $3;
 $32 = ((($31)) + 21520|0);
 HEAP32[$32>>2] = $30;
 STACKTOP = sp;return 0;
}
function _ZSTDv07_loadEntropy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $10 = sp + 258|0;
 $11 = sp + 44|0;
 $12 = sp + 40|0;
 $15 = sp + 152|0;
 $16 = sp + 28|0;
 $17 = sp + 24|0;
 $20 = sp + 80|0;
 $21 = sp + 12|0;
 $22 = sp + 8|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $25 = $5;
 $7 = $25;
 $26 = $7;
 $27 = $6;
 $28 = (($26) + ($27)|0);
 $8 = $28;
 $29 = $4;
 $30 = ((($29)) + 5132|0);
 $31 = $5;
 $32 = $6;
 $33 = (_HUFv07_readDTableX4($30,$31,$32)|0);
 $9 = $33;
 $34 = $9;
 $35 = (_ERR_isError_430($34)|0);
 $36 = ($35|0)!=(0);
 if ($36) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $37 = $9;
 $38 = $7;
 $39 = (($38) + ($37)|0);
 $7 = $39;
 HEAP32[$11>>2] = 28;
 $40 = $7;
 $41 = $8;
 $42 = $7;
 $43 = $41;
 $44 = $42;
 $45 = (($43) - ($44))|0;
 $46 = (_FSEv07_readNCount($10,$11,$12,$40,$45)|0);
 $13 = $46;
 $47 = $13;
 $48 = (_ERR_isError_430($47)|0);
 $49 = ($48|0)!=(0);
 if ($49) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $50 = HEAP32[$12>>2]|0;
 $51 = ($50>>>0)>(8);
 if ($51) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $52 = $4;
 $53 = ((($52)) + 2052|0);
 $54 = HEAP32[$11>>2]|0;
 $55 = HEAP32[$12>>2]|0;
 $56 = (_FSEv07_buildDTable($53,$10,$54,$55)|0);
 $14 = $56;
 $57 = $14;
 $58 = (_ERR_isError_430($57)|0);
 $59 = ($58|0)!=(0);
 if ($59) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $60 = $13;
 $61 = $7;
 $62 = (($61) + ($60)|0);
 $7 = $62;
 HEAP32[$16>>2] = 52;
 $63 = $7;
 $64 = $8;
 $65 = $7;
 $66 = $64;
 $67 = $65;
 $68 = (($66) - ($67))|0;
 $69 = (_FSEv07_readNCount($15,$16,$17,$63,$68)|0);
 $18 = $69;
 $70 = $18;
 $71 = (_ERR_isError_430($70)|0);
 $72 = ($71|0)!=(0);
 if ($72) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $73 = HEAP32[$17>>2]|0;
 $74 = ($73>>>0)>(9);
 if ($74) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $75 = $4;
 $76 = ((($75)) + 3080|0);
 $77 = HEAP32[$16>>2]|0;
 $78 = HEAP32[$17>>2]|0;
 $79 = (_FSEv07_buildDTable($76,$15,$77,$78)|0);
 $19 = $79;
 $80 = $19;
 $81 = (_ERR_isError_430($80)|0);
 $82 = ($81|0)!=(0);
 if ($82) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $83 = $18;
 $84 = $7;
 $85 = (($84) + ($83)|0);
 $7 = $85;
 HEAP32[$21>>2] = 35;
 $86 = $7;
 $87 = $8;
 $88 = $7;
 $89 = $87;
 $90 = $88;
 $91 = (($89) - ($90))|0;
 $92 = (_FSEv07_readNCount($20,$21,$22,$86,$91)|0);
 $23 = $92;
 $93 = $23;
 $94 = (_ERR_isError_430($93)|0);
 $95 = ($94|0)!=(0);
 if ($95) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $96 = HEAP32[$22>>2]|0;
 $97 = ($96>>>0)>(9);
 if ($97) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $98 = $4;
 $99 = HEAP32[$21>>2]|0;
 $100 = HEAP32[$22>>2]|0;
 $101 = (_FSEv07_buildDTable($98,$20,$99,$100)|0);
 $24 = $101;
 $102 = $24;
 $103 = (_ERR_isError_430($102)|0);
 $104 = ($103|0)!=(0);
 if ($104) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $105 = $23;
 $106 = $7;
 $107 = (($106) + ($105)|0);
 $7 = $107;
 $108 = $7;
 $109 = ((($108)) + 12|0);
 $110 = $8;
 $111 = ($109>>>0)>($110>>>0);
 if ($111) {
  $3 = -20;
  $170 = $3;
  STACKTOP = sp;return ($170|0);
 }
 $112 = $7;
 $113 = (_MEM_readLE32_433($112)|0);
 $114 = $4;
 $115 = ((($114)) + 21540|0);
 HEAP32[$115>>2] = $113;
 $116 = $4;
 $117 = ((($116)) + 21540|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)==(0);
 if (!($119)) {
  $120 = $4;
  $121 = ((($120)) + 21540|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $6;
  $124 = ($122>>>0)>=($123>>>0);
  if (!($124)) {
   $125 = $7;
   $126 = ((($125)) + 4|0);
   $127 = (_MEM_readLE32_433($126)|0);
   $128 = $4;
   $129 = ((($128)) + 21540|0);
   $130 = ((($129)) + 4|0);
   HEAP32[$130>>2] = $127;
   $131 = $4;
   $132 = ((($131)) + 21540|0);
   $133 = ((($132)) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = ($134|0)==(0);
   if (!($135)) {
    $136 = $4;
    $137 = ((($136)) + 21540|0);
    $138 = ((($137)) + 4|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $6;
    $141 = ($139>>>0)>=($140>>>0);
    if (!($141)) {
     $142 = $7;
     $143 = ((($142)) + 8|0);
     $144 = (_MEM_readLE32_433($143)|0);
     $145 = $4;
     $146 = ((($145)) + 21540|0);
     $147 = ((($146)) + 8|0);
     HEAP32[$147>>2] = $144;
     $148 = $4;
     $149 = ((($148)) + 21540|0);
     $150 = ((($149)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==(0);
     if (!($152)) {
      $153 = $4;
      $154 = ((($153)) + 21540|0);
      $155 = ((($154)) + 8|0);
      $156 = HEAP32[$155>>2]|0;
      $157 = $6;
      $158 = ($156>>>0)>=($157>>>0);
      if (!($158)) {
       $159 = $7;
       $160 = ((($159)) + 12|0);
       $7 = $160;
       $161 = $4;
       $162 = ((($161)) + 21588|0);
       HEAP32[$162>>2] = 1;
       $163 = $4;
       $164 = ((($163)) + 21584|0);
       HEAP32[$164>>2] = 1;
       $165 = $7;
       $166 = $5;
       $167 = $165;
       $168 = $166;
       $169 = (($167) - ($168))|0;
       $3 = $169;
       $170 = $3;
       STACKTOP = sp;return ($170|0);
      }
     }
     $3 = -20;
     $170 = $3;
     STACKTOP = sp;return ($170|0);
    }
   }
   $3 = -20;
   $170 = $3;
   STACKTOP = sp;return ($170|0);
  }
 }
 $3 = -20;
 $170 = $3;
 STACKTOP = sp;return ($170|0);
}
function _ZSTDv07_findFrameCompressedSize($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $8 = sp + 8|0;
 $3 = $0;
 $4 = $1;
 $10 = $3;
 $5 = $10;
 $11 = $4;
 $6 = $11;
 $12 = $4;
 $13 = ($12>>>0)<(8);
 do {
  if ($13) {
   $2 = -14;
  } else {
   $14 = $3;
   $15 = (_ZSTDv07_frameHeaderSize($14,5)|0);
   $7 = $15;
   $16 = $7;
   $17 = (_ERR_isError_430($16)|0);
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = $7;
    $2 = $19;
    break;
   }
   $20 = $3;
   $21 = (_MEM_readLE32_433($20)|0);
   $22 = ($21|0)!=(-47205081);
   if ($22) {
    $2 = -2;
    break;
   }
   $23 = $4;
   $24 = $7;
   $25 = (($24) + 3)|0;
   $26 = ($23>>>0)<($25>>>0);
   if ($26) {
    $2 = -14;
    break;
   }
   $27 = $7;
   $28 = $5;
   $29 = (($28) + ($27)|0);
   $5 = $29;
   $30 = $7;
   $31 = $6;
   $32 = (($31) - ($30))|0;
   $6 = $32;
   while(1) {
    $33 = $5;
    $34 = $6;
    $35 = (_ZSTDv07_getcBlockSize($33,$34,$8)|0);
    $9 = $35;
    $36 = $9;
    $37 = (_ERR_isError_430($36)|0);
    $38 = ($37|0)!=(0);
    if ($38) {
     label = 11;
     break;
    }
    $40 = $5;
    $41 = ((($40)) + 3|0);
    $5 = $41;
    $42 = $6;
    $43 = (($42) - 3)|0;
    $6 = $43;
    $44 = HEAP32[$8>>2]|0;
    $45 = ($44|0)==(3);
    if ($45) {
     label = 16;
     break;
    }
    $46 = $9;
    $47 = $6;
    $48 = ($46>>>0)>($47>>>0);
    if ($48) {
     label = 14;
     break;
    }
    $49 = $9;
    $50 = $5;
    $51 = (($50) + ($49)|0);
    $5 = $51;
    $52 = $9;
    $53 = $6;
    $54 = (($53) - ($52))|0;
    $6 = $54;
   }
   if ((label|0) == 11) {
    $39 = $9;
    $2 = $39;
    break;
   }
   else if ((label|0) == 14) {
    $2 = -14;
    break;
   }
   else if ((label|0) == 16) {
    $55 = $5;
    $56 = $3;
    $57 = $55;
    $58 = $56;
    $59 = (($57) - ($58))|0;
    $2 = $59;
    break;
   }
  }
 } while(0);
 $60 = $2;
 STACKTOP = sp;return ($60|0);
}
function _ZBUFFv07_freeDCtx($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $2;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $1 = 0;
  $46 = $1;
  STACKTOP = sp;return ($46|0);
 }
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 (_ZSTDv07_freeDCtx($6)|0);
 $7 = $2;
 $8 = ((($7)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $2;
  $12 = ((($11)) + 92|0);
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $2;
  $16 = ((($15)) + 92|0);
  $17 = ((($16)) + 8|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $2;
  $20 = ((($19)) + 36|0);
  $21 = HEAP32[$20>>2]|0;
  FUNCTION_TABLE_vii[$14 & 15]($18,$21);
 }
 $22 = $2;
 $23 = ((($22)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $2;
  $27 = ((($26)) + 92|0);
  $28 = ((($27)) + 4|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = $2;
  $31 = ((($30)) + 92|0);
  $32 = ((($31)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $2;
  $35 = ((($34)) + 48|0);
  $36 = HEAP32[$35>>2]|0;
  FUNCTION_TABLE_vii[$29 & 15]($33,$36);
 }
 $37 = $2;
 $38 = ((($37)) + 92|0);
 $39 = ((($38)) + 4|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $2;
 $42 = ((($41)) + 92|0);
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $2;
 FUNCTION_TABLE_vii[$40 & 15]($44,$45);
 $1 = 0;
 $46 = $1;
 STACKTOP = sp;return ($46|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0172$i = 0, $$$0173$i = 0, $$$4236$i = 0, $$$4329$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$01$i$i = 0, $$0172$lcssa$i = 0, $$01726$i = 0, $$0173$lcssa$i = 0, $$01735$i = 0, $$0192 = 0, $$0194 = 0, $$0201$i$i = 0, $$0202$i$i = 0, $$0206$i$i = 0;
 var $$0207$i$i = 0, $$024370$i = 0, $$0260$i$i = 0, $$0261$i$i = 0, $$0262$i$i = 0, $$0268$i$i = 0, $$0269$i$i = 0, $$0320$i = 0, $$0322$i = 0, $$0323$i = 0, $$0325$i = 0, $$0331$i = 0, $$0336$i = 0, $$0337$$i = 0, $$0337$i = 0, $$0339$i = 0, $$0340$i = 0, $$0345$i = 0, $$1176$i = 0, $$1178$i = 0;
 var $$124469$i = 0, $$1264$i$i = 0, $$1266$i$i = 0, $$1321$i = 0, $$1326$i = 0, $$1341$i = 0, $$1347$i = 0, $$1351$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2333$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i200 = 0, $$3328$i = 0, $$3349$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$411$i = 0;
 var $$4236$i = 0, $$4329$lcssa$i = 0, $$432910$i = 0, $$4335$$4$i = 0, $$4335$ph$i = 0, $$43359$i = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i17$i = 0, $$pre$i195 = 0, $$pre$i210 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i18$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink1$i = 0;
 var $$sink1$i$i = 0, $$sink14$i = 0, $$sink2$i = 0, $$sink2$i204 = 0, $$sink3$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0;
 var $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0;
 var $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0;
 var $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0;
 var $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0;
 var $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0;
 var $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0;
 var $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0;
 var $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0;
 var $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0;
 var $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0;
 var $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0;
 var $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0;
 var $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0;
 var $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0;
 var $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0;
 var $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0;
 var $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0;
 var $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0;
 var $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0;
 var $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0;
 var $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0;
 var $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i208 = 0, $exitcond$i$i = 0, $not$$i = 0;
 var $not$$i$i = 0, $not$$i197 = 0, $not$$i209 = 0, $not$1$i = 0, $not$1$i203 = 0, $not$3$i = 0, $not$5$i = 0, $or$cond$i = 0, $or$cond$i201 = 0, $or$cond1$i = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond11$not$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond2$i199 = 0, $or$cond49$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[1727]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (6948 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[1727] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(6916)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (6948 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($65|0)==($69|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[1727] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($79) + ($76)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(6928)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (6948 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[1727] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(6916)>>2] = $76;
     HEAP32[(6928)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(6912)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (7212 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $129 = ((($124)) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $not$3$i = ($130|0)==(0|0);
     $$sink14$i = $not$3$i&1;
     $131 = (((($124)) + 16|0) + ($$sink14$i<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(0|0);
     if ($133) {
      $$0172$lcssa$i = $124;$$0173$lcssa$i = $128;
     } else {
      $$01726$i = $124;$$01735$i = $128;$135 = $132;
      while(1) {
       $134 = ((($135)) + 4|0);
       $136 = HEAP32[$134>>2]|0;
       $137 = $136 & -8;
       $138 = (($137) - ($6))|0;
       $139 = ($138>>>0)<($$01735$i>>>0);
       $$$0173$i = $139 ? $138 : $$01735$i;
       $$$0172$i = $139 ? $135 : $$01726$i;
       $140 = ((($135)) + 16|0);
       $141 = HEAP32[$140>>2]|0;
       $not$$i = ($141|0)==(0|0);
       $$sink1$i = $not$$i&1;
       $142 = (((($135)) + 16|0) + ($$sink1$i<<2)|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        $$0172$lcssa$i = $$$0172$i;$$0173$lcssa$i = $$$0173$i;
        break;
       } else {
        $$01726$i = $$$0172$i;$$01735$i = $$$0173$i;$135 = $143;
       }
      }
     }
     $145 = (($$0172$lcssa$i) + ($6)|0);
     $146 = ($$0172$lcssa$i>>>0)<($145>>>0);
     if ($146) {
      $147 = ((($$0172$lcssa$i)) + 24|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ((($$0172$lcssa$i)) + 12|0);
      $150 = HEAP32[$149>>2]|0;
      $151 = ($150|0)==($$0172$lcssa$i|0);
      do {
       if ($151) {
        $156 = ((($$0172$lcssa$i)) + 20|0);
        $157 = HEAP32[$156>>2]|0;
        $158 = ($157|0)==(0|0);
        if ($158) {
         $159 = ((($$0172$lcssa$i)) + 16|0);
         $160 = HEAP32[$159>>2]|0;
         $161 = ($160|0)==(0|0);
         if ($161) {
          $$3$i = 0;
          break;
         } else {
          $$1176$i = $160;$$1178$i = $159;
         }
        } else {
         $$1176$i = $157;$$1178$i = $156;
        }
        while(1) {
         $162 = ((($$1176$i)) + 20|0);
         $163 = HEAP32[$162>>2]|0;
         $164 = ($163|0)==(0|0);
         if (!($164)) {
          $$1176$i = $163;$$1178$i = $162;
          continue;
         }
         $165 = ((($$1176$i)) + 16|0);
         $166 = HEAP32[$165>>2]|0;
         $167 = ($166|0)==(0|0);
         if ($167) {
          break;
         } else {
          $$1176$i = $166;$$1178$i = $165;
         }
        }
        HEAP32[$$1178$i>>2] = 0;
        $$3$i = $$1176$i;
       } else {
        $152 = ((($$0172$lcssa$i)) + 8|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ((($153)) + 12|0);
        HEAP32[$154>>2] = $150;
        $155 = ((($150)) + 8|0);
        HEAP32[$155>>2] = $153;
        $$3$i = $150;
       }
      } while(0);
      $168 = ($148|0)==(0|0);
      do {
       if (!($168)) {
        $169 = ((($$0172$lcssa$i)) + 28|0);
        $170 = HEAP32[$169>>2]|0;
        $171 = (7212 + ($170<<2)|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($$0172$lcssa$i|0)==($172|0);
        if ($173) {
         HEAP32[$171>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $174 = 1 << $170;
          $175 = $174 ^ -1;
          $176 = $98 & $175;
          HEAP32[(6912)>>2] = $176;
          break;
         }
        } else {
         $177 = ((($148)) + 16|0);
         $178 = HEAP32[$177>>2]|0;
         $not$1$i = ($178|0)!=($$0172$lcssa$i|0);
         $$sink2$i = $not$1$i&1;
         $179 = (((($148)) + 16|0) + ($$sink2$i<<2)|0);
         HEAP32[$179>>2] = $$3$i;
         $180 = ($$3$i|0)==(0|0);
         if ($180) {
          break;
         }
        }
        $181 = ((($$3$i)) + 24|0);
        HEAP32[$181>>2] = $148;
        $182 = ((($$0172$lcssa$i)) + 16|0);
        $183 = HEAP32[$182>>2]|0;
        $184 = ($183|0)==(0|0);
        if (!($184)) {
         $185 = ((($$3$i)) + 16|0);
         HEAP32[$185>>2] = $183;
         $186 = ((($183)) + 24|0);
         HEAP32[$186>>2] = $$3$i;
        }
        $187 = ((($$0172$lcssa$i)) + 20|0);
        $188 = HEAP32[$187>>2]|0;
        $189 = ($188|0)==(0|0);
        if (!($189)) {
         $190 = ((($$3$i)) + 20|0);
         HEAP32[$190>>2] = $188;
         $191 = ((($188)) + 24|0);
         HEAP32[$191>>2] = $$3$i;
        }
       }
      } while(0);
      $192 = ($$0173$lcssa$i>>>0)<(16);
      if ($192) {
       $193 = (($$0173$lcssa$i) + ($6))|0;
       $194 = $193 | 3;
       $195 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$195>>2] = $194;
       $196 = (($$0172$lcssa$i) + ($193)|0);
       $197 = ((($196)) + 4|0);
       $198 = HEAP32[$197>>2]|0;
       $199 = $198 | 1;
       HEAP32[$197>>2] = $199;
      } else {
       $200 = $6 | 3;
       $201 = ((($$0172$lcssa$i)) + 4|0);
       HEAP32[$201>>2] = $200;
       $202 = $$0173$lcssa$i | 1;
       $203 = ((($145)) + 4|0);
       HEAP32[$203>>2] = $202;
       $204 = (($145) + ($$0173$lcssa$i)|0);
       HEAP32[$204>>2] = $$0173$lcssa$i;
       $205 = ($33|0)==(0);
       if (!($205)) {
        $206 = HEAP32[(6928)>>2]|0;
        $207 = $33 >>> 3;
        $208 = $207 << 1;
        $209 = (6948 + ($208<<2)|0);
        $210 = 1 << $207;
        $211 = $8 & $210;
        $212 = ($211|0)==(0);
        if ($212) {
         $213 = $8 | $210;
         HEAP32[1727] = $213;
         $$pre$i = ((($209)) + 8|0);
         $$0$i = $209;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $214 = ((($209)) + 8|0);
         $215 = HEAP32[$214>>2]|0;
         $$0$i = $215;$$pre$phi$iZ2D = $214;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $206;
        $216 = ((($$0$i)) + 12|0);
        HEAP32[$216>>2] = $206;
        $217 = ((($206)) + 8|0);
        HEAP32[$217>>2] = $$0$i;
        $218 = ((($206)) + 12|0);
        HEAP32[$218>>2] = $209;
       }
       HEAP32[(6916)>>2] = $$0173$lcssa$i;
       HEAP32[(6928)>>2] = $145;
      }
      $219 = ((($$0172$lcssa$i)) + 8|0);
      $$0 = $219;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $220 = ($0>>>0)>(4294967231);
   if ($220) {
    $$0192 = -1;
   } else {
    $221 = (($0) + 11)|0;
    $222 = $221 & -8;
    $223 = HEAP32[(6912)>>2]|0;
    $224 = ($223|0)==(0);
    if ($224) {
     $$0192 = $222;
    } else {
     $225 = (0 - ($222))|0;
     $226 = $221 >>> 8;
     $227 = ($226|0)==(0);
     if ($227) {
      $$0336$i = 0;
     } else {
      $228 = ($222>>>0)>(16777215);
      if ($228) {
       $$0336$i = 31;
      } else {
       $229 = (($226) + 1048320)|0;
       $230 = $229 >>> 16;
       $231 = $230 & 8;
       $232 = $226 << $231;
       $233 = (($232) + 520192)|0;
       $234 = $233 >>> 16;
       $235 = $234 & 4;
       $236 = $235 | $231;
       $237 = $232 << $235;
       $238 = (($237) + 245760)|0;
       $239 = $238 >>> 16;
       $240 = $239 & 2;
       $241 = $236 | $240;
       $242 = (14 - ($241))|0;
       $243 = $237 << $240;
       $244 = $243 >>> 15;
       $245 = (($242) + ($244))|0;
       $246 = $245 << 1;
       $247 = (($245) + 7)|0;
       $248 = $222 >>> $247;
       $249 = $248 & 1;
       $250 = $249 | $246;
       $$0336$i = $250;
      }
     }
     $251 = (7212 + ($$0336$i<<2)|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = ($252|0)==(0|0);
     L74: do {
      if ($253) {
       $$2333$i = 0;$$3$i200 = 0;$$3328$i = $225;
       label = 57;
      } else {
       $254 = ($$0336$i|0)==(31);
       $255 = $$0336$i >>> 1;
       $256 = (25 - ($255))|0;
       $257 = $254 ? 0 : $256;
       $258 = $222 << $257;
       $$0320$i = 0;$$0325$i = $225;$$0331$i = $252;$$0337$i = $258;$$0340$i = 0;
       while(1) {
        $259 = ((($$0331$i)) + 4|0);
        $260 = HEAP32[$259>>2]|0;
        $261 = $260 & -8;
        $262 = (($261) - ($222))|0;
        $263 = ($262>>>0)<($$0325$i>>>0);
        if ($263) {
         $264 = ($262|0)==(0);
         if ($264) {
          $$411$i = $$0331$i;$$432910$i = 0;$$43359$i = $$0331$i;
          label = 61;
          break L74;
         } else {
          $$1321$i = $$0331$i;$$1326$i = $262;
         }
        } else {
         $$1321$i = $$0320$i;$$1326$i = $$0325$i;
        }
        $265 = ((($$0331$i)) + 20|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = $$0337$i >>> 31;
        $268 = (((($$0331$i)) + 16|0) + ($267<<2)|0);
        $269 = HEAP32[$268>>2]|0;
        $270 = ($266|0)==(0|0);
        $271 = ($266|0)==($269|0);
        $or$cond2$i199 = $270 | $271;
        $$1341$i = $or$cond2$i199 ? $$0340$i : $266;
        $272 = ($269|0)==(0|0);
        $not$5$i = $272 ^ 1;
        $273 = $not$5$i&1;
        $$0337$$i = $$0337$i << $273;
        if ($272) {
         $$2333$i = $$1341$i;$$3$i200 = $$1321$i;$$3328$i = $$1326$i;
         label = 57;
         break;
        } else {
         $$0320$i = $$1321$i;$$0325$i = $$1326$i;$$0331$i = $269;$$0337$i = $$0337$$i;$$0340$i = $$1341$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 57) {
      $274 = ($$2333$i|0)==(0|0);
      $275 = ($$3$i200|0)==(0|0);
      $or$cond$i201 = $274 & $275;
      if ($or$cond$i201) {
       $276 = 2 << $$0336$i;
       $277 = (0 - ($276))|0;
       $278 = $276 | $277;
       $279 = $223 & $278;
       $280 = ($279|0)==(0);
       if ($280) {
        $$0192 = $222;
        break;
       }
       $281 = (0 - ($279))|0;
       $282 = $279 & $281;
       $283 = (($282) + -1)|0;
       $284 = $283 >>> 12;
       $285 = $284 & 16;
       $286 = $283 >>> $285;
       $287 = $286 >>> 5;
       $288 = $287 & 8;
       $289 = $288 | $285;
       $290 = $286 >>> $288;
       $291 = $290 >>> 2;
       $292 = $291 & 4;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 2;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = $298 >>> 1;
       $300 = $299 & 1;
       $301 = $297 | $300;
       $302 = $298 >>> $300;
       $303 = (($301) + ($302))|0;
       $304 = (7212 + ($303<<2)|0);
       $305 = HEAP32[$304>>2]|0;
       $$4$ph$i = 0;$$4335$ph$i = $305;
      } else {
       $$4$ph$i = $$3$i200;$$4335$ph$i = $$2333$i;
      }
      $306 = ($$4335$ph$i|0)==(0|0);
      if ($306) {
       $$4$lcssa$i = $$4$ph$i;$$4329$lcssa$i = $$3328$i;
      } else {
       $$411$i = $$4$ph$i;$$432910$i = $$3328$i;$$43359$i = $$4335$ph$i;
       label = 61;
      }
     }
     if ((label|0) == 61) {
      while(1) {
       label = 0;
       $307 = ((($$43359$i)) + 4|0);
       $308 = HEAP32[$307>>2]|0;
       $309 = $308 & -8;
       $310 = (($309) - ($222))|0;
       $311 = ($310>>>0)<($$432910$i>>>0);
       $$$4329$i = $311 ? $310 : $$432910$i;
       $$4335$$4$i = $311 ? $$43359$i : $$411$i;
       $312 = ((($$43359$i)) + 16|0);
       $313 = HEAP32[$312>>2]|0;
       $not$1$i203 = ($313|0)==(0|0);
       $$sink2$i204 = $not$1$i203&1;
       $314 = (((($$43359$i)) + 16|0) + ($$sink2$i204<<2)|0);
       $315 = HEAP32[$314>>2]|0;
       $316 = ($315|0)==(0|0);
       if ($316) {
        $$4$lcssa$i = $$4335$$4$i;$$4329$lcssa$i = $$$4329$i;
        break;
       } else {
        $$411$i = $$4335$$4$i;$$432910$i = $$$4329$i;$$43359$i = $315;
        label = 61;
       }
      }
     }
     $317 = ($$4$lcssa$i|0)==(0|0);
     if ($317) {
      $$0192 = $222;
     } else {
      $318 = HEAP32[(6916)>>2]|0;
      $319 = (($318) - ($222))|0;
      $320 = ($$4329$lcssa$i>>>0)<($319>>>0);
      if ($320) {
       $321 = (($$4$lcssa$i) + ($222)|0);
       $322 = ($$4$lcssa$i>>>0)<($321>>>0);
       if (!($322)) {
        $$0 = 0;
        STACKTOP = sp;return ($$0|0);
       }
       $323 = ((($$4$lcssa$i)) + 24|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($$4$lcssa$i)) + 12|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ($326|0)==($$4$lcssa$i|0);
       do {
        if ($327) {
         $332 = ((($$4$lcssa$i)) + 20|0);
         $333 = HEAP32[$332>>2]|0;
         $334 = ($333|0)==(0|0);
         if ($334) {
          $335 = ((($$4$lcssa$i)) + 16|0);
          $336 = HEAP32[$335>>2]|0;
          $337 = ($336|0)==(0|0);
          if ($337) {
           $$3349$i = 0;
           break;
          } else {
           $$1347$i = $336;$$1351$i = $335;
          }
         } else {
          $$1347$i = $333;$$1351$i = $332;
         }
         while(1) {
          $338 = ((($$1347$i)) + 20|0);
          $339 = HEAP32[$338>>2]|0;
          $340 = ($339|0)==(0|0);
          if (!($340)) {
           $$1347$i = $339;$$1351$i = $338;
           continue;
          }
          $341 = ((($$1347$i)) + 16|0);
          $342 = HEAP32[$341>>2]|0;
          $343 = ($342|0)==(0|0);
          if ($343) {
           break;
          } else {
           $$1347$i = $342;$$1351$i = $341;
          }
         }
         HEAP32[$$1351$i>>2] = 0;
         $$3349$i = $$1347$i;
        } else {
         $328 = ((($$4$lcssa$i)) + 8|0);
         $329 = HEAP32[$328>>2]|0;
         $330 = ((($329)) + 12|0);
         HEAP32[$330>>2] = $326;
         $331 = ((($326)) + 8|0);
         HEAP32[$331>>2] = $329;
         $$3349$i = $326;
        }
       } while(0);
       $344 = ($324|0)==(0|0);
       do {
        if ($344) {
         $426 = $223;
        } else {
         $345 = ((($$4$lcssa$i)) + 28|0);
         $346 = HEAP32[$345>>2]|0;
         $347 = (7212 + ($346<<2)|0);
         $348 = HEAP32[$347>>2]|0;
         $349 = ($$4$lcssa$i|0)==($348|0);
         if ($349) {
          HEAP32[$347>>2] = $$3349$i;
          $cond$i208 = ($$3349$i|0)==(0|0);
          if ($cond$i208) {
           $350 = 1 << $346;
           $351 = $350 ^ -1;
           $352 = $223 & $351;
           HEAP32[(6912)>>2] = $352;
           $426 = $352;
           break;
          }
         } else {
          $353 = ((($324)) + 16|0);
          $354 = HEAP32[$353>>2]|0;
          $not$$i209 = ($354|0)!=($$4$lcssa$i|0);
          $$sink3$i = $not$$i209&1;
          $355 = (((($324)) + 16|0) + ($$sink3$i<<2)|0);
          HEAP32[$355>>2] = $$3349$i;
          $356 = ($$3349$i|0)==(0|0);
          if ($356) {
           $426 = $223;
           break;
          }
         }
         $357 = ((($$3349$i)) + 24|0);
         HEAP32[$357>>2] = $324;
         $358 = ((($$4$lcssa$i)) + 16|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==(0|0);
         if (!($360)) {
          $361 = ((($$3349$i)) + 16|0);
          HEAP32[$361>>2] = $359;
          $362 = ((($359)) + 24|0);
          HEAP32[$362>>2] = $$3349$i;
         }
         $363 = ((($$4$lcssa$i)) + 20|0);
         $364 = HEAP32[$363>>2]|0;
         $365 = ($364|0)==(0|0);
         if ($365) {
          $426 = $223;
         } else {
          $366 = ((($$3349$i)) + 20|0);
          HEAP32[$366>>2] = $364;
          $367 = ((($364)) + 24|0);
          HEAP32[$367>>2] = $$3349$i;
          $426 = $223;
         }
        }
       } while(0);
       $368 = ($$4329$lcssa$i>>>0)<(16);
       do {
        if ($368) {
         $369 = (($$4329$lcssa$i) + ($222))|0;
         $370 = $369 | 3;
         $371 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$371>>2] = $370;
         $372 = (($$4$lcssa$i) + ($369)|0);
         $373 = ((($372)) + 4|0);
         $374 = HEAP32[$373>>2]|0;
         $375 = $374 | 1;
         HEAP32[$373>>2] = $375;
        } else {
         $376 = $222 | 3;
         $377 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$377>>2] = $376;
         $378 = $$4329$lcssa$i | 1;
         $379 = ((($321)) + 4|0);
         HEAP32[$379>>2] = $378;
         $380 = (($321) + ($$4329$lcssa$i)|0);
         HEAP32[$380>>2] = $$4329$lcssa$i;
         $381 = $$4329$lcssa$i >>> 3;
         $382 = ($$4329$lcssa$i>>>0)<(256);
         if ($382) {
          $383 = $381 << 1;
          $384 = (6948 + ($383<<2)|0);
          $385 = HEAP32[1727]|0;
          $386 = 1 << $381;
          $387 = $385 & $386;
          $388 = ($387|0)==(0);
          if ($388) {
           $389 = $385 | $386;
           HEAP32[1727] = $389;
           $$pre$i210 = ((($384)) + 8|0);
           $$0345$i = $384;$$pre$phi$i211Z2D = $$pre$i210;
          } else {
           $390 = ((($384)) + 8|0);
           $391 = HEAP32[$390>>2]|0;
           $$0345$i = $391;$$pre$phi$i211Z2D = $390;
          }
          HEAP32[$$pre$phi$i211Z2D>>2] = $321;
          $392 = ((($$0345$i)) + 12|0);
          HEAP32[$392>>2] = $321;
          $393 = ((($321)) + 8|0);
          HEAP32[$393>>2] = $$0345$i;
          $394 = ((($321)) + 12|0);
          HEAP32[$394>>2] = $384;
          break;
         }
         $395 = $$4329$lcssa$i >>> 8;
         $396 = ($395|0)==(0);
         if ($396) {
          $$0339$i = 0;
         } else {
          $397 = ($$4329$lcssa$i>>>0)>(16777215);
          if ($397) {
           $$0339$i = 31;
          } else {
           $398 = (($395) + 1048320)|0;
           $399 = $398 >>> 16;
           $400 = $399 & 8;
           $401 = $395 << $400;
           $402 = (($401) + 520192)|0;
           $403 = $402 >>> 16;
           $404 = $403 & 4;
           $405 = $404 | $400;
           $406 = $401 << $404;
           $407 = (($406) + 245760)|0;
           $408 = $407 >>> 16;
           $409 = $408 & 2;
           $410 = $405 | $409;
           $411 = (14 - ($410))|0;
           $412 = $406 << $409;
           $413 = $412 >>> 15;
           $414 = (($411) + ($413))|0;
           $415 = $414 << 1;
           $416 = (($414) + 7)|0;
           $417 = $$4329$lcssa$i >>> $416;
           $418 = $417 & 1;
           $419 = $418 | $415;
           $$0339$i = $419;
          }
         }
         $420 = (7212 + ($$0339$i<<2)|0);
         $421 = ((($321)) + 28|0);
         HEAP32[$421>>2] = $$0339$i;
         $422 = ((($321)) + 16|0);
         $423 = ((($422)) + 4|0);
         HEAP32[$423>>2] = 0;
         HEAP32[$422>>2] = 0;
         $424 = 1 << $$0339$i;
         $425 = $426 & $424;
         $427 = ($425|0)==(0);
         if ($427) {
          $428 = $426 | $424;
          HEAP32[(6912)>>2] = $428;
          HEAP32[$420>>2] = $321;
          $429 = ((($321)) + 24|0);
          HEAP32[$429>>2] = $420;
          $430 = ((($321)) + 12|0);
          HEAP32[$430>>2] = $321;
          $431 = ((($321)) + 8|0);
          HEAP32[$431>>2] = $321;
          break;
         }
         $432 = HEAP32[$420>>2]|0;
         $433 = ($$0339$i|0)==(31);
         $434 = $$0339$i >>> 1;
         $435 = (25 - ($434))|0;
         $436 = $433 ? 0 : $435;
         $437 = $$4329$lcssa$i << $436;
         $$0322$i = $437;$$0323$i = $432;
         while(1) {
          $438 = ((($$0323$i)) + 4|0);
          $439 = HEAP32[$438>>2]|0;
          $440 = $439 & -8;
          $441 = ($440|0)==($$4329$lcssa$i|0);
          if ($441) {
           label = 97;
           break;
          }
          $442 = $$0322$i >>> 31;
          $443 = (((($$0323$i)) + 16|0) + ($442<<2)|0);
          $444 = $$0322$i << 1;
          $445 = HEAP32[$443>>2]|0;
          $446 = ($445|0)==(0|0);
          if ($446) {
           label = 96;
           break;
          } else {
           $$0322$i = $444;$$0323$i = $445;
          }
         }
         if ((label|0) == 96) {
          HEAP32[$443>>2] = $321;
          $447 = ((($321)) + 24|0);
          HEAP32[$447>>2] = $$0323$i;
          $448 = ((($321)) + 12|0);
          HEAP32[$448>>2] = $321;
          $449 = ((($321)) + 8|0);
          HEAP32[$449>>2] = $321;
          break;
         }
         else if ((label|0) == 97) {
          $450 = ((($$0323$i)) + 8|0);
          $451 = HEAP32[$450>>2]|0;
          $452 = ((($451)) + 12|0);
          HEAP32[$452>>2] = $321;
          HEAP32[$450>>2] = $321;
          $453 = ((($321)) + 8|0);
          HEAP32[$453>>2] = $451;
          $454 = ((($321)) + 12|0);
          HEAP32[$454>>2] = $$0323$i;
          $455 = ((($321)) + 24|0);
          HEAP32[$455>>2] = 0;
          break;
         }
        }
       } while(0);
       $456 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $456;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0192 = $222;
      }
     }
    }
   }
  }
 } while(0);
 $457 = HEAP32[(6916)>>2]|0;
 $458 = ($457>>>0)<($$0192>>>0);
 if (!($458)) {
  $459 = (($457) - ($$0192))|0;
  $460 = HEAP32[(6928)>>2]|0;
  $461 = ($459>>>0)>(15);
  if ($461) {
   $462 = (($460) + ($$0192)|0);
   HEAP32[(6928)>>2] = $462;
   HEAP32[(6916)>>2] = $459;
   $463 = $459 | 1;
   $464 = ((($462)) + 4|0);
   HEAP32[$464>>2] = $463;
   $465 = (($462) + ($459)|0);
   HEAP32[$465>>2] = $459;
   $466 = $$0192 | 3;
   $467 = ((($460)) + 4|0);
   HEAP32[$467>>2] = $466;
  } else {
   HEAP32[(6916)>>2] = 0;
   HEAP32[(6928)>>2] = 0;
   $468 = $457 | 3;
   $469 = ((($460)) + 4|0);
   HEAP32[$469>>2] = $468;
   $470 = (($460) + ($457)|0);
   $471 = ((($470)) + 4|0);
   $472 = HEAP32[$471>>2]|0;
   $473 = $472 | 1;
   HEAP32[$471>>2] = $473;
  }
  $474 = ((($460)) + 8|0);
  $$0 = $474;
  STACKTOP = sp;return ($$0|0);
 }
 $475 = HEAP32[(6920)>>2]|0;
 $476 = ($475>>>0)>($$0192>>>0);
 if ($476) {
  $477 = (($475) - ($$0192))|0;
  HEAP32[(6920)>>2] = $477;
  $478 = HEAP32[(6932)>>2]|0;
  $479 = (($478) + ($$0192)|0);
  HEAP32[(6932)>>2] = $479;
  $480 = $477 | 1;
  $481 = ((($479)) + 4|0);
  HEAP32[$481>>2] = $480;
  $482 = $$0192 | 3;
  $483 = ((($478)) + 4|0);
  HEAP32[$483>>2] = $482;
  $484 = ((($478)) + 8|0);
  $$0 = $484;
  STACKTOP = sp;return ($$0|0);
 }
 $485 = HEAP32[1845]|0;
 $486 = ($485|0)==(0);
 if ($486) {
  HEAP32[(7388)>>2] = 4096;
  HEAP32[(7384)>>2] = 4096;
  HEAP32[(7392)>>2] = -1;
  HEAP32[(7396)>>2] = -1;
  HEAP32[(7400)>>2] = 0;
  HEAP32[(7352)>>2] = 0;
  $487 = $1;
  $488 = $487 & -16;
  $489 = $488 ^ 1431655768;
  HEAP32[$1>>2] = $489;
  HEAP32[1845] = $489;
  $493 = 4096;
 } else {
  $$pre$i195 = HEAP32[(7388)>>2]|0;
  $493 = $$pre$i195;
 }
 $490 = (($$0192) + 48)|0;
 $491 = (($$0192) + 47)|0;
 $492 = (($493) + ($491))|0;
 $494 = (0 - ($493))|0;
 $495 = $492 & $494;
 $496 = ($495>>>0)>($$0192>>>0);
 if (!($496)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $497 = HEAP32[(7348)>>2]|0;
 $498 = ($497|0)==(0);
 if (!($498)) {
  $499 = HEAP32[(7340)>>2]|0;
  $500 = (($499) + ($495))|0;
  $501 = ($500>>>0)<=($499>>>0);
  $502 = ($500>>>0)>($497>>>0);
  $or$cond1$i = $501 | $502;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $503 = HEAP32[(7352)>>2]|0;
 $504 = $503 & 4;
 $505 = ($504|0)==(0);
 L167: do {
  if ($505) {
   $506 = HEAP32[(6932)>>2]|0;
   $507 = ($506|0)==(0|0);
   L169: do {
    if ($507) {
     label = 118;
    } else {
     $$0$i20$i = (7356);
     while(1) {
      $508 = HEAP32[$$0$i20$i>>2]|0;
      $509 = ($508>>>0)>($506>>>0);
      if (!($509)) {
       $510 = ((($$0$i20$i)) + 4|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($508) + ($511)|0);
       $513 = ($512>>>0)>($506>>>0);
       if ($513) {
        break;
       }
      }
      $514 = ((($$0$i20$i)) + 8|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(0|0);
      if ($516) {
       label = 118;
       break L169;
      } else {
       $$0$i20$i = $515;
      }
     }
     $539 = (($492) - ($475))|0;
     $540 = $539 & $494;
     $541 = ($540>>>0)<(2147483647);
     if ($541) {
      $542 = (_sbrk(($540|0))|0);
      $543 = HEAP32[$$0$i20$i>>2]|0;
      $544 = HEAP32[$510>>2]|0;
      $545 = (($543) + ($544)|0);
      $546 = ($542|0)==($545|0);
      if ($546) {
       $547 = ($542|0)==((-1)|0);
       if ($547) {
        $$2234243136$i = $540;
       } else {
        $$723947$i = $540;$$748$i = $542;
        label = 135;
        break L167;
       }
      } else {
       $$2247$ph$i = $542;$$2253$ph$i = $540;
       label = 126;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 118) {
     $517 = (_sbrk(0)|0);
     $518 = ($517|0)==((-1)|0);
     if ($518) {
      $$2234243136$i = 0;
     } else {
      $519 = $517;
      $520 = HEAP32[(7384)>>2]|0;
      $521 = (($520) + -1)|0;
      $522 = $521 & $519;
      $523 = ($522|0)==(0);
      $524 = (($521) + ($519))|0;
      $525 = (0 - ($520))|0;
      $526 = $524 & $525;
      $527 = (($526) - ($519))|0;
      $528 = $523 ? 0 : $527;
      $$$i = (($528) + ($495))|0;
      $529 = HEAP32[(7340)>>2]|0;
      $530 = (($$$i) + ($529))|0;
      $531 = ($$$i>>>0)>($$0192>>>0);
      $532 = ($$$i>>>0)<(2147483647);
      $or$cond$i = $531 & $532;
      if ($or$cond$i) {
       $533 = HEAP32[(7348)>>2]|0;
       $534 = ($533|0)==(0);
       if (!($534)) {
        $535 = ($530>>>0)<=($529>>>0);
        $536 = ($530>>>0)>($533>>>0);
        $or$cond2$i = $535 | $536;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $537 = (_sbrk(($$$i|0))|0);
       $538 = ($537|0)==($517|0);
       if ($538) {
        $$723947$i = $$$i;$$748$i = $517;
        label = 135;
        break L167;
       } else {
        $$2247$ph$i = $537;$$2253$ph$i = $$$i;
        label = 126;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 126) {
     $548 = (0 - ($$2253$ph$i))|0;
     $549 = ($$2247$ph$i|0)!=((-1)|0);
     $550 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $550 & $549;
     $551 = ($490>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $551 & $or$cond7$i;
     if (!($or$cond10$i)) {
      $561 = ($$2247$ph$i|0)==((-1)|0);
      if ($561) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 135;
       break L167;
      }
     }
     $552 = HEAP32[(7388)>>2]|0;
     $553 = (($491) - ($$2253$ph$i))|0;
     $554 = (($553) + ($552))|0;
     $555 = (0 - ($552))|0;
     $556 = $554 & $555;
     $557 = ($556>>>0)<(2147483647);
     if (!($557)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
     $558 = (_sbrk(($556|0))|0);
     $559 = ($558|0)==((-1)|0);
     if ($559) {
      (_sbrk(($548|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $560 = (($556) + ($$2253$ph$i))|0;
      $$723947$i = $560;$$748$i = $$2247$ph$i;
      label = 135;
      break L167;
     }
    }
   } while(0);
   $562 = HEAP32[(7352)>>2]|0;
   $563 = $562 | 4;
   HEAP32[(7352)>>2] = $563;
   $$4236$i = $$2234243136$i;
   label = 133;
  } else {
   $$4236$i = 0;
   label = 133;
  }
 } while(0);
 if ((label|0) == 133) {
  $564 = ($495>>>0)<(2147483647);
  if ($564) {
   $565 = (_sbrk(($495|0))|0);
   $566 = (_sbrk(0)|0);
   $567 = ($565|0)!=((-1)|0);
   $568 = ($566|0)!=((-1)|0);
   $or$cond5$i = $567 & $568;
   $569 = ($565>>>0)<($566>>>0);
   $or$cond11$i = $569 & $or$cond5$i;
   $570 = $566;
   $571 = $565;
   $572 = (($570) - ($571))|0;
   $573 = (($$0192) + 40)|0;
   $574 = ($572>>>0)>($573>>>0);
   $$$4236$i = $574 ? $572 : $$4236$i;
   $or$cond11$not$i = $or$cond11$i ^ 1;
   $575 = ($565|0)==((-1)|0);
   $not$$i197 = $574 ^ 1;
   $576 = $575 | $not$$i197;
   $or$cond49$i = $576 | $or$cond11$not$i;
   if (!($or$cond49$i)) {
    $$723947$i = $$$4236$i;$$748$i = $565;
    label = 135;
   }
  }
 }
 if ((label|0) == 135) {
  $577 = HEAP32[(7340)>>2]|0;
  $578 = (($577) + ($$723947$i))|0;
  HEAP32[(7340)>>2] = $578;
  $579 = HEAP32[(7344)>>2]|0;
  $580 = ($578>>>0)>($579>>>0);
  if ($580) {
   HEAP32[(7344)>>2] = $578;
  }
  $581 = HEAP32[(6932)>>2]|0;
  $582 = ($581|0)==(0|0);
  do {
   if ($582) {
    $583 = HEAP32[(6924)>>2]|0;
    $584 = ($583|0)==(0|0);
    $585 = ($$748$i>>>0)<($583>>>0);
    $or$cond12$i = $584 | $585;
    if ($or$cond12$i) {
     HEAP32[(6924)>>2] = $$748$i;
    }
    HEAP32[(7356)>>2] = $$748$i;
    HEAP32[(7360)>>2] = $$723947$i;
    HEAP32[(7368)>>2] = 0;
    $586 = HEAP32[1845]|0;
    HEAP32[(6944)>>2] = $586;
    HEAP32[(6940)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $587 = $$01$i$i << 1;
     $588 = (6948 + ($587<<2)|0);
     $589 = ((($588)) + 12|0);
     HEAP32[$589>>2] = $588;
     $590 = ((($588)) + 8|0);
     HEAP32[$590>>2] = $588;
     $591 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($591|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $591;
     }
    }
    $592 = (($$723947$i) + -40)|0;
    $593 = ((($$748$i)) + 8|0);
    $594 = $593;
    $595 = $594 & 7;
    $596 = ($595|0)==(0);
    $597 = (0 - ($594))|0;
    $598 = $597 & 7;
    $599 = $596 ? 0 : $598;
    $600 = (($$748$i) + ($599)|0);
    $601 = (($592) - ($599))|0;
    HEAP32[(6932)>>2] = $600;
    HEAP32[(6920)>>2] = $601;
    $602 = $601 | 1;
    $603 = ((($600)) + 4|0);
    HEAP32[$603>>2] = $602;
    $604 = (($600) + ($601)|0);
    $605 = ((($604)) + 4|0);
    HEAP32[$605>>2] = 40;
    $606 = HEAP32[(7396)>>2]|0;
    HEAP32[(6936)>>2] = $606;
   } else {
    $$024370$i = (7356);
    while(1) {
     $607 = HEAP32[$$024370$i>>2]|0;
     $608 = ((($$024370$i)) + 4|0);
     $609 = HEAP32[$608>>2]|0;
     $610 = (($607) + ($609)|0);
     $611 = ($$748$i|0)==($610|0);
     if ($611) {
      label = 145;
      break;
     }
     $612 = ((($$024370$i)) + 8|0);
     $613 = HEAP32[$612>>2]|0;
     $614 = ($613|0)==(0|0);
     if ($614) {
      break;
     } else {
      $$024370$i = $613;
     }
    }
    if ((label|0) == 145) {
     $615 = ((($$024370$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($581>>>0)>=($607>>>0);
      $620 = ($581>>>0)<($$748$i>>>0);
      $or$cond50$i = $620 & $619;
      if ($or$cond50$i) {
       $621 = (($609) + ($$723947$i))|0;
       HEAP32[$608>>2] = $621;
       $622 = HEAP32[(6920)>>2]|0;
       $623 = ((($581)) + 8|0);
       $624 = $623;
       $625 = $624 & 7;
       $626 = ($625|0)==(0);
       $627 = (0 - ($624))|0;
       $628 = $627 & 7;
       $629 = $626 ? 0 : $628;
       $630 = (($581) + ($629)|0);
       $631 = (($$723947$i) - ($629))|0;
       $632 = (($622) + ($631))|0;
       HEAP32[(6932)>>2] = $630;
       HEAP32[(6920)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($630)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($630) + ($632)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(7396)>>2]|0;
       HEAP32[(6936)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(6924)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(6924)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (7356);
    while(1) {
     $641 = HEAP32[$$124469$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 153;
      break;
     }
     $643 = ((($$124469$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124469$i = $644;
     }
    }
    if ((label|0) == 153) {
     $646 = ((($$124469$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $650 = ((($$124469$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($668|0)==($581|0);
      do {
       if ($676) {
        $677 = HEAP32[(6920)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(6920)>>2] = $678;
        HEAP32[(6932)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(6928)>>2]|0;
        $682 = ($668|0)==($681|0);
        if ($682) {
         $683 = HEAP32[(6916)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(6916)>>2] = $684;
         HEAP32[(6928)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L237: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[1727]|0;
            $703 = $702 & $701;
            HEAP32[1727] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1264$i$i = $719;$$1266$i$i = $715;
              }
             } else {
              $$1264$i$i = $717;$$1266$i$i = $716;
             }
             while(1) {
              $721 = ((($$1264$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if (!($723)) {
               $$1264$i$i = $722;$$1266$i$i = $721;
               continue;
              }
              $724 = ((($$1264$i$i)) + 16|0);
              $725 = HEAP32[$724>>2]|0;
              $726 = ($725|0)==(0|0);
              if ($726) {
               break;
              } else {
               $$1264$i$i = $725;$$1266$i$i = $724;
              }
             }
             HEAP32[$$1266$i$i>>2] = 0;
             $$3$i$i = $$1264$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (7212 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($668|0)==($731|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(6912)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(6912)>>2] = $736;
             break L237;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $not$$i$i = ($738|0)!=($668|0);
             $$sink1$i$i = $not$$i$i&1;
             $739 = (((($707)) + 16|0) + ($$sink1$i$i<<2)|0);
             HEAP32[$739>>2] = $$3$i$i;
             $740 = ($$3$i$i|0)==(0|0);
             if ($740) {
              break L237;
             }
            }
           } while(0);
           $741 = ((($$3$i$i)) + 24|0);
           HEAP32[$741>>2] = $707;
           $742 = ((($668)) + 16|0);
           $743 = HEAP32[$742>>2]|0;
           $744 = ($743|0)==(0|0);
           if (!($744)) {
            $745 = ((($$3$i$i)) + 16|0);
            HEAP32[$745>>2] = $743;
            $746 = ((($743)) + 24|0);
            HEAP32[$746>>2] = $$3$i$i;
           }
           $747 = ((($742)) + 4|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ($748|0)==(0|0);
           if ($749) {
            break;
           }
           $750 = ((($$3$i$i)) + 20|0);
           HEAP32[$750>>2] = $748;
           $751 = ((($748)) + 24|0);
           HEAP32[$751>>2] = $$3$i$i;
          }
         } while(0);
         $752 = (($668) + ($692)|0);
         $753 = (($692) + ($673))|0;
         $$0$i$i = $752;$$0260$i$i = $753;
        } else {
         $$0$i$i = $668;$$0260$i$i = $673;
        }
        $754 = ((($$0$i$i)) + 4|0);
        $755 = HEAP32[$754>>2]|0;
        $756 = $755 & -2;
        HEAP32[$754>>2] = $756;
        $757 = $$0260$i$i | 1;
        $758 = ((($672)) + 4|0);
        HEAP32[$758>>2] = $757;
        $759 = (($672) + ($$0260$i$i)|0);
        HEAP32[$759>>2] = $$0260$i$i;
        $760 = $$0260$i$i >>> 3;
        $761 = ($$0260$i$i>>>0)<(256);
        if ($761) {
         $762 = $760 << 1;
         $763 = (6948 + ($762<<2)|0);
         $764 = HEAP32[1727]|0;
         $765 = 1 << $760;
         $766 = $764 & $765;
         $767 = ($766|0)==(0);
         if ($767) {
          $768 = $764 | $765;
          HEAP32[1727] = $768;
          $$pre$i17$i = ((($763)) + 8|0);
          $$0268$i$i = $763;$$pre$phi$i18$iZ2D = $$pre$i17$i;
         } else {
          $769 = ((($763)) + 8|0);
          $770 = HEAP32[$769>>2]|0;
          $$0268$i$i = $770;$$pre$phi$i18$iZ2D = $769;
         }
         HEAP32[$$pre$phi$i18$iZ2D>>2] = $672;
         $771 = ((($$0268$i$i)) + 12|0);
         HEAP32[$771>>2] = $672;
         $772 = ((($672)) + 8|0);
         HEAP32[$772>>2] = $$0268$i$i;
         $773 = ((($672)) + 12|0);
         HEAP32[$773>>2] = $763;
         break;
        }
        $774 = $$0260$i$i >>> 8;
        $775 = ($774|0)==(0);
        do {
         if ($775) {
          $$0269$i$i = 0;
         } else {
          $776 = ($$0260$i$i>>>0)>(16777215);
          if ($776) {
           $$0269$i$i = 31;
           break;
          }
          $777 = (($774) + 1048320)|0;
          $778 = $777 >>> 16;
          $779 = $778 & 8;
          $780 = $774 << $779;
          $781 = (($780) + 520192)|0;
          $782 = $781 >>> 16;
          $783 = $782 & 4;
          $784 = $783 | $779;
          $785 = $780 << $783;
          $786 = (($785) + 245760)|0;
          $787 = $786 >>> 16;
          $788 = $787 & 2;
          $789 = $784 | $788;
          $790 = (14 - ($789))|0;
          $791 = $785 << $788;
          $792 = $791 >>> 15;
          $793 = (($790) + ($792))|0;
          $794 = $793 << 1;
          $795 = (($793) + 7)|0;
          $796 = $$0260$i$i >>> $795;
          $797 = $796 & 1;
          $798 = $797 | $794;
          $$0269$i$i = $798;
         }
        } while(0);
        $799 = (7212 + ($$0269$i$i<<2)|0);
        $800 = ((($672)) + 28|0);
        HEAP32[$800>>2] = $$0269$i$i;
        $801 = ((($672)) + 16|0);
        $802 = ((($801)) + 4|0);
        HEAP32[$802>>2] = 0;
        HEAP32[$801>>2] = 0;
        $803 = HEAP32[(6912)>>2]|0;
        $804 = 1 << $$0269$i$i;
        $805 = $803 & $804;
        $806 = ($805|0)==(0);
        if ($806) {
         $807 = $803 | $804;
         HEAP32[(6912)>>2] = $807;
         HEAP32[$799>>2] = $672;
         $808 = ((($672)) + 24|0);
         HEAP32[$808>>2] = $799;
         $809 = ((($672)) + 12|0);
         HEAP32[$809>>2] = $672;
         $810 = ((($672)) + 8|0);
         HEAP32[$810>>2] = $672;
         break;
        }
        $811 = HEAP32[$799>>2]|0;
        $812 = ($$0269$i$i|0)==(31);
        $813 = $$0269$i$i >>> 1;
        $814 = (25 - ($813))|0;
        $815 = $812 ? 0 : $814;
        $816 = $$0260$i$i << $815;
        $$0261$i$i = $816;$$0262$i$i = $811;
        while(1) {
         $817 = ((($$0262$i$i)) + 4|0);
         $818 = HEAP32[$817>>2]|0;
         $819 = $818 & -8;
         $820 = ($819|0)==($$0260$i$i|0);
         if ($820) {
          label = 194;
          break;
         }
         $821 = $$0261$i$i >>> 31;
         $822 = (((($$0262$i$i)) + 16|0) + ($821<<2)|0);
         $823 = $$0261$i$i << 1;
         $824 = HEAP32[$822>>2]|0;
         $825 = ($824|0)==(0|0);
         if ($825) {
          label = 193;
          break;
         } else {
          $$0261$i$i = $823;$$0262$i$i = $824;
         }
        }
        if ((label|0) == 193) {
         HEAP32[$822>>2] = $672;
         $826 = ((($672)) + 24|0);
         HEAP32[$826>>2] = $$0262$i$i;
         $827 = ((($672)) + 12|0);
         HEAP32[$827>>2] = $672;
         $828 = ((($672)) + 8|0);
         HEAP32[$828>>2] = $672;
         break;
        }
        else if ((label|0) == 194) {
         $829 = ((($$0262$i$i)) + 8|0);
         $830 = HEAP32[$829>>2]|0;
         $831 = ((($830)) + 12|0);
         HEAP32[$831>>2] = $672;
         HEAP32[$829>>2] = $672;
         $832 = ((($672)) + 8|0);
         HEAP32[$832>>2] = $830;
         $833 = ((($672)) + 12|0);
         HEAP32[$833>>2] = $$0262$i$i;
         $834 = ((($672)) + 24|0);
         HEAP32[$834>>2] = 0;
         break;
        }
       }
      } while(0);
      $959 = ((($660)) + 8|0);
      $$0 = $959;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (7356);
    while(1) {
     $835 = HEAP32[$$0$i$i$i>>2]|0;
     $836 = ($835>>>0)>($581>>>0);
     if (!($836)) {
      $837 = ((($$0$i$i$i)) + 4|0);
      $838 = HEAP32[$837>>2]|0;
      $839 = (($835) + ($838)|0);
      $840 = ($839>>>0)>($581>>>0);
      if ($840) {
       break;
      }
     }
     $841 = ((($$0$i$i$i)) + 8|0);
     $842 = HEAP32[$841>>2]|0;
     $$0$i$i$i = $842;
    }
    $843 = ((($839)) + -47|0);
    $844 = ((($843)) + 8|0);
    $845 = $844;
    $846 = $845 & 7;
    $847 = ($846|0)==(0);
    $848 = (0 - ($845))|0;
    $849 = $848 & 7;
    $850 = $847 ? 0 : $849;
    $851 = (($843) + ($850)|0);
    $852 = ((($581)) + 16|0);
    $853 = ($851>>>0)<($852>>>0);
    $854 = $853 ? $581 : $851;
    $855 = ((($854)) + 8|0);
    $856 = ((($854)) + 24|0);
    $857 = (($$723947$i) + -40)|0;
    $858 = ((($$748$i)) + 8|0);
    $859 = $858;
    $860 = $859 & 7;
    $861 = ($860|0)==(0);
    $862 = (0 - ($859))|0;
    $863 = $862 & 7;
    $864 = $861 ? 0 : $863;
    $865 = (($$748$i) + ($864)|0);
    $866 = (($857) - ($864))|0;
    HEAP32[(6932)>>2] = $865;
    HEAP32[(6920)>>2] = $866;
    $867 = $866 | 1;
    $868 = ((($865)) + 4|0);
    HEAP32[$868>>2] = $867;
    $869 = (($865) + ($866)|0);
    $870 = ((($869)) + 4|0);
    HEAP32[$870>>2] = 40;
    $871 = HEAP32[(7396)>>2]|0;
    HEAP32[(6936)>>2] = $871;
    $872 = ((($854)) + 4|0);
    HEAP32[$872>>2] = 27;
    ;HEAP32[$855>>2]=HEAP32[(7356)>>2]|0;HEAP32[$855+4>>2]=HEAP32[(7356)+4>>2]|0;HEAP32[$855+8>>2]=HEAP32[(7356)+8>>2]|0;HEAP32[$855+12>>2]=HEAP32[(7356)+12>>2]|0;
    HEAP32[(7356)>>2] = $$748$i;
    HEAP32[(7360)>>2] = $$723947$i;
    HEAP32[(7368)>>2] = 0;
    HEAP32[(7364)>>2] = $855;
    $874 = $856;
    while(1) {
     $873 = ((($874)) + 4|0);
     HEAP32[$873>>2] = 7;
     $875 = ((($874)) + 8|0);
     $876 = ($875>>>0)<($839>>>0);
     if ($876) {
      $874 = $873;
     } else {
      break;
     }
    }
    $877 = ($854|0)==($581|0);
    if (!($877)) {
     $878 = $854;
     $879 = $581;
     $880 = (($878) - ($879))|0;
     $881 = HEAP32[$872>>2]|0;
     $882 = $881 & -2;
     HEAP32[$872>>2] = $882;
     $883 = $880 | 1;
     $884 = ((($581)) + 4|0);
     HEAP32[$884>>2] = $883;
     HEAP32[$854>>2] = $880;
     $885 = $880 >>> 3;
     $886 = ($880>>>0)<(256);
     if ($886) {
      $887 = $885 << 1;
      $888 = (6948 + ($887<<2)|0);
      $889 = HEAP32[1727]|0;
      $890 = 1 << $885;
      $891 = $889 & $890;
      $892 = ($891|0)==(0);
      if ($892) {
       $893 = $889 | $890;
       HEAP32[1727] = $893;
       $$pre$i$i = ((($888)) + 8|0);
       $$0206$i$i = $888;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $894 = ((($888)) + 8|0);
       $895 = HEAP32[$894>>2]|0;
       $$0206$i$i = $895;$$pre$phi$i$iZ2D = $894;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $581;
      $896 = ((($$0206$i$i)) + 12|0);
      HEAP32[$896>>2] = $581;
      $897 = ((($581)) + 8|0);
      HEAP32[$897>>2] = $$0206$i$i;
      $898 = ((($581)) + 12|0);
      HEAP32[$898>>2] = $888;
      break;
     }
     $899 = $880 >>> 8;
     $900 = ($899|0)==(0);
     if ($900) {
      $$0207$i$i = 0;
     } else {
      $901 = ($880>>>0)>(16777215);
      if ($901) {
       $$0207$i$i = 31;
      } else {
       $902 = (($899) + 1048320)|0;
       $903 = $902 >>> 16;
       $904 = $903 & 8;
       $905 = $899 << $904;
       $906 = (($905) + 520192)|0;
       $907 = $906 >>> 16;
       $908 = $907 & 4;
       $909 = $908 | $904;
       $910 = $905 << $908;
       $911 = (($910) + 245760)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 2;
       $914 = $909 | $913;
       $915 = (14 - ($914))|0;
       $916 = $910 << $913;
       $917 = $916 >>> 15;
       $918 = (($915) + ($917))|0;
       $919 = $918 << 1;
       $920 = (($918) + 7)|0;
       $921 = $880 >>> $920;
       $922 = $921 & 1;
       $923 = $922 | $919;
       $$0207$i$i = $923;
      }
     }
     $924 = (7212 + ($$0207$i$i<<2)|0);
     $925 = ((($581)) + 28|0);
     HEAP32[$925>>2] = $$0207$i$i;
     $926 = ((($581)) + 20|0);
     HEAP32[$926>>2] = 0;
     HEAP32[$852>>2] = 0;
     $927 = HEAP32[(6912)>>2]|0;
     $928 = 1 << $$0207$i$i;
     $929 = $927 & $928;
     $930 = ($929|0)==(0);
     if ($930) {
      $931 = $927 | $928;
      HEAP32[(6912)>>2] = $931;
      HEAP32[$924>>2] = $581;
      $932 = ((($581)) + 24|0);
      HEAP32[$932>>2] = $924;
      $933 = ((($581)) + 12|0);
      HEAP32[$933>>2] = $581;
      $934 = ((($581)) + 8|0);
      HEAP32[$934>>2] = $581;
      break;
     }
     $935 = HEAP32[$924>>2]|0;
     $936 = ($$0207$i$i|0)==(31);
     $937 = $$0207$i$i >>> 1;
     $938 = (25 - ($937))|0;
     $939 = $936 ? 0 : $938;
     $940 = $880 << $939;
     $$0201$i$i = $940;$$0202$i$i = $935;
     while(1) {
      $941 = ((($$0202$i$i)) + 4|0);
      $942 = HEAP32[$941>>2]|0;
      $943 = $942 & -8;
      $944 = ($943|0)==($880|0);
      if ($944) {
       label = 216;
       break;
      }
      $945 = $$0201$i$i >>> 31;
      $946 = (((($$0202$i$i)) + 16|0) + ($945<<2)|0);
      $947 = $$0201$i$i << 1;
      $948 = HEAP32[$946>>2]|0;
      $949 = ($948|0)==(0|0);
      if ($949) {
       label = 215;
       break;
      } else {
       $$0201$i$i = $947;$$0202$i$i = $948;
      }
     }
     if ((label|0) == 215) {
      HEAP32[$946>>2] = $581;
      $950 = ((($581)) + 24|0);
      HEAP32[$950>>2] = $$0202$i$i;
      $951 = ((($581)) + 12|0);
      HEAP32[$951>>2] = $581;
      $952 = ((($581)) + 8|0);
      HEAP32[$952>>2] = $581;
      break;
     }
     else if ((label|0) == 216) {
      $953 = ((($$0202$i$i)) + 8|0);
      $954 = HEAP32[$953>>2]|0;
      $955 = ((($954)) + 12|0);
      HEAP32[$955>>2] = $581;
      HEAP32[$953>>2] = $581;
      $956 = ((($581)) + 8|0);
      HEAP32[$956>>2] = $954;
      $957 = ((($581)) + 12|0);
      HEAP32[$957>>2] = $$0202$i$i;
      $958 = ((($581)) + 24|0);
      HEAP32[$958>>2] = 0;
      break;
     }
    }
   }
  } while(0);
  $960 = HEAP32[(6920)>>2]|0;
  $961 = ($960>>>0)>($$0192>>>0);
  if ($961) {
   $962 = (($960) - ($$0192))|0;
   HEAP32[(6920)>>2] = $962;
   $963 = HEAP32[(6932)>>2]|0;
   $964 = (($963) + ($$0192)|0);
   HEAP32[(6932)>>2] = $964;
   $965 = $962 | 1;
   $966 = ((($964)) + 4|0);
   HEAP32[$966>>2] = $965;
   $967 = $$0192 | 3;
   $968 = ((($963)) + 4|0);
   HEAP32[$968>>2] = $967;
   $969 = ((($963)) + 8|0);
   $$0 = $969;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $970 = (___errno_location()|0);
 HEAP32[$970>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0195$i = 0, $$0195$in$i = 0, $$0348 = 0, $$0349 = 0, $$0361 = 0, $$0368 = 0, $$1 = 0, $$1347 = 0, $$1352 = 0, $$1355 = 0, $$1363 = 0, $$1367 = 0, $$2 = 0, $$3 = 0, $$3365 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink3 = 0, $$sink5 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond374 = 0, $cond375 = 0, $not$ = 0, $not$370 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(6924)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(6928)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $78 = ((($7)) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = $79 & 3;
    $81 = ($80|0)==(3);
    if (!($81)) {
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
    $82 = (($14) + ($15)|0);
    $83 = ((($14)) + 4|0);
    $84 = $15 | 1;
    $85 = $79 & -2;
    HEAP32[(6916)>>2] = $15;
    HEAP32[$78>>2] = $85;
    HEAP32[$83>>2] = $84;
    HEAP32[$82>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[1727]|0;
     $29 = $28 & $27;
     HEAP32[1727] = $29;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1347 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1352 = $45;$$1355 = $41;
      }
     } else {
      $$1352 = $43;$$1355 = $42;
     }
     while(1) {
      $47 = ((($$1352)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if (!($49)) {
       $$1352 = $48;$$1355 = $47;
       continue;
      }
      $50 = ((($$1352)) + 16|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0|0);
      if ($52) {
       break;
      } else {
       $$1352 = $51;$$1355 = $50;
      }
     }
     HEAP32[$$1355>>2] = 0;
     $$3 = $$1352;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1347 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (7212 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($14|0)==($57|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond374 = ($$3|0)==(0|0);
     if ($cond374) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(6912)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(6912)>>2] = $62;
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $not$370 = ($64|0)!=($14|0);
     $$sink3 = $not$370&1;
     $65 = (((($33)) + 16|0) + ($$sink3<<2)|0);
     HEAP32[$65>>2] = $$3;
     $66 = ($$3|0)==(0|0);
     if ($66) {
      $$1 = $14;$$1347 = $15;$87 = $14;
      break;
     }
    }
    $67 = ((($$3)) + 24|0);
    HEAP32[$67>>2] = $33;
    $68 = ((($14)) + 16|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(0|0);
    if (!($70)) {
     $71 = ((($$3)) + 16|0);
     HEAP32[$71>>2] = $69;
     $72 = ((($69)) + 24|0);
     HEAP32[$72>>2] = $$3;
    }
    $73 = ((($68)) + 4|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($74|0)==(0|0);
    if ($75) {
     $$1 = $14;$$1347 = $15;$87 = $14;
    } else {
     $76 = ((($$3)) + 20|0);
     HEAP32[$76>>2] = $74;
     $77 = ((($74)) + 24|0);
     HEAP32[$77>>2] = $$3;
     $$1 = $14;$$1347 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1347 = $6;$87 = $2;
  }
 } while(0);
 $86 = ($87>>>0)<($7>>>0);
 if (!($86)) {
  return;
 }
 $88 = ((($7)) + 4|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $89 & 1;
 $91 = ($90|0)==(0);
 if ($91) {
  return;
 }
 $92 = $89 & 2;
 $93 = ($92|0)==(0);
 if ($93) {
  $94 = HEAP32[(6932)>>2]|0;
  $95 = ($7|0)==($94|0);
  $96 = HEAP32[(6928)>>2]|0;
  if ($95) {
   $97 = HEAP32[(6920)>>2]|0;
   $98 = (($97) + ($$1347))|0;
   HEAP32[(6920)>>2] = $98;
   HEAP32[(6932)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = ($$1|0)==($96|0);
   if (!($101)) {
    return;
   }
   HEAP32[(6928)>>2] = 0;
   HEAP32[(6916)>>2] = 0;
   return;
  }
  $102 = ($7|0)==($96|0);
  if ($102) {
   $103 = HEAP32[(6916)>>2]|0;
   $104 = (($103) + ($$1347))|0;
   HEAP32[(6916)>>2] = $104;
   HEAP32[(6928)>>2] = $87;
   $105 = $104 | 1;
   $106 = ((($$1)) + 4|0);
   HEAP32[$106>>2] = $105;
   $107 = (($87) + ($104)|0);
   HEAP32[$107>>2] = $104;
   return;
  }
  $108 = $89 & -8;
  $109 = (($108) + ($$1347))|0;
  $110 = $89 >>> 3;
  $111 = ($89>>>0)<(256);
  do {
   if ($111) {
    $112 = ((($7)) + 8|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = ((($7)) + 12|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ($115|0)==($113|0);
    if ($116) {
     $117 = 1 << $110;
     $118 = $117 ^ -1;
     $119 = HEAP32[1727]|0;
     $120 = $119 & $118;
     HEAP32[1727] = $120;
     break;
    } else {
     $121 = ((($113)) + 12|0);
     HEAP32[$121>>2] = $115;
     $122 = ((($115)) + 8|0);
     HEAP32[$122>>2] = $113;
     break;
    }
   } else {
    $123 = ((($7)) + 24|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((($7)) + 12|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==($7|0);
    do {
     if ($127) {
      $132 = ((($7)) + 16|0);
      $133 = ((($132)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(0|0);
      if ($135) {
       $136 = HEAP32[$132>>2]|0;
       $137 = ($136|0)==(0|0);
       if ($137) {
        $$3365 = 0;
        break;
       } else {
        $$1363 = $136;$$1367 = $132;
       }
      } else {
       $$1363 = $134;$$1367 = $133;
      }
      while(1) {
       $138 = ((($$1363)) + 20|0);
       $139 = HEAP32[$138>>2]|0;
       $140 = ($139|0)==(0|0);
       if (!($140)) {
        $$1363 = $139;$$1367 = $138;
        continue;
       }
       $141 = ((($$1363)) + 16|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        break;
       } else {
        $$1363 = $142;$$1367 = $141;
       }
      }
      HEAP32[$$1367>>2] = 0;
      $$3365 = $$1363;
     } else {
      $128 = ((($7)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ((($129)) + 12|0);
      HEAP32[$130>>2] = $126;
      $131 = ((($126)) + 8|0);
      HEAP32[$131>>2] = $129;
      $$3365 = $126;
     }
    } while(0);
    $144 = ($124|0)==(0|0);
    if (!($144)) {
     $145 = ((($7)) + 28|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = (7212 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($7|0)==($148|0);
     if ($149) {
      HEAP32[$147>>2] = $$3365;
      $cond375 = ($$3365|0)==(0|0);
      if ($cond375) {
       $150 = 1 << $146;
       $151 = $150 ^ -1;
       $152 = HEAP32[(6912)>>2]|0;
       $153 = $152 & $151;
       HEAP32[(6912)>>2] = $153;
       break;
      }
     } else {
      $154 = ((($124)) + 16|0);
      $155 = HEAP32[$154>>2]|0;
      $not$ = ($155|0)!=($7|0);
      $$sink5 = $not$&1;
      $156 = (((($124)) + 16|0) + ($$sink5<<2)|0);
      HEAP32[$156>>2] = $$3365;
      $157 = ($$3365|0)==(0|0);
      if ($157) {
       break;
      }
     }
     $158 = ((($$3365)) + 24|0);
     HEAP32[$158>>2] = $124;
     $159 = ((($7)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(0|0);
     if (!($161)) {
      $162 = ((($$3365)) + 16|0);
      HEAP32[$162>>2] = $160;
      $163 = ((($160)) + 24|0);
      HEAP32[$163>>2] = $$3365;
     }
     $164 = ((($159)) + 4|0);
     $165 = HEAP32[$164>>2]|0;
     $166 = ($165|0)==(0|0);
     if (!($166)) {
      $167 = ((($$3365)) + 20|0);
      HEAP32[$167>>2] = $165;
      $168 = ((($165)) + 24|0);
      HEAP32[$168>>2] = $$3365;
     }
    }
   }
  } while(0);
  $169 = $109 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($87) + ($109)|0);
  HEAP32[$171>>2] = $109;
  $172 = HEAP32[(6928)>>2]|0;
  $173 = ($$1|0)==($172|0);
  if ($173) {
   HEAP32[(6916)>>2] = $109;
   return;
  } else {
   $$2 = $109;
  }
 } else {
  $174 = $89 & -2;
  HEAP32[$88>>2] = $174;
  $175 = $$1347 | 1;
  $176 = ((($$1)) + 4|0);
  HEAP32[$176>>2] = $175;
  $177 = (($87) + ($$1347)|0);
  HEAP32[$177>>2] = $$1347;
  $$2 = $$1347;
 }
 $178 = $$2 >>> 3;
 $179 = ($$2>>>0)<(256);
 if ($179) {
  $180 = $178 << 1;
  $181 = (6948 + ($180<<2)|0);
  $182 = HEAP32[1727]|0;
  $183 = 1 << $178;
  $184 = $182 & $183;
  $185 = ($184|0)==(0);
  if ($185) {
   $186 = $182 | $183;
   HEAP32[1727] = $186;
   $$pre = ((($181)) + 8|0);
   $$0368 = $181;$$pre$phiZ2D = $$pre;
  } else {
   $187 = ((($181)) + 8|0);
   $188 = HEAP32[$187>>2]|0;
   $$0368 = $188;$$pre$phiZ2D = $187;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $189 = ((($$0368)) + 12|0);
  HEAP32[$189>>2] = $$1;
  $190 = ((($$1)) + 8|0);
  HEAP32[$190>>2] = $$0368;
  $191 = ((($$1)) + 12|0);
  HEAP32[$191>>2] = $181;
  return;
 }
 $192 = $$2 >>> 8;
 $193 = ($192|0)==(0);
 if ($193) {
  $$0361 = 0;
 } else {
  $194 = ($$2>>>0)>(16777215);
  if ($194) {
   $$0361 = 31;
  } else {
   $195 = (($192) + 1048320)|0;
   $196 = $195 >>> 16;
   $197 = $196 & 8;
   $198 = $192 << $197;
   $199 = (($198) + 520192)|0;
   $200 = $199 >>> 16;
   $201 = $200 & 4;
   $202 = $201 | $197;
   $203 = $198 << $201;
   $204 = (($203) + 245760)|0;
   $205 = $204 >>> 16;
   $206 = $205 & 2;
   $207 = $202 | $206;
   $208 = (14 - ($207))|0;
   $209 = $203 << $206;
   $210 = $209 >>> 15;
   $211 = (($208) + ($210))|0;
   $212 = $211 << 1;
   $213 = (($211) + 7)|0;
   $214 = $$2 >>> $213;
   $215 = $214 & 1;
   $216 = $215 | $212;
   $$0361 = $216;
  }
 }
 $217 = (7212 + ($$0361<<2)|0);
 $218 = ((($$1)) + 28|0);
 HEAP32[$218>>2] = $$0361;
 $219 = ((($$1)) + 16|0);
 $220 = ((($$1)) + 20|0);
 HEAP32[$220>>2] = 0;
 HEAP32[$219>>2] = 0;
 $221 = HEAP32[(6912)>>2]|0;
 $222 = 1 << $$0361;
 $223 = $221 & $222;
 $224 = ($223|0)==(0);
 do {
  if ($224) {
   $225 = $221 | $222;
   HEAP32[(6912)>>2] = $225;
   HEAP32[$217>>2] = $$1;
   $226 = ((($$1)) + 24|0);
   HEAP32[$226>>2] = $217;
   $227 = ((($$1)) + 12|0);
   HEAP32[$227>>2] = $$1;
   $228 = ((($$1)) + 8|0);
   HEAP32[$228>>2] = $$1;
  } else {
   $229 = HEAP32[$217>>2]|0;
   $230 = ($$0361|0)==(31);
   $231 = $$0361 >>> 1;
   $232 = (25 - ($231))|0;
   $233 = $230 ? 0 : $232;
   $234 = $$2 << $233;
   $$0348 = $234;$$0349 = $229;
   while(1) {
    $235 = ((($$0349)) + 4|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     label = 73;
     break;
    }
    $239 = $$0348 >>> 31;
    $240 = (((($$0349)) + 16|0) + ($239<<2)|0);
    $241 = $$0348 << 1;
    $242 = HEAP32[$240>>2]|0;
    $243 = ($242|0)==(0|0);
    if ($243) {
     label = 72;
     break;
    } else {
     $$0348 = $241;$$0349 = $242;
    }
   }
   if ((label|0) == 72) {
    HEAP32[$240>>2] = $$1;
    $244 = ((($$1)) + 24|0);
    HEAP32[$244>>2] = $$0349;
    $245 = ((($$1)) + 12|0);
    HEAP32[$245>>2] = $$1;
    $246 = ((($$1)) + 8|0);
    HEAP32[$246>>2] = $$1;
    break;
   }
   else if ((label|0) == 73) {
    $247 = ((($$0349)) + 8|0);
    $248 = HEAP32[$247>>2]|0;
    $249 = ((($248)) + 12|0);
    HEAP32[$249>>2] = $$1;
    HEAP32[$247>>2] = $$1;
    $250 = ((($$1)) + 8|0);
    HEAP32[$250>>2] = $248;
    $251 = ((($$1)) + 12|0);
    HEAP32[$251>>2] = $$0349;
    $252 = ((($$1)) + 24|0);
    HEAP32[$252>>2] = 0;
    break;
   }
  }
 } while(0);
 $253 = HEAP32[(6940)>>2]|0;
 $254 = (($253) + -1)|0;
 HEAP32[(6940)>>2] = $254;
 $255 = ($254|0)==(0);
 if ($255) {
  $$0195$in$i = (7364);
 } else {
  return;
 }
 while(1) {
  $$0195$i = HEAP32[$$0195$in$i>>2]|0;
  $256 = ($$0195$i|0)==(0|0);
  $257 = ((($$0195$i)) + 8|0);
  if ($256) {
   break;
  } else {
   $$0195$in$i = $257;
  }
 }
 HEAP32[(6940)>>2] = -1;
 return;
}
function _emscripten_get_global_libc() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7404|0);
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_303($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___pthread_self_492()|0);
 $1 = ((($0)) + 64|0);
 return ($1|0);
}
function ___pthread_self_492() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (6052|0);
}
function _dummy_303($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0;
 var $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $25 = ($26|0)<(0);
    if ($25) {
     break;
    }
    $34 = (($$04855) - ($26))|0;
    $35 = ((($$04954)) + 4|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($26>>>0)>($36>>>0);
    $38 = ((($$04954)) + 8|0);
    $$150 = $37 ? $38 : $$04954;
    $39 = $37 << 31 >> 31;
    $$1 = (($39) + ($$04756))|0;
    $40 = $37 ? $36 : 0;
    $$0 = (($26) - ($40))|0;
    $41 = HEAP32[$$150>>2]|0;
    $42 = (($41) + ($$0)|0);
    HEAP32[$$150>>2] = $42;
    $43 = ((($$150)) + 4|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = (($44) - ($$0))|0;
    HEAP32[$43>>2] = $45;
    $46 = HEAP32[$13>>2]|0;
    $47 = $$150;
    HEAP32[$vararg_buffer3>>2] = $46;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $47;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $48 = (___syscall146(146,($vararg_buffer3|0))|0);
    $49 = (___syscall_ret($48)|0);
    $50 = ($34|0)==($49|0);
    if ($50) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $34;$$04954 = $$150;$26 = $49;
    }
   }
   $27 = ((($0)) + 16|0);
   HEAP32[$27>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $28 = HEAP32[$0>>2]|0;
   $29 = $28 | 32;
   HEAP32[$0>>2] = $29;
   $30 = ($$04756|0)==(2);
   if ($30) {
    $$051 = 0;
   } else {
    $31 = ((($$04954)) + 4|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($2) - ($32))|0;
    $$051 = $33;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  HEAP32[$4>>2] = $20;
  HEAP32[$7>>2] = $20;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 12;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((7468|0));
 return (7476|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((7468|0));
 return;
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[1605]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[1605]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $26 = $17;
     } else {
      $26 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $25 = ($26|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 15]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 15]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&15](a1|0,a2|0,a3|0)|0;
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&15](a1|0,a2|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&7](a1|0,a2|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&7](a1|0,a2|0,a3|0,a4|0)|0;
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(2);
}
function b3(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_close,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_iiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,___stdout_write,___stdio_seek,___stdio_write,b1,b1,b1];
var FUNCTION_TABLE_vii = [b2,b2,b2,b2,b2,b2,b2,b2,_ZSTDv07_defaultFreeFunction,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_iii = [b3,b3,b3,b3,b3,b3,b3,_ZSTDv07_defaultAllocFunction];
var FUNCTION_TABLE_iiiii = [b4,_HUF_decompress4X2_307,_HUF_decompress4X4_308,_HUFv05_decompress4X2,_HUFv05_decompress4X4,_HUFv06_decompress4X2,_HUFv06_decompress4X4,b4];

  return { stackSave: stackSave, _i64Subtract: _i64Subtract, setThrew: setThrew, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _ZSTD_getFrameContentSize: _ZSTD_getFrameContentSize, ___errno_location: ___errno_location, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, stackAlloc: stackAlloc, ___muldi3: ___muldi3, dynCall_vii: dynCall_vii, getTempRet0: getTempRet0, setTempRet0: setTempRet0, _i64Add: _i64Add, dynCall_iiii: dynCall_iiii, _emscripten_get_global_libc: _emscripten_get_global_libc, dynCall_iiiii: dynCall_iiiii, _ZSTD_decompress: _ZSTD_decompress, dynCall_ii: dynCall_ii, _llvm_bswap_i32: _llvm_bswap_i32, _free: _free, runPostSets: runPostSets, establishStackSpace: establishStackSpace, _memmove: _memmove, _ZSTD_isError: _ZSTD_isError, stackRestore: stackRestore, _ZSTD_versionNumber: _ZSTD_versionNumber, _malloc: _malloc, dynCall_iii: dynCall_iii, _emscripten_replace_memory: _emscripten_replace_memory };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__ZSTD_getFrameContentSize = asm["_ZSTD_getFrameContentSize"]; asm["_ZSTD_getFrameContentSize"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ZSTD_getFrameContentSize.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__emscripten_get_global_libc = asm["_emscripten_get_global_libc"]; asm["_emscripten_get_global_libc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_get_global_libc.apply(null, arguments);
};

var real__ZSTD_decompress = asm["_ZSTD_decompress"]; asm["_ZSTD_decompress"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ZSTD_decompress.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__ZSTD_isError = asm["_ZSTD_isError"]; asm["_ZSTD_isError"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ZSTD_isError.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real__ZSTD_versionNumber = asm["_ZSTD_versionNumber"]; asm["_ZSTD_versionNumber"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__ZSTD_versionNumber.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _ZSTD_getFrameContentSize = Module["_ZSTD_getFrameContentSize"] = asm["_ZSTD_getFrameContentSize"];
var _memset = Module["_memset"] = asm["_memset"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _emscripten_get_global_libc = Module["_emscripten_get_global_libc"] = asm["_emscripten_get_global_libc"];
var _ZSTD_decompress = Module["_ZSTD_decompress"] = asm["_ZSTD_decompress"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _ZSTD_isError = Module["_ZSTD_isError"] = asm["_ZSTD_isError"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var _ZSTD_versionNumber = Module["_ZSTD_versionNumber"] = asm["_ZSTD_versionNumber"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
;
Runtime.stackAlloc = Module['stackAlloc'];
Runtime.stackSave = Module['stackSave'];
Runtime.stackRestore = Module['stackRestore'];
Runtime.establishStackSpace = Module['establishStackSpace'];
Runtime.setTempRet0 = Module['setTempRet0'];
Runtime.getTempRet0 = Module['getTempRet0'];


// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;





// Modularize mode returns a function, which can be called to
// create instances. The instances provide a then() method,
// must like a Promise, that receives a callback. The callback
// is called when the module is ready to run, with the module
// as a parameter. (Like a Promise, it also returns the module
// so you can use the output of .then(..)).
Module['then'] = function(func) {
  // We may already be ready to run code at this time. if
  // so, just queue a call to the callback.
  if (Module['calledRun']) {
    func(Module);
  } else {
    // we are not ready to call then() yet. we must call it
    // at the same time we would call onRuntimeInitialized.
    var old = Module['onRuntimeInitialized'];
    Module['onRuntimeInitialized'] = function() {
      if (old) old();
      func(Module);
    };
  }
  return Module;
};

/**
 * @constructor
 * @extends {Error}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}




  return libzstd;
};
if (typeof module === "object" && module.exports) {
  module['exports'] = libzstd;
};
